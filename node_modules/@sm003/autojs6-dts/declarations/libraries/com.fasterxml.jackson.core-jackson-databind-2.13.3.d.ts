declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class AbstractTypeResolver extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.AbstractTypeResolver>;
					public resolveAbstractType(config: com.fasterxml.jackson.databind.DeserializationConfig, typeDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JavaType;
					public constructor();
					public findTypeMapping(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					/** @deprecated */
					public resolveAbstractType(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class AnnotationIntrospector extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.AnnotationIntrospector>;
					public findAutoDetectVisibility(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, checker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					public resolveSetterConflict(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, setter1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, setter2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public isTypeId(am: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
					public _hasOneOf(ann: com.fasterxml.jackson.databind.introspect.Annotated, annoClasses: java.lang.Class<any>[]): boolean;
					public findWrapperName(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
					/** @deprecated */
					public findInjectableValueId(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
					public hasAsValue(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					/** @deprecated */
					public findSerializationContentType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public findFilterId(ann: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findNamingStrategy(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
					public findFormat(memberOrClass: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
					/** @deprecated */
					public findDeserializationType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public findRootName(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.PropertyName;
					public findContentSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public constructor();
					public findPropertyIgnoralByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
					public findInjectableValue(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.annotation.JacksonInject.Value;
					public findDeserializationContentConverter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
					public hasAnySetter(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					/** @deprecated */
					public hasAnyGetterAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					public findSubtypes(a: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType>;
					public findTypeName(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
					public findNameForSerialization(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
					public findAndAddVirtualProperties(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, properties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
					public findImplicitPropertyName(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
					public findObjectReferenceInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated, objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
					/** @deprecated */
					public findCreatorBinding(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
					public findEnumAliases(enumType: java.lang.Class<any>, enumValues: java.lang.Enum<any>[], aliases: string[][]): void;
					public findObjectIdInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
					public isIgnorableType(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
					public findTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					public hasRequiredMarker(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
					public findPropertyAliases(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
					public findSerializationPropertyOrder(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string[];
					/** @deprecated */
					public hasAnySetterAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					public static pair(a1: com.fasterxml.jackson.databind.AnnotationIntrospector, a2: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public refineSerializationType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public findSerializationSortAlphabetically(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					public findViews(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>[];
					public findContentDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public version(): com.fasterxml.jackson.core.Version;
					public hasIgnoreMarker(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
					/** @deprecated */
					public findDeserializationContentType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseContentType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					/** @deprecated */
					public findPropertyIgnorals(ac: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
					public findPropertyDescription(ann: com.fasterxml.jackson.databind.introspect.Annotated): string;
					public findDefaultEnumValue(enumCls: java.lang.Class<java.lang.Enum<any>>): java.lang.Enum<any>;
					public findPropertyDefaultValue(ann: com.fasterxml.jackson.databind.introspect.Annotated): string;
					public refineDeserializationType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					/** @deprecated */
					public findSerializationInclusion(a: com.fasterxml.jackson.databind.introspect.Annotated, defValue: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
					/** @deprecated */
					public findPropertiesToIgnore(ac: com.fasterxml.jackson.databind.introspect.Annotated, forSerialization: boolean): string[];
					public findPOJOBuilderConfig(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
					public findPropertyInclusionByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
					public findPropertyInclusion(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonInclude.Value;
					/** @deprecated */
					public hasAsValueAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					public findNullSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findDeserializationConverter(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findKeyDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public allIntrospectors(result: java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
					/** @deprecated */
					public findIgnoreUnknownProperties(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
					public findSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
					/** @deprecated */
					public findSerializationType(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>;
					public allIntrospectors(): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
					public findSerializationContentConverter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
					public findUnwrappingNameTransformer(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.NameTransformer;
					public findNameForDeserialization(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
					public findPropertyIndex(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Integer;
					public findSetterInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonSetter.Value;
					public isAnnotationBundle(ann: java.lang.annotation.Annotation): boolean;
					public findClassDescription(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
					public findValueInstantiator(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
					public findSerializationTyping(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
					public findPropertyTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					public hasAnyGetter(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					public findEnumValues(enumType: java.lang.Class<any>, enumValues: java.lang.Enum<any>[], names: string[]): string[];
					public findMergeInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					public _findAnnotation(ann: com.fasterxml.jackson.databind.introspect.Annotated, annoClass: java.lang.Class<any>): java.lang.annotation.Annotation;
					/** @deprecated */
					public findDeserializationKeyType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseKeyType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
					public hasAsKey(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					public static nopInstance(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public _hasAnnotation(ann: com.fasterxml.jackson.databind.introspect.Annotated, annoClass: java.lang.Class<any>): boolean;
					/** @deprecated */
					public findSerializationInclusionForContent(a: com.fasterxml.jackson.databind.introspect.Annotated, defValue: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
					public findPOJOBuilder(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Class<any>;
					public findKeySerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
					public findRenameByField(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, f: com.fasterxml.jackson.databind.introspect.AnnotatedField, implName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.PropertyName;
					public findPropertyContentTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, containerType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					/** @deprecated */
					public hasCreatorAnnotation(ann: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
					public findReferenceType(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
					public findPropertyAccess(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonProperty.Access;
					public findSerializationConverter(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
					/** @deprecated */
					public findEnumValue(value: java.lang.Enum<any>): string;
					public findCreatorAnnotation(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
					/** @deprecated */
					public findSerializationKeyType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
				}
				export module AnnotationIntrospector {
					export class ReferenceProperty extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty>;
						public static back(name: string): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public isBackReference(): boolean;
						public constructor(t: com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type, n: string);
						public static managed(name: string): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public getType(): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
						public isManagedReference(): boolean;
						public getName(): string;
					}
					export module ReferenceProperty {
						export class Type {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type>;
							public static MANAGED_REFERENCE: com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
							public static BACK_REFERENCE: com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
							public static valueOf(name: string): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
							public static values(): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type[];
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
					export class XmlExtensions extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.AnnotationIntrospector.XmlExtensions>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.AnnotationIntrospector$XmlExtensions interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findNamespace(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): string;
							isOutputAsAttribute(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
							isOutputAsText(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
							isOutputAsCData(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						});
						public constructor();
						public findNamespace(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public isOutputAsText(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public isOutputAsCData(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public isOutputAsAttribute(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class BeanDescription extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.BeanDescription>;
					public _type: com.fasterxml.jackson.databind.JavaType;
					public constructor(type: com.fasterxml.jackson.databind.JavaType);
					public findExpectedFormat(param0: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.annotation.JsonFormat.Value;
					/** @deprecated */
					public findBackReferenceProperties(): java.util.Map<string,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
					public getConstructorsWithMode(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor,com.fasterxml.jackson.annotation.JsonCreator.Mode>>;
					/** @deprecated */
					public findAnySetterField(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					public hasKnownClassAnnotations(): boolean;
					/** @deprecated */
					public bindingsForBeanType(): com.fasterxml.jackson.databind.type.TypeBindings;
					public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
					public findProperties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
					public getClassInfo(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
					public findClassDescription(): string;
					public findDefaultViews(): java.lang.Class<any>[];
					public findInjectables(): java.util.Map<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
					/** @deprecated */
					public findSingleArgConstructor(...param0: java.lang.Class<any>[]): java.lang.reflect.Constructor<any>;
					/** @deprecated */
					public findJsonValueMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public findDeserializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
					public getConstructors(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
					/** @deprecated */
					public findFactoryMethod(...param0: java.lang.Class<any>[]): java.lang.reflect.Method;
					public findJsonKeyAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					public getBeanClass(): java.lang.Class<any>;
					public findMethod(param0: string, param1: java.lang.Class<any>[]): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public getClassAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
					public findDefaultConstructor(): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
					public findPropertyInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
					/** @deprecated */
					public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public isNonStaticInnerClass(): boolean;
					public findSerializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
					public getFactoryMethods(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
					public findAnySetterAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					/** @deprecated */
					public findAnySetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					public findPOJOBuilder(): java.lang.Class<any>;
					public instantiateBean(param0: boolean): any;
					public findAnyGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					public getIgnoredPropertyNames(): java.util.Set<string>;
					public getFactoryMethodsWithMode(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata<com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.annotation.JsonCreator.Mode>>;
					public findPOJOBuilderConfig(): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
					public getType(): com.fasterxml.jackson.databind.JavaType;
					public findBackReferences(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
					public findJsonValueAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class BeanProperty extends java.lang.Object implements com.fasterxml.jackson.databind.util.Named {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.BeanProperty>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.databind.BeanProperty interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getName(): string;
						getFullName(): com.fasterxml.jackson.databind.PropertyName;
						getType(): com.fasterxml.jackson.databind.JavaType;
						getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						isRequired(): boolean;
						isVirtual(): boolean;
						getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						"<clinit>"(): void;
						getName(): string;
					});
					public constructor();
					public static EMPTY_FORMAT: com.fasterxml.jackson.annotation.JsonFormat.Value;
					public static EMPTY_INCLUDE: com.fasterxml.jackson.annotation.JsonInclude.Value;
					public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
					public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
					public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
					public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public isRequired(): boolean;
					public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					public getName(): string;
					public getFullName(): com.fasterxml.jackson.databind.PropertyName;
					public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
					public isVirtual(): boolean;
					public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
					public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
					/** @deprecated */
					public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public getType(): com.fasterxml.jackson.databind.JavaType;
					public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
				}
				export module BeanProperty {
					export class Bogus extends java.lang.Object implements com.fasterxml.jackson.databind.BeanProperty {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.BeanProperty.Bogus>;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public isRequired(): boolean;
						public constructor();
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
					export class Std extends java.lang.Object implements com.fasterxml.jackson.databind.BeanProperty, java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.BeanProperty.Std>;
						public _name: com.fasterxml.jackson.databind.PropertyName;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _wrapperName: com.fasterxml.jackson.databind.PropertyName;
						public _metadata: com.fasterxml.jackson.databind.PropertyMetadata;
						public _member: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public isRequired(): boolean;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						/** @deprecated */
						public constructor(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapperName: com.fasterxml.jackson.databind.PropertyName, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
						public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor(base: com.fasterxml.jackson.databind.BeanProperty.Std, newType: com.fasterxml.jackson.databind.JavaType);
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapperName: com.fasterxml.jackson.databind.PropertyName, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public withType(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanProperty.Std;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class DatabindContext extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DatabindContext>;
					public resolveAndValidateSubType(baseType: com.fasterxml.jackson.databind.JavaType, subClass: string, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.JavaType;
					public getAttribute(param0: any): any;
					public resolveSubType(baseType: com.fasterxml.jackson.databind.JavaType, subClassName: string): com.fasterxml.jackson.databind.JavaType;
					public objectIdGeneratorInstance(annotated: com.fasterxml.jackson.databind.introspect.Annotated, objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public reportBadDefinition(param0: com.fasterxml.jackson.databind.JavaType, param1: string): any;
					public getLocale(): java.util.Locale;
					public getActiveView(): java.lang.Class<any>;
					public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
					public getTimeZone(): java.util.TimeZone;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public _throwNotASubtype(baseType: com.fasterxml.jackson.databind.JavaType, subType: string): any;
					public _throwSubtypeNameNotAllowed(baseType: com.fasterxml.jackson.databind.JavaType, subType: string, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): any;
					public constructor();
					public _quotedString(desc: string): string;
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.DatabindContext;
					public reportBadDefinition(type: java.lang.Class<any>, msg: string): any;
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public canOverrideAccessModifiers(): boolean;
					public converterInstance(annotated: com.fasterxml.jackson.databind.introspect.Annotated, converterDef: any): com.fasterxml.jackson.databind.util.Converter<any,any>;
					public _colonConcat(msgBase: string, extra: string): string;
					public _throwSubtypeClassNotAllowed(baseType: com.fasterxml.jackson.databind.JavaType, subType: string, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): any;
					public _desc(desc: string): string;
					public objectIdResolverInstance(annotated: com.fasterxml.jackson.databind.introspect.Annotated, objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.annotation.ObjectIdResolver;
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public _format(msg: string, ...msgArgs: any[]): string;
					public constructType(type: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public constructSpecializedType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public invalidTypeIdException(param0: com.fasterxml.jackson.databind.JavaType, param1: string, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public _truncate(desc: string): string;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class DatabindException {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DatabindException>;
					public constructor(msg: string, rootCause: java.lang.Throwable);
					public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
					public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
					public prependPath(param0: any, param1: string): void;
					public constructor(msg: string);
					public prependPath(param0: any, param1: number): void;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class DeserializationConfig extends com.fasterxml.jackson.databind.cfg.MapperConfigBase<com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationConfig> implements java.io.Serializable  {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DeserializationConfig>;
					public _problemHandlers: com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.deser.DeserializationProblemHandler>;
					public _nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public _coercionConfigs: com.fasterxml.jackson.databind.cfg.CoercionConfigs;
					public _ctorDetector: com.fasterxml.jackson.databind.cfg.ConstructorDetector;
					public _deserFeatures: number;
					public _parserFeatures: number;
					public _parserFeaturesToChange: number;
					public _formatReadFeatures: number;
					public _formatReadFeaturesToChange: number;
					public getProblemHandlers(): com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.deser.DeserializationProblemHandler>;
					public hasDeserializationFeatures(featureMask: number): boolean;
					public isEnabled(f: com.fasterxml.jackson.core.JsonParser.Feature, factory: com.fasterxml.jackson.core.JsonFactory): boolean;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public with(str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): com.fasterxml.jackson.databind.DeserializationConfig;
					public withoutFeatures(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): any;
					public withFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(feature: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.DeserializationConfig;
					public requiresFullValue(): boolean;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver);
					public withView(view: java.lang.Class<any>): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(first: com.fasterxml.jackson.databind.DeserializationFeature, ...features: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public without(first: com.fasterxml.jackson.databind.DeserializationFeature, ...features: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
					public getBaseSettings(): com.fasterxml.jackson.databind.cfg.BaseSettings;
					public useRootWrapping(): boolean;
					public getNodeFactory(): com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public introspectForBuilder(builderType: com.fasterxml.jackson.databind.JavaType, valueTypeDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.BeanDescription;
					public introspectForCreation(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): any;
					public withFeatures(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(trb: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, view: java.lang.Class<any>);
					public findCoercionFromBlankString(targetType: com.fasterxml.jackson.databind.type.LogicalType, targetClass: java.lang.Class<any>, actionIfBlankNotAllowed: com.fasterxml.jackson.databind.cfg.CoercionAction): com.fasterxml.jackson.databind.cfg.CoercionAction;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, mapperFeatures: number);
					public withFeatures(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					public with(pns: com.fasterxml.jackson.databind.PropertyNamingStrategy): any;
					public with(f: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.DeserializationConfig;
					public getDeserializationFeatures(): number;
					public with(base64: com.fasterxml.jackson.core.Base64Variant): any;
					public _withMapperFeatures(mapperFeatures: number): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(feature: com.fasterxml.jackson.databind.MapperFeature, state: boolean): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, base: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public withView(param0: java.lang.Class<any>): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>);
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, attr: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public with(tz: java.util.TimeZone): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, rootName: com.fasterxml.jackson.databind.PropertyName);
					public with(ctorDetector: com.fasterxml.jackson.databind.cfg.ConstructorDetector): com.fasterxml.jackson.databind.DeserializationConfig;
					public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
					public hasSomeOfFeatures(featureMask: number): boolean;
					public constructor(src: com.fasterxml.jackson.databind.DeserializationConfig, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides, coercionConfigs: com.fasterxml.jackson.databind.cfg.CoercionConfigs);
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public withHandler(h: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(ci: com.fasterxml.jackson.databind.introspect.ClassIntrospector): any;
					public findTypeDeserializer(baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
					public withRootName(rootName: string): any;
					public isEnabled(f: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public without(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, base: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public with(l: java.util.Locale): any;
					public without(feature: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					public _withBase(newBase: com.fasterxml.jackson.databind.cfg.BaseSettings): com.fasterxml.jackson.databind.DeserializationConfig;
					public _withMapperFeatures(param0: number): any;
					public with(feature: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					public introspect(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public initialize(p: com.fasterxml.jackson.core.JsonParser, schema: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.core.JsonParser;
					/** @deprecated */
					public introspectForBuilder(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public withoutFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, mapperFeatures: number);
					public without(...param0: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides, coercionConfigs: com.fasterxml.jackson.databind.cfg.CoercionConfigs);
					public findMixInClassFor(cls: java.lang.Class<any>): java.lang.Class<any>;
					public with(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public withNoProblemHandlers(): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): any;
					public constructor(src: com.fasterxml.jackson.databind.DeserializationConfig, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public constructor(src: com.fasterxml.jackson.databind.DeserializationConfig, attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public with(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					/** @deprecated */
					public constructor(src: com.fasterxml.jackson.databind.DeserializationConfig, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public withRootName(rootName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.DeserializationConfig;
					public withoutFeatures(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.DeserializationConfig;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): any;
					public initialize(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonParser;
					public getConstructorDetector(): com.fasterxml.jackson.databind.cfg.ConstructorDetector;
					public without(feature: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(p: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider): any;
					public with(df: java.text.DateFormat): any;
					public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, mapperFeatures: number);
					public without(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.DeserializationConfig;
					/** @deprecated */
					public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
					public _withBase(param0: com.fasterxml.jackson.databind.cfg.BaseSettings): any;
					public with(...param0: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public with(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.DeserializationConfig;
					public with(tf: com.fasterxml.jackson.databind.type.TypeFactory): any;
					public findCoercionAction(targetType: com.fasterxml.jackson.databind.type.LogicalType, targetClass: java.lang.Class<any>, inputShape: com.fasterxml.jackson.databind.cfg.CoercionInputShape): com.fasterxml.jackson.databind.cfg.CoercionAction;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class DeserializationContext extends com.fasterxml.jackson.databind.DatabindContext implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DeserializationContext>;
					public _cache: com.fasterxml.jackson.databind.deser.DeserializerCache;
					public _factory: com.fasterxml.jackson.databind.deser.DeserializerFactory;
					public _config: com.fasterxml.jackson.databind.DeserializationConfig;
					public _featureFlags: number;
					public _readCapabilities: com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>;
					public _view: java.lang.Class<any>;
					public _parser: com.fasterxml.jackson.core.JsonParser;
					public _injectableValues: com.fasterxml.jackson.databind.InjectableValues;
					public _arrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders;
					public _objectBuffer: com.fasterxml.jackson.databind.util.ObjectBuffer;
					public _dateFormat: java.text.DateFormat;
					public _attributes: com.fasterxml.jackson.databind.cfg.ContextAttributes;
					public _currentType: com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.JavaType>;
					public getBase64Variant(): com.fasterxml.jackson.core.Base64Variant;
					/** @deprecated */
					public mappingException(message: string): com.fasterxml.jackson.databind.JsonMappingException;
					public constructCalendar(d: java.util.Date): java.util.Calendar;
					public bufferAsCopyOfValue(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.util.TokenBuffer;
					public setAttribute(key: any, value: any): com.fasterxml.jackson.databind.DeserializationContext;
					public constructSpecializedType(baseType: com.fasterxml.jackson.databind.JavaType, subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public handleInstantiationProblem(instClass: java.lang.Class<any>, argument: any, t: java.lang.Throwable): any;
					public constructor(df: com.fasterxml.jackson.databind.deser.DeserializerFactory);
					public reportBadDefinition(param0: com.fasterxml.jackson.databind.JavaType, param1: string): any;
					public findContextualValueDeserializer(type: com.fasterxml.jackson.databind.JavaType, prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					/** @deprecated */
					public wrongTokenException(p: com.fasterxml.jackson.core.JsonParser, expToken: com.fasterxml.jackson.core.JsonToken, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
					public reportWrongTokenException(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, expToken: com.fasterxml.jackson.core.JsonToken, msg: string, ...msgArgs: any[]): void;
					public reportBadTypeDefinition(bean: com.fasterxml.jackson.databind.BeanDescription, msg: string, ...msgArgs: any[]): any;
					public constructor();
					public weirdStringException(value: string, instClass: java.lang.Class<any>, msgBase: string): com.fasterxml.jackson.databind.JsonMappingException;
					/** @deprecated */
					public mappingException(targetClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonMappingException;
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public _shapeForToken(t: com.fasterxml.jackson.core.JsonToken): string;
					public canOverrideAccessModifiers(): boolean;
					public getNodeFactory(): com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public reportInputMismatch(targetType: com.fasterxml.jackson.databind.JavaType, msg: string, ...msgArgs: any[]): any;
					public instantiationException(instClass: java.lang.Class<any>, cause: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					/** @deprecated */
					public reportBadMerge(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): any;
					public readPropertyValue(p: com.fasterxml.jackson.core.JsonParser, prop: com.fasterxml.jackson.databind.BeanProperty, type: com.fasterxml.jackson.databind.JavaType): any;
					public reportInputMismatch(targetType: java.lang.Class<any>, msg: string, ...msgArgs: any[]): any;
					public handleWeirdKey(keyClass: java.lang.Class<any>, keyValue: string, msg: string, ...msgArgs: any[]): any;
					public handleMissingTypeId(baseType: com.fasterxml.jackson.databind.JavaType, idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, extraDesc: string): com.fasterxml.jackson.databind.JavaType;
					public getArrayBuilders(): com.fasterxml.jackson.databind.util.ArrayBuilders;
					public isEnabled(feat: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public getAttribute(key: any): any;
					public missingTypeIdException(baseType: com.fasterxml.jackson.databind.JavaType, extraDesc: string): com.fasterxml.jackson.databind.JsonMappingException;
					public constructType(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public constructType(type: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, type: com.fasterxml.jackson.databind.JavaType): any;
					public getAttribute(param0: any): any;
					public getDefaultPropertyFormat(baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public getActiveView(): java.lang.Class<any>;
					public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
					public getTimeZone(): java.util.TimeZone;
					public findClass(className: string): java.lang.Class<any>;
					/** @deprecated */
					public reportMissingContent(msg: string, ...msgArgs: any[]): void;
					public parseDate(dateStr: string): java.util.Date;
					/** @deprecated */
					public mappingException(msg: string, ...msgArgs: any[]): com.fasterxml.jackson.databind.JsonMappingException;
					public handleBadMerge(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): void;
					public reportBadCoercion(src: com.fasterxml.jackson.databind.JsonDeserializer<any>, targetType: java.lang.Class<any>, inputValue: any, msg: string, ...msgArgs: any[]): any;
					public hasValueDeserializerFor(type: com.fasterxml.jackson.databind.JavaType, cause: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public reportBadDefinition(type: java.lang.Class<any>, msg: string): any;
					public bufferForInputBuffering(): com.fasterxml.jackson.databind.util.TokenBuffer;
					public getFactory(): com.fasterxml.jackson.databind.deser.DeserializerFactory;
					public getConfig(): com.fasterxml.jackson.databind.DeserializationConfig;
					public handleUnknownProperty(p: com.fasterxml.jackson.core.JsonParser, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, instanceOrClass: any, propName: string): boolean;
					public reportTrailingTokens(targetType: java.lang.Class<any>, p: com.fasterxml.jackson.core.JsonParser, trailingToken: com.fasterxml.jackson.core.JsonToken): any;
					public isEnabled(cap: com.fasterxml.jackson.core.StreamReadCapability): boolean;
					public invalidTypeIdException(param0: com.fasterxml.jackson.databind.JavaType, param1: string, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
					public wrongTokenException(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType, expToken: com.fasterxml.jackson.core.JsonToken, extra: string): com.fasterxml.jackson.databind.JsonMappingException;
					public returnObjectBuffer(buf: com.fasterxml.jackson.databind.util.ObjectBuffer): void;
					public handleUnknownTypeId(baseType: com.fasterxml.jackson.databind.JavaType, id: string, idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, extraDesc: string): com.fasterxml.jackson.databind.JavaType;
					public handleMissingInstantiator(instClass: java.lang.Class<any>, valueInst: com.fasterxml.jackson.databind.deser.ValueInstantiator, p: com.fasterxml.jackson.core.JsonParser, msg: string, ...msgArgs: any[]): any;
					public reportUnresolvedObjectId(oidReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader, bean: any): any;
					public hasDeserializationFeatures(featureMask: number): boolean;
					public findRootValueDeserializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public findNonContextualValueDeserializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public constructor(df: com.fasterxml.jackson.databind.deser.DeserializerFactory, cache: com.fasterxml.jackson.databind.deser.DeserializerCache);
					public bufferForInputBuffering(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.util.TokenBuffer;
					/** @deprecated */
					public endOfInputException(instClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonMappingException;
					public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param2: com.fasterxml.jackson.annotation.ObjectIdResolver): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
					public findKeyDeserializer(keyType: com.fasterxml.jackson.databind.JavaType, prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.KeyDeserializer;
					public handleUnexpectedToken(targetType: com.fasterxml.jackson.databind.JavaType, t: com.fasterxml.jackson.core.JsonToken, p: com.fasterxml.jackson.core.JsonParser, msg: string, ...msgArgs: any[]): any;
					/** @deprecated */
					public unknownTypeException(type: com.fasterxml.jackson.databind.JavaType, id: string, extraDesc: string): com.fasterxml.jackson.databind.JsonMappingException;
					public readPropertyValue(p: com.fasterxml.jackson.core.JsonParser, prop: com.fasterxml.jackson.databind.BeanProperty, type: java.lang.Class<any>): any;
					public deserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public handleWeirdNativeValue(targetType: com.fasterxml.jackson.databind.JavaType, badValue: any, p: com.fasterxml.jackson.core.JsonParser): any;
					public handleUnexpectedToken(instClass: java.lang.Class<any>, p: com.fasterxml.jackson.core.JsonParser): any;
					public reportPropertyInputMismatch(targetType: com.fasterxml.jackson.databind.JavaType, propertyName: string, msg: string, ...msgArgs: any[]): any;
					public handleSecondaryContextualization(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, prop: com.fasterxml.jackson.databind.BeanProperty, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig, p: com.fasterxml.jackson.core.JsonParser, injectableValues: com.fasterxml.jackson.databind.InjectableValues);
					public instantiationException(instClass: java.lang.Class<any>, msg0: string): com.fasterxml.jackson.databind.JsonMappingException;
					public findCoercionFromBlankString(targetType: com.fasterxml.jackson.databind.type.LogicalType, targetClass: java.lang.Class<any>, actionIfBlankNotAllowed: com.fasterxml.jackson.databind.cfg.CoercionAction): com.fasterxml.jackson.databind.cfg.CoercionAction;
					public handleWeirdNumberValue(targetClass: java.lang.Class<any>, value: java.lang.Number, msg: string, ...msgArgs: any[]): any;
					public leaseObjectBuffer(): com.fasterxml.jackson.databind.util.ObjectBuffer;
					public extractScalarFromObject(p: com.fasterxml.jackson.core.JsonParser, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, scalarType: java.lang.Class<any>): string;
					public handleUnexpectedToken(instClass: java.lang.Class<any>, t: com.fasterxml.jackson.core.JsonToken, p: com.fasterxml.jackson.core.JsonParser, msg: string, ...msgArgs: any[]): any;
					public handleUnexpectedToken(targetType: com.fasterxml.jackson.databind.JavaType, p: com.fasterxml.jackson.core.JsonParser): any;
					public reportPropertyInputMismatch(targetType: java.lang.Class<any>, propertyName: string, msg: string, ...msgArgs: any[]): any;
					public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig);
					public weirdNativeValueException(value: any, instClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonMappingException;
					public getDeserializationFeatures(): number;
					public constructor(src: com.fasterxml.jackson.databind.DeserializationContext);
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public invalidTypeIdException(baseType: com.fasterxml.jackson.databind.JavaType, typeId: string, extraDesc: string): com.fasterxml.jackson.databind.JsonMappingException;
					public hasSomeOfFeatures(featureMask: number): boolean;
					public readTree(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.JsonNode;
					public reportWrongTokenException(targetType: com.fasterxml.jackson.databind.JavaType, expToken: com.fasterxml.jackson.core.JsonToken, msg: string, ...msgArgs: any[]): void;
					/** @deprecated */
					public reportMappingException(msg: string, ...msgArgs: any[]): void;
					public keyDeserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.KeyDeserializer;
					public reportBadDefinition(type: com.fasterxml.jackson.databind.JavaType, msg: string): any;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public reportWrongTokenException(targetType: java.lang.Class<any>, expToken: com.fasterxml.jackson.core.JsonToken, msg: string, ...msgArgs: any[]): void;
					public reportInputMismatch(prop: com.fasterxml.jackson.databind.BeanProperty, msg: string, ...msgArgs: any[]): any;
					public getLocale(): java.util.Locale;
					public _getDateFormat(): java.text.DateFormat;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public reportInputMismatch(src: com.fasterxml.jackson.databind.JsonDeserializer<any>, msg: string, ...msgArgs: any[]): any;
					public isEnabled(feature: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.DatabindContext;
					public _isCompatible(target: java.lang.Class<any>, value: any): boolean;
					/** @deprecated */
					public getDateFormat(): java.text.DateFormat;
					/** @deprecated */
					public reportWrongTokenException(p: com.fasterxml.jackson.core.JsonParser, expToken: com.fasterxml.jackson.core.JsonToken, msg: string, ...msgArgs: any[]): void;
					public getParser(): com.fasterxml.jackson.core.JsonParser;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, type: java.lang.Class<any>): any;
					public getContextualType(): com.fasterxml.jackson.databind.JavaType;
					public weirdNumberException(value: java.lang.Number, instClass: java.lang.Class<any>, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
					public handlePrimaryContextualization(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, prop: com.fasterxml.jackson.databind.BeanProperty, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public findInjectableValue(valueId: any, forProperty: com.fasterxml.jackson.databind.BeanProperty, beanInstance: any): any;
					public readTreeAsValue(n: com.fasterxml.jackson.databind.JsonNode, targetType: com.fasterxml.jackson.databind.JavaType): any;
					public reportBadPropertyDefinition(bean: com.fasterxml.jackson.databind.BeanDescription, prop: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, msg: string, ...msgArgs: any[]): any;
					public handleWeirdStringValue(targetClass: java.lang.Class<any>, value: string, msg: string, ...msgArgs: any[]): any;
					public weirdKeyException(keyClass: java.lang.Class<any>, keyValue: string, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
					public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory);
					public readTreeAsValue(n: com.fasterxml.jackson.databind.JsonNode, targetType: java.lang.Class<any>): any;
					/** @deprecated */
					public reportUnknownProperty(instanceOrClass: any, fieldName: string, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): void;
					public checkUnresolvedObjectId(): void;
					public constructSpecializedType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public wrongTokenException(p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>, expToken: com.fasterxml.jackson.core.JsonToken, extra: string): com.fasterxml.jackson.databind.JsonMappingException;
					/** @deprecated */
					public mappingException(targetClass: java.lang.Class<any>, token: com.fasterxml.jackson.core.JsonToken): com.fasterxml.jackson.databind.JsonMappingException;
					public findCoercionAction(targetType: com.fasterxml.jackson.databind.type.LogicalType, targetClass: java.lang.Class<any>, inputShape: com.fasterxml.jackson.databind.cfg.CoercionInputShape): com.fasterxml.jackson.databind.cfg.CoercionAction;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class DeserializationFeature extends com.fasterxml.jackson.databind.cfg.ConfigFeature {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.DeserializationFeature>;
					public static USE_BIG_DECIMAL_FOR_FLOATS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static USE_BIG_INTEGER_FOR_INTS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static USE_LONG_FOR_INTS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static USE_JAVA_ARRAY_FOR_JSON_ARRAY: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_UNKNOWN_PROPERTIES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_NULL_FOR_PRIMITIVES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_NUMBERS_FOR_ENUMS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_INVALID_SUBTYPE: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_READING_DUP_TREE_KEY: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_IGNORED_PROPERTIES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_UNRESOLVED_OBJECT_IDS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_MISSING_CREATOR_PROPERTIES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_NULL_CREATOR_PROPERTIES: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY: com.fasterxml.jackson.databind.DeserializationFeature;
					public static FAIL_ON_TRAILING_TOKENS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static WRAP_EXCEPTIONS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_SINGLE_VALUE_AS_ARRAY: com.fasterxml.jackson.databind.DeserializationFeature;
					public static UNWRAP_SINGLE_VALUE_ARRAYS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static UNWRAP_ROOT_VALUE: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ACCEPT_FLOAT_AS_INT: com.fasterxml.jackson.databind.DeserializationFeature;
					public static READ_ENUMS_USING_TO_STRING: com.fasterxml.jackson.databind.DeserializationFeature;
					public static READ_UNKNOWN_ENUM_VALUES_AS_NULL: com.fasterxml.jackson.databind.DeserializationFeature;
					public static READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE: com.fasterxml.jackson.databind.DeserializationFeature;
					public static READ_DATE_TIMESTAMPS_AS_NANOSECONDS: com.fasterxml.jackson.databind.DeserializationFeature;
					public static ADJUST_DATES_TO_CONTEXT_TIME_ZONE: com.fasterxml.jackson.databind.DeserializationFeature;
					public static EAGER_DESERIALIZER_FETCH: com.fasterxml.jackson.databind.DeserializationFeature;
					public enabledIn(param0: number): boolean;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public enabledIn(flags: number): boolean;
					public static values(): com.fasterxml.jackson.databind.DeserializationFeature[];
					public getMask(): number;
					public enabledByDefault(): boolean;
					public static valueOf(name: string): com.fasterxml.jackson.databind.DeserializationFeature;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class InjectableValues extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.InjectableValues>;
					public constructor();
					public findInjectableValue(param0: any, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.BeanProperty, param3: any): any;
				}
				export module InjectableValues {
					export class Std extends com.fasterxml.jackson.databind.InjectableValues implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.InjectableValues.Std>;
						public _values: java.util.Map<string,any>;
						public findInjectableValue(valueId: any, ctxt: com.fasterxml.jackson.databind.DeserializationContext, forProperty: com.fasterxml.jackson.databind.BeanProperty, beanInstance: any): any;
						public constructor();
						public addValue(classKey: java.lang.Class<any>, value: any): com.fasterxml.jackson.databind.InjectableValues.Std;
						public findInjectableValue(param0: any, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: com.fasterxml.jackson.databind.BeanProperty, param3: any): any;
						public constructor(values: java.util.Map<string,any>);
						public addValue(key: string, value: any): com.fasterxml.jackson.databind.InjectableValues.Std;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class JavaType implements java.io.Serializable, java.lang.reflect.Type {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JavaType>;
					public _class: java.lang.Class<any>;
					public _hash: number;
					public _valueHandler: any;
					public _typeHandler: any;
					public _asStatic: boolean;
					public getContentType(): com.fasterxml.jackson.databind.JavaType;
					public getKeyType(): com.fasterxml.jackson.databind.JavaType;
					public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public isTypeOrSuperTypeOf(clz: java.lang.Class<any>): boolean;
					public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public withHandlersFrom(src: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
					public findTypeParameters(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType[];
					public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
					public containedTypeOrUnknown(index: number): com.fasterxml.jackson.databind.JavaType;
					public getInterfaces(): java.util.List<com.fasterxml.jackson.databind.JavaType>;
					public getErasedSignature(): string;
					public getValueHandler(): any;
					public isThrowable(): boolean;
					public isEnumImplType(): boolean;
					public getTypeHandler(): any;
					public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public isTypeOrSubTypeOf(clz: java.lang.Class<any>): boolean;
					public isFinal(): boolean;
					public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
					public getSuperClass(): com.fasterxml.jackson.databind.JavaType;
					public hasRawClass(clz: java.lang.Class<any>): boolean;
					public isInterface(): boolean;
					public getContentValueHandler(): any;
					public isRecordType(): boolean;
					public isPrimitive(): boolean;
					public isJavaLangObject(): boolean;
					public constructor(base: com.fasterxml.jackson.databind.JavaType);
					public getReferencedType(): com.fasterxml.jackson.databind.JavaType;
					public isEnumType(): boolean;
					public isArrayType(): boolean;
					/** @deprecated */
					public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
					public hasContentType(): boolean;
					public isConcrete(): boolean;
					public findSuperType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public isMapLikeType(): boolean;
					public toString(): string;
					public containedType(param0: number): com.fasterxml.jackson.databind.JavaType;
					/** @deprecated */
					public forcedNarrowBy(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					/** @deprecated */
					public getParameterSource(): java.lang.Class<any>;
					public isCollectionLikeType(): boolean;
					public hashCode(): number;
					public containedTypeCount(): number;
					public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public isContainerType(): boolean;
					public hasGenericTypes(): boolean;
					public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
					public getBindings(): com.fasterxml.jackson.databind.type.TypeBindings;
					public hasHandlers(): boolean;
					public isAbstract(): boolean;
					public equals(param0: any): boolean;
					/** @deprecated */
					public containedTypeName(param0: number): string;
					public getContentTypeHandler(): any;
					public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
					public useStaticType(): boolean;
					public hasValueHandler(): boolean;
					public getRawClass(): java.lang.Class<any>;
					public getGenericSignature(): string;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class JsonDeserializer<T>  extends com.fasterxml.jackson.databind.deser.NullValueProvider {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonDeserializer<any>>;
					public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
					public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
					public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
					public isCachable(): boolean;
					public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
					public replaceDelegatee(delegatee: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getDelegatee(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
					/** @deprecated */
					public getNullValue(): any;
					public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
					public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
					public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
					public unwrappingDeserializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
					public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
					public getKnownPropertyNames(): java.util.Collection<any>;
					public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
					public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
					public constructor();
					public handledType(): java.lang.Class<any>;
					public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
					public findBackReference(refName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
					/** @deprecated */
					public getEmptyValue(): any;
				}
				export module JsonDeserializer {
					export abstract class None extends com.fasterxml.jackson.databind.JsonDeserializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonDeserializer.None>;
						public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						/** @deprecated */
						public getNullValue(): any;
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class JsonMappingException extends com.fasterxml.jackson.databind.DatabindException {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonMappingException>;
					public _path: java.util.LinkedList<com.fasterxml.jackson.databind.JsonMappingException.Reference>;
					public _processor: java.io.Closeable;
					public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
					public static fromUnexpectedIOE(src: java.io.IOException): com.fasterxml.jackson.databind.JsonMappingException;
					public static wrapWithPath(src: java.lang.Throwable, ref: com.fasterxml.jackson.databind.JsonMappingException.Reference): com.fasterxml.jackson.databind.JsonMappingException;
					public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					/** @deprecated */
					public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
					public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
					public constructor(msg: string);
					public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
					/** @deprecated */
					public constructor(msg: string);
					public toString(): string;
					public _appendPathDesc(sb: java.lang.StringBuilder): void;
					public static wrapWithPath(src: java.lang.Throwable, refFrom: any, index: number): com.fasterxml.jackson.databind.JsonMappingException;
					public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
					public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
					public static wrapWithPath(src: java.lang.Throwable, refFrom: any, refFieldName: string): com.fasterxml.jackson.databind.JsonMappingException;
					public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public prependPath(param0: any, param1: string): void;
					public getPathReference(): string;
					public getPath(): java.util.List<com.fasterxml.jackson.databind.JsonMappingException.Reference>;
					public prependPath(param0: any, param1: number): void;
					public getProcessor(): any;
					public constructor(msg: string, rootCause: java.lang.Throwable);
					public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
					public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public prependPath(referrer: any, fieldName: string): void;
					/** @deprecated */
					public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
					public constructor(processor: java.io.Closeable, msg: string);
					public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public getLocalizedMessage(): string;
					public getPathReference(sb: java.lang.StringBuilder): java.lang.StringBuilder;
					public prependPath(referrer: any, index: number): void;
					public _buildMessage(): string;
					public prependPath(r: com.fasterxml.jackson.databind.JsonMappingException.Reference): void;
					/** @deprecated */
					public constructor(msg: string, rootCause: java.lang.Throwable);
					public withCause(cause: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
					public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
					public getMessage(): string;
					public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
				}
				export module JsonMappingException {
					export class Reference extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonMappingException.Reference>;
						public _from: any;
						public _fieldName: string;
						public _index: number;
						public _desc: string;
						public constructor(from: any, fieldName: string);
						public constructor();
						public getFrom(): any;
						public constructor(from: any, index: number);
						public constructor(from: any);
						public getIndex(): number;
						public getFieldName(): string;
						public getDescription(): string;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class JsonNode extends com.fasterxml.jackson.databind.JsonSerializable.Base {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonNode>;
					public isObject(): boolean;
					public withArray(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
					public isEmpty(): boolean;
					public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
					public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
					public canConvertToInt(): boolean;
					public requiredAt(path: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
					public spliterator(): java.util.Spliterator<any>;
					public isPojo(): boolean;
					public size(): number;
					public bigIntegerValue(): java.math.BigInteger;
					public has(fieldName: string): boolean;
					public asDouble(): number;
					public iterator(): java.util.Iterator<any>;
					public hasNonNull(fieldName: string): boolean;
					public constructor();
					public fieldNames(): java.util.Iterator<string>;
					public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public _this(): com.fasterxml.jackson.databind.JsonNode;
					public isTextual(): boolean;
					public required(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
					public numberValue(): java.lang.Number;
					public isDouble(): boolean;
					public asText(defaultValue: string): string;
					public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
					public with(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
					public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
					public isBoolean(): boolean;
					public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
					public isBinary(): boolean;
					public binaryValue(): number[];
					public has(index: number): boolean;
					public isNumber(): boolean;
					public requireNonNull(): com.fasterxml.jackson.databind.JsonNode;
					public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
					public isEmpty(serializers: com.fasterxml.jackson.databind.SerializerProvider): boolean;
					public require(): com.fasterxml.jackson.databind.JsonNode;
					public isInt(): boolean;
					public asInt(): number;
					public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
					public canConvertToLong(): boolean;
					public at(ptr: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
					public isBigInteger(): boolean;
					public longValue(): number;
					public requiredAt(pathExpr: string): com.fasterxml.jackson.databind.JsonNode;
					public elements(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
					public equals(obj: any): boolean;
					public asText(): string;
					public asLong(): number;
					public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public doubleValue(): number;
					public findPath(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public fields(): java.util.Iterator<java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>>;
					public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
					public isNull(): boolean;
					public asBoolean(defaultValue: boolean): boolean;
					public get(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
					public intValue(): number;
					public asDouble(defaultValue: number): number;
					public toString(): string;
					public hasNonNull(index: number): boolean;
					public canConvertToExactIntegral(): boolean;
					public asLong(defaultValue: number): number;
					public isFloat(): boolean;
					public toPrettyString(): string;
					public isIntegralNumber(): boolean;
					public isFloatingPointNumber(): boolean;
					public forEach(action: any /* any*/): void;
					public _reportRequiredViolation(msgTemplate: string, ...args: any[]): any;
					public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
					public isMissingNode(): boolean;
					public decimalValue(): java.math.BigDecimal;
					public isArray(): boolean;
					public shortValue(): number;
					public asBoolean(): boolean;
					public textValue(): string;
					public required(index: number): com.fasterxml.jackson.databind.JsonNode;
					public isValueNode(): boolean;
					public isShort(): boolean;
					public floatValue(): number;
					public isBigDecimal(): boolean;
					public equals(param0: any): boolean;
					public asInt(defaultValue: number): number;
					public at(jsonPtrExpr: string): com.fasterxml.jackson.databind.JsonNode;
					public findParents(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
					public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
					public booleanValue(): boolean;
					public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
					public isLong(): boolean;
					public findValuesAsText(fieldName: string): java.util.List<string>;
					public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
					public isContainerNode(): boolean;
					public findValues(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class JsonSerializable extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializable>;
					/**
					 * Constructs a new instance of the com.fasterxml.jackson.databind.JsonSerializable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					});
					public constructor();
					public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
				}
				export module JsonSerializable {
					export abstract class Base extends java.lang.Object implements com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializable.Base>;
						public isEmpty(serializers: com.fasterxml.jackson.databind.SerializerProvider): boolean;
						public constructor();
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class JsonSerializer<T>  extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializer<any>>;
					/** @deprecated */
					public isEmpty(value: any): boolean;
					public usesObjectId(): boolean;
					public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
					public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					public replaceDelegatee(delegatee: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, type: com.fasterxml.jackson.databind.JavaType): void;
					public properties(): java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>;
					public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
					public constructor();
					public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
					public handledType(): java.lang.Class<any>;
					public isUnwrappingSerializer(): boolean;
					public unwrappingSerializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getDelegatee(): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public withFilterId(filterId: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
				}
				export module JsonSerializer {
					export abstract class None extends com.fasterxml.jackson.databind.JsonSerializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.JsonSerializer.None>;
						public constructor();
						public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, type: com.fasterxml.jackson.databind.JavaType): void;
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class KeyDeserializer extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.KeyDeserializer>;
					public constructor();
					public deserializeKey(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
				}
				export module KeyDeserializer {
					export abstract class None extends com.fasterxml.jackson.databind.KeyDeserializer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.KeyDeserializer.None>;
						public constructor();
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class MapperFeature extends com.fasterxml.jackson.databind.cfg.ConfigFeature {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.MapperFeature>;
					public static USE_ANNOTATIONS: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_GETTERS_AS_SETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static PROPAGATE_TRANSIENT_MARKER: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_CREATORS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_FIELDS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_GETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_IS_GETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static AUTO_DETECT_SETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static REQUIRE_SETTERS_FOR_GETTERS: com.fasterxml.jackson.databind.MapperFeature;
					public static ALLOW_FINAL_FIELDS_AS_MUTATORS: com.fasterxml.jackson.databind.MapperFeature;
					public static INFER_PROPERTY_MUTATORS: com.fasterxml.jackson.databind.MapperFeature;
					public static INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES: com.fasterxml.jackson.databind.MapperFeature;
					public static ALLOW_VOID_VALUED_PROPERTIES: com.fasterxml.jackson.databind.MapperFeature;
					public static CAN_OVERRIDE_ACCESS_MODIFIERS: com.fasterxml.jackson.databind.MapperFeature;
					public static OVERRIDE_PUBLIC_ACCESS_MODIFIERS: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_STATIC_TYPING: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_BASE_TYPE_AS_DEFAULT_IMPL: com.fasterxml.jackson.databind.MapperFeature;
					public static INFER_BUILDER_TYPE_BINDINGS: com.fasterxml.jackson.databind.MapperFeature;
					public static DEFAULT_VIEW_INCLUSION: com.fasterxml.jackson.databind.MapperFeature;
					public static SORT_PROPERTIES_ALPHABETICALLY: com.fasterxml.jackson.databind.MapperFeature;
					public static SORT_CREATOR_PROPERTIES_FIRST: com.fasterxml.jackson.databind.MapperFeature;
					public static ACCEPT_CASE_INSENSITIVE_PROPERTIES: com.fasterxml.jackson.databind.MapperFeature;
					public static ACCEPT_CASE_INSENSITIVE_ENUMS: com.fasterxml.jackson.databind.MapperFeature;
					public static ACCEPT_CASE_INSENSITIVE_VALUES: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_WRAPPER_NAME_AS_PROPERTY_NAME: com.fasterxml.jackson.databind.MapperFeature;
					public static USE_STD_BEAN_NAMING: com.fasterxml.jackson.databind.MapperFeature;
					public static ALLOW_EXPLICIT_PROPERTY_RENAMING: com.fasterxml.jackson.databind.MapperFeature;
					public static ALLOW_COERCION_OF_SCALARS: com.fasterxml.jackson.databind.MapperFeature;
					public static IGNORE_DUPLICATE_MODULE_REGISTRATIONS: com.fasterxml.jackson.databind.MapperFeature;
					public static IGNORE_MERGE_FOR_UNMERGEABLE: com.fasterxml.jackson.databind.MapperFeature;
					public static BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES: com.fasterxml.jackson.databind.MapperFeature;
					public static APPLY_DEFAULT_VALUES: com.fasterxml.jackson.databind.MapperFeature;
					public enabledIn(param0: number): boolean;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static collectLongDefaults(): number;
					public static values(): com.fasterxml.jackson.databind.MapperFeature[];
					public enabledIn(flags: number): boolean;
					public static valueOf(name: string): com.fasterxml.jackson.databind.MapperFeature;
					public getMask(): number;
					/** @deprecated */
					public enabledIn(flags: number): boolean;
					public enabledByDefault(): boolean;
					/** @deprecated */
					public getMask(): number;
					public getLongMask(): number;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class MappingIterator<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.MappingIterator<any>>;
					public static EMPTY_ITERATOR: com.fasterxml.jackson.databind.MappingIterator<any>;
					public static STATE_CLOSED: number;
					public static STATE_NEED_RESYNC: number;
					public static STATE_MAY_HAVE_VALUE: number;
					public static STATE_HAS_VALUE: number;
					public _type: com.fasterxml.jackson.databind.JavaType;
					public _context: com.fasterxml.jackson.databind.DeserializationContext;
					public _deserializer: com.fasterxml.jackson.databind.JsonDeserializer<T>;
					public _parser: com.fasterxml.jackson.core.JsonParser;
					public _seqContext: com.fasterxml.jackson.core.JsonStreamContext;
					public _updatedValue: T;
					public _closeParser: boolean;
					public _state: number;
					public readAll(results: java.util.Collection<any>): java.util.Collection<any>;
					public constructor(type: com.fasterxml.jackson.databind.JavaType, p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, managedParser: boolean, valueToUpdate: any);
					public nextValue(): T;
					public getParserSchema(): com.fasterxml.jackson.core.FormatSchema;
					public hasNextValue(): boolean;
					public next(): T;
					public hasNext(): boolean;
					public remove(): void;
					public _handleIOException(e: java.io.IOException): any;
					public readAll(): java.util.List<T>;
					public _resync(): void;
					public close(): void;
					public static emptyIterator(): com.fasterxml.jackson.databind.MappingIterator<any>;
					public _throwNoSuchElement(): any;
					public readAll(resultList: java.util.List<any>): java.util.List<any>;
					public getParser(): com.fasterxml.jackson.core.JsonParser;
					public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
					public _handleMappingException(e: com.fasterxml.jackson.databind.JsonMappingException): any;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class MappingJsonFactory {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.MappingJsonFactory>;
					public hasFormat(acc: com.fasterxml.jackson.core.format.InputAccessor): com.fasterxml.jackson.core.format.MatchStrength;
					public copy(): com.fasterxml.jackson.core.JsonFactory;
					public getCodec(): com.fasterxml.jackson.databind.ObjectMapper;
					public constructor();
					public constructor(mapper: com.fasterxml.jackson.databind.ObjectMapper);
					public getFormatName(): string;
					public constructor(src: com.fasterxml.jackson.core.JsonFactory, mapper: com.fasterxml.jackson.databind.ObjectMapper);
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class Module extends java.lang.Object {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.Module>;
					public setupModule(param0: com.fasterxml.jackson.databind.Module.SetupContext): void;
					public constructor();
					public getModuleName(): string;
					public version(): com.fasterxml.jackson.core.Version;
					public getDependencies(): java.lang.Iterable<any>;
					public getTypeId(): any;
				}
				export module Module {
					export class SetupContext extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.Module.SetupContext>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.Module$SetupContext interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getMapperVersion(): com.fasterxml.jackson.core.Version;
							getOwner(): com.fasterxml.jackson.core.ObjectCodec;
							getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
							isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
							isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
							isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
							isEnabled(param0: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
							isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
							isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
							configOverride(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
							addDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): void;
							addKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): void;
							addSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
							addKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
							addBeanDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): void;
							addBeanSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): void;
							addAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): void;
							addTypeModifier(param0: com.fasterxml.jackson.databind.type.TypeModifier): void;
							addValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): void;
							setClassIntrospector(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): void;
							insertAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
							appendAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
							registerSubtypes(...param0: java.lang.Class<any>[]): void;
							registerSubtypes(...param0: com.fasterxml.jackson.databind.jsontype.NamedType[]): void;
							registerSubtypes(param0: java.util.Collection<java.lang.Class<any>>): void;
							setMixInAnnotations(param0: java.lang.Class<any>, param1: java.lang.Class<any>): void;
							addDeserializationProblemHandler(param0: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): void;
							setNamingStrategy(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): void;
						});
						public constructor();
						public addDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): void;
						public registerSubtypes(...param0: java.lang.Class<any>[]): void;
						public addSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
						public configOverride(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public registerSubtypes(...param0: com.fasterxml.jackson.databind.jsontype.NamedType[]): void;
						public addBeanSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): void;
						public isEnabled(param0: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
						public insertAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public addDeserializationProblemHandler(param0: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): void;
						public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
						public addKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): void;
						public addBeanDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): void;
						public setNamingStrategy(param0: com.fasterxml.jackson.databind.PropertyNamingStrategy): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
						public getOwner(): com.fasterxml.jackson.core.ObjectCodec;
						public setClassIntrospector(param0: com.fasterxml.jackson.databind.introspect.ClassIntrospector): void;
						public addAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
						public setMixInAnnotations(param0: java.lang.Class<any>, param1: java.lang.Class<any>): void;
						public addTypeModifier(param0: com.fasterxml.jackson.databind.type.TypeModifier): void;
						public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
						public registerSubtypes(param0: java.util.Collection<java.lang.Class<any>>): void;
						public getMapperVersion(): com.fasterxml.jackson.core.Version;
						public appendAnnotationIntrospector(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public isEnabled(param0: com.fasterxml.jackson.databind.SerializationFeature): boolean;
						public addValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): void;
						public isEnabled(param0: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public addKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class ObjectMapper implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectMapper>;
					public static DEFAULT_ANNOTATION_INTROSPECTOR: com.fasterxml.jackson.databind.AnnotationIntrospector;
					public static DEFAULT_BASE: com.fasterxml.jackson.databind.cfg.BaseSettings;
					public _jsonFactory: com.fasterxml.jackson.core.JsonFactory;
					public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
					public _injectableValues: com.fasterxml.jackson.databind.InjectableValues;
					public _subtypeResolver: com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
					public _configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides;
					public _coercionConfigs: com.fasterxml.jackson.databind.cfg.CoercionConfigs;
					public _mixIns: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
					public _serializationConfig: com.fasterxml.jackson.databind.SerializationConfig;
					public _serializerFactory: com.fasterxml.jackson.databind.ser.SerializerFactory;
					public _deserializationConfig: com.fasterxml.jackson.databind.DeserializationConfig;
					public _deserializationContext: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public _registeredModuleTypes: java.util.Set<any>;
					public _rootDeserializers: java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
					public writeValue(w: java.io.Writer, value: any): void;
					public readValue(src: number[], valueType: java.lang.Class<any>): any;
					public createParser(content: string[], offset: number, len: number): com.fasterxml.jackson.core.JsonParser;
					/** @deprecated */
					public writerWithType(rootType: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): com.fasterxml.jackson.databind.MappingIterator<any>;
					public writeValue(out: java.io.DataOutput, value: any): void;
					public constructType(t: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					public constructor();
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.MappingIterator<any>;
					public disable(f: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					/** @deprecated */
					public _configAndWriteValue(g: com.fasterxml.jackson.core.JsonGenerator, value: any): void;
					public static findModules(): java.util.List<com.fasterxml.jackson.databind.Module>;
					public getNodeFactory(): com.fasterxml.jackson.databind.node.JsonNodeFactory;
					public setDefaultVisibility(vis: com.fasterxml.jackson.annotation.JsonAutoDetect.Value): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueType: java.lang.Class<any>): any;
					public writeValueAsBytes(value: any): number[];
					public registerModules(...modules: com.fasterxml.jackson.databind.Module[]): com.fasterxml.jackson.databind.ObjectMapper;
					public enable(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public enable(f: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					public disable(first: com.fasterxml.jackson.databind.SerializationFeature, ...f: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public setNodeFactory(f: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public getSerializerProviderInstance(): com.fasterxml.jackson.databind.SerializerProvider;
					public disable(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public writeValue(out: java.io.OutputStream, value: any): void;
					public coercionConfigDefaults(): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
					public writeTree(g: com.fasterxml.jackson.core.JsonGenerator, rootNode: com.fasterxml.jackson.databind.JsonNode): void;
					public writerFor(rootType: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public createGenerator(out: java.io.OutputStream): com.fasterxml.jackson.core.JsonGenerator;
					public isEnabled(f: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public createParser(content: number[]): com.fasterxml.jackson.core.JsonParser;
					/** @deprecated */
					public configure(f: com.fasterxml.jackson.databind.MapperFeature, state: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public getFactory(): com.fasterxml.jackson.core.JsonFactory;
					public readValue(src: number[], valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public registerModule(module: com.fasterxml.jackson.databind.Module): com.fasterxml.jackson.databind.ObjectMapper;
					public setPropertyNamingStrategy(s: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.ObjectMapper;
					public getPropertyNamingStrategy(): com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public setVisibility(vc: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.ObjectMapper;
					public setMixInResolver(resolver: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.ObjectMapper;
					public setSubtypeResolver(str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): com.fasterxml.jackson.databind.ObjectMapper;
					public setSerializationInclusion(incl: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.databind.ObjectMapper;
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueType: java.lang.Class<any>): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readerForListOf(type: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					/** @deprecated */
					public enableDefaultTyping(): com.fasterxml.jackson.databind.ObjectMapper;
					public setDefaultMergeable(b: java.lang.Boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(src: java.io.Reader, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public writeValueAsString(value: any): string;
					public reader(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectReader;
					public createParser(content: number[], offset: number, len: number): com.fasterxml.jackson.core.JsonParser;
					public readTree(content: number[], offset: number, len: number): com.fasterxml.jackson.databind.JsonNode;
					public setLocale(l: java.util.Locale): com.fasterxml.jackson.databind.ObjectMapper;
					public constructType(typeRef: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.JavaType;
					public nullNode(): com.fasterxml.jackson.databind.JsonNode;
					/** @deprecated */
					public disable(...f: com.fasterxml.jackson.databind.MapperFeature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public setBase64Variant(v: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectMapper;
					public setDefaultPropertyInclusion(incl: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.ObjectMapper;
					public disable(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public copy(): com.fasterxml.jackson.databind.ObjectMapper;
					public _convert(fromValue: any, toValueType: com.fasterxml.jackson.databind.JavaType): any;
					public activateDefaultTyping(ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.ObjectMapper;
					public convertValue(fromValue: any, toValueType: com.fasterxml.jackson.databind.JavaType): any;
					public createParser(_in_: java.io.InputStream): com.fasterxml.jackson.core.JsonParser;
					public enable(first: com.fasterxml.jackson.databind.DeserializationFeature, ...f: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(feature: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public createGenerator(outputFile: java.io.File, enc: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.JsonGenerator;
					/** @deprecated */
					public setFilters(filterProvider: com.fasterxml.jackson.databind.ser.FilterProvider): void;
					public configure(f: com.fasterxml.jackson.core.JsonParser.Feature, state: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(): com.fasterxml.jackson.databind.ObjectWriter;
					public readerForUpdating(valueToUpdate: any): com.fasterxml.jackson.databind.ObjectReader;
					public registerSubtypes(...types: com.fasterxml.jackson.databind.jsontype.NamedType[]): void;
					public createParser(src: java.io.File): com.fasterxml.jackson.core.JsonParser;
					public readValue(content: string, valueType: java.lang.Class<any>): any;
					public readerWithView(view: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public setAccessorNaming(s: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider): com.fasterxml.jackson.databind.ObjectMapper;
					public setDefaultPrettyPrinter(pp: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectMapper;
					public getSubtypeResolver(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
					public isEnabled(f: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
					public setHandlerInstantiator(hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
					public _writeValueAndClose(g: com.fasterxml.jackson.core.JsonGenerator, value: any): void;
					public configure(f: com.fasterxml.jackson.databind.SerializationFeature, state: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(escapes: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.databind.ObjectWriter;
					public _constructDefaultTypeResolverBuilder(applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
					/** @deprecated */
					public enableDefaultTyping(dti: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping): com.fasterxml.jackson.databind.ObjectMapper;
					public writeValue(resultFile: java.io.File, value: any): void;
					public writerFor(rootType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public registerSubtypes(subtypes: java.util.Collection<java.lang.Class<any>>): void;
					public activateDefaultTyping(ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(src: java.io.File, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public _readTreeAndClose(p0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.JsonNode;
					public reader(defaultBase64: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(src: java.net.URL, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					/** @deprecated */
					public reader(type: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public readTree(content: number[]): com.fasterxml.jackson.databind.JsonNode;
					public canSerialize(type: java.lang.Class<any>, cause: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public setMixIns(sourceMixins: java.util.Map<java.lang.Class<any>,java.lang.Class<any>>): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectWriter;
					/** @deprecated */
					public writerWithType(rootType: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(f: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
					public canDeserialize(type: com.fasterxml.jackson.databind.JavaType): boolean;
					public isEnabled(f: com.fasterxml.jackson.core.StreamReadFeature): boolean;
					public readerFor(type: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public constructor(src: com.fasterxml.jackson.databind.ObjectMapper);
					public findAndRegisterModules(): com.fasterxml.jackson.databind.ObjectMapper;
					public readTree(file: java.io.File): com.fasterxml.jackson.databind.JsonNode;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public writeValue(g: com.fasterxml.jackson.core.JsonGenerator, value: any): void;
					/** @deprecated */
					public generateJsonSchema(t: java.lang.Class<any>): com.fasterxml.jackson.databind.jsonschema.JsonSchema;
					public createParser(content: java.io.DataInput): com.fasterxml.jackson.core.JsonParser;
					public setFilterProvider(filterProvider: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.ObjectMapper;
					public createObjectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
					public readTree(_in_: java.io.InputStream): com.fasterxml.jackson.databind.JsonNode;
					public defaultClassIntrospector(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
					public setDefaultLeniency(b: java.lang.Boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(src: java.net.URL, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public enable(first: com.fasterxml.jackson.databind.SerializationFeature, ...f: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public treeToValue(n: com.fasterxml.jackson.core.TreeNode, valueType: java.lang.Class<any>): any;
					public readValue(src: java.io.DataInput, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public deactivateDefaultTyping(): com.fasterxml.jackson.databind.ObjectMapper;
					public _newReader(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public createParser(content: string[]): com.fasterxml.jackson.core.JsonParser;
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.core.type.ResolvedType): com.fasterxml.jackson.databind.MappingIterator<any>;
					public getDeserializationContext(): com.fasterxml.jackson.databind.DeserializationContext;
					public getSerializerFactory(): com.fasterxml.jackson.databind.ser.SerializerFactory;
					public createGenerator(out: java.io.OutputStream, enc: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.JsonGenerator;
					public readValue(src: java.io.InputStream, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public _readValue(cfg: com.fasterxml.jackson.databind.DeserializationConfig, p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public readValue(content: string, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public _newWriter(config: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ObjectWriter;
					public createParser(r: java.io.Reader): com.fasterxml.jackson.core.JsonParser;
					/** @deprecated */
					public writerWithType(rootType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public setDefaultAttributes(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectMapper;
					/** @deprecated */
					public reader(type: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public addMixIn(target: java.lang.Class<any>, mixinSource: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectMapper;
					public setInjectableValues(injectableValues: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectMapper;
					public readTree(content: string): com.fasterxml.jackson.databind.JsonNode;
					public readValue(src: java.io.File, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public readValue(src: java.io.DataInput, valueType: java.lang.Class<any>): any;
					public writer(filterProvider: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(f: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public convertValue(fromValue: any, toValueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public disable(feature: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(src: java.io.InputStream, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public setVisibility(forMethod: com.fasterxml.jackson.annotation.PropertyAccessor, visibility: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.ObjectMapper;
					public reader(injectableValues: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectReader;
					public writerWithView(serializationView: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(f: com.fasterxml.jackson.core.StreamWriteFeature): boolean;
					public readValue(content: string, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public writer(pp: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter;
					public reader(f: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.ObjectReader;
					public _newReader(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: com.fasterxml.jackson.databind.JavaType, valueToUpdate: any, schema: com.fasterxml.jackson.core.FormatSchema, injectableValues: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectReader;
					public clearProblemHandlers(): com.fasterxml.jackson.databind.ObjectMapper;
					public configOverride(type: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
					public readValue(src: number[], offset: number, len: number, valueType: java.lang.Class<any>): any;
					public mixInCount(): number;
					public updateValue(valueToUpdate: any, overrides: any): any;
					public getSerializationConfig(): com.fasterxml.jackson.databind.SerializationConfig;
					public setAnnotationIntrospector(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.ObjectMapper;
					public getDateFormat(): java.text.DateFormat;
					public writerFor(rootType: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public version(): com.fasterxml.jackson.core.Version;
					public writer(schema: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public treeToValue(n: com.fasterxml.jackson.core.TreeNode, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public readValue(src: number[], offset: number, len: number, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public readerForMapOf(type: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(src: java.net.URL, valueType: java.lang.Class<any>): any;
					public registerSubtypes(...classes: java.lang.Class<any>[]): void;
					public _verifyNoTrailingTokens(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bindType: com.fasterxml.jackson.databind.JavaType): void;
					public _assertNotNull(paramName: string, src: any): void;
					public createGenerator(out: java.io.DataOutput): com.fasterxml.jackson.core.JsonGenerator;
					public getInjectableValues(): com.fasterxml.jackson.databind.InjectableValues;
					public readerForArrayOf(type: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public addHandler(h: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): com.fasterxml.jackson.databind.ObjectMapper;
					public reader(schema: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectReader;
					public acceptJsonFormatVisitor(type: java.lang.Class<any>, visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public _newWriter(config: com.fasterxml.jackson.databind.SerializationConfig, schema: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public setDefaultTyping(typer: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): com.fasterxml.jackson.databind.ObjectMapper;
					public setPolymorphicTypeValidator(ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.ObjectMapper;
					public setAnnotationIntrospectors(serializerAI: com.fasterxml.jackson.databind.AnnotationIntrospector, deserializerAI: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.ObjectMapper;
					public setTypeFactory(f: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.ObjectMapper;
					public _checkInvalidCopy(exp: java.lang.Class<any>): void;
					public static findModules(classLoader: java.lang.ClassLoader): java.util.List<com.fasterxml.jackson.databind.Module>;
					public createParser(src: java.net.URL): com.fasterxml.jackson.core.JsonParser;
					public reader(): com.fasterxml.jackson.databind.ObjectReader;
					public _verifySchemaType(schema: com.fasterxml.jackson.core.FormatSchema): void;
					public setSerializerProvider(p: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider): com.fasterxml.jackson.databind.ObjectMapper;
					/** @deprecated */
					public addMixInAnnotations(target: java.lang.Class<any>, mixinSource: java.lang.Class<any>): void;
					public getRegisteredModuleIds(): java.util.Set<any>;
					public createNonBlockingByteArrayParser(): com.fasterxml.jackson.core.JsonParser;
					/** @deprecated */
					public setPropertyInclusion(incl: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.ObjectMapper;
					/** @deprecated */
					public enableDefaultTypingAsProperty(applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, propertyName: string): com.fasterxml.jackson.databind.ObjectMapper;
					public readTree(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.TreeNode;
					public registerModules(modules: java.lang.Iterable<any>): com.fasterxml.jackson.databind.ObjectMapper;
					public getSerializerProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					public readValue(src: java.io.Reader, valueType: java.lang.Class<any>): any;
					public getDeserializationConfig(): com.fasterxml.jackson.databind.DeserializationConfig;
					/** @deprecated */
					public setVisibilityChecker(vc: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): void;
					public _readMapAndClose(p0: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public setConstructorDetector(cd: com.fasterxml.jackson.databind.cfg.ConstructorDetector): com.fasterxml.jackson.databind.ObjectMapper;
					public constructor(jf: com.fasterxml.jackson.core.JsonFactory, sp: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, dc: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext);
					public reader(feature: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectReader;
					public valueToTree(fromValue: any): com.fasterxml.jackson.databind.JsonNode;
					public readerFor(type: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public disable(first: com.fasterxml.jackson.databind.DeserializationFeature, ...f: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public setTimeZone(tz: java.util.TimeZone): com.fasterxml.jackson.databind.ObjectMapper;
					public convertValue(fromValue: any, toValueType: java.lang.Class<any>): any;
					public _newWriter(config: com.fasterxml.jackson.databind.SerializationConfig, rootType: com.fasterxml.jackson.databind.JavaType, pp: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter;
					public acceptJsonFormatVisitor(type: com.fasterxml.jackson.databind.JavaType, visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public readTree(r: java.io.Reader): com.fasterxml.jackson.databind.JsonNode;
					public writerWithDefaultPrettyPrinter(): com.fasterxml.jackson.databind.ObjectWriter;
					public writeTree(g: com.fasterxml.jackson.core.JsonGenerator, rootNode: com.fasterxml.jackson.core.TreeNode): void;
					public readValue(src: java.io.Reader, valueType: com.fasterxml.jackson.databind.JavaType): any;
					/** @deprecated */
					public enable(...f: com.fasterxml.jackson.databind.MapperFeature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(src: number[], valueType: com.fasterxml.jackson.databind.JavaType): any;
					public enable(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): com.fasterxml.jackson.databind.ObjectMapper;
					public writer(df: java.text.DateFormat): com.fasterxml.jackson.databind.ObjectWriter;
					public _findRootDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public createGenerator(w: java.io.Writer): com.fasterxml.jackson.core.JsonGenerator;
					public setSerializerFactory(f: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ObjectMapper;
					public createParser(content: string): com.fasterxml.jackson.core.JsonParser;
					public activateDefaultTypingAsProperty(ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, propertyName: string): com.fasterxml.jackson.databind.ObjectMapper;
					public setConfig(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectMapper;
					public readValue(src: java.io.InputStream, valueType: java.lang.Class<any>): any;
					public getPolymorphicTypeValidator(): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
					public setDateFormat(dateFormat: java.text.DateFormat): com.fasterxml.jackson.databind.ObjectMapper;
					public treeAsTokens(n: com.fasterxml.jackson.core.TreeNode): com.fasterxml.jackson.core.JsonParser;
					public getVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					/** @deprecated */
					public setMixInAnnotations(sourceMixins: java.util.Map<java.lang.Class<any>,java.lang.Class<any>>): void;
					public setDefaultSetterInfo(v: com.fasterxml.jackson.annotation.JsonSetter.Value): com.fasterxml.jackson.databind.ObjectMapper;
					public coercionConfigFor(physicalType: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
					public missingNode(): com.fasterxml.jackson.databind.JsonNode;
					public setConfig(config: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ObjectMapper;
					public constructor(jf: com.fasterxml.jackson.core.JsonFactory);
					/** @deprecated */
					public disableDefaultTyping(): com.fasterxml.jackson.databind.ObjectMapper;
					public enable(feature: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectMapper;
					public canDeserialize(type: com.fasterxml.jackson.databind.JavaType, cause: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public _serializerProvider(config: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
					public activateDefaultTyping(ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, includeAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As): com.fasterxml.jackson.databind.ObjectMapper;
					public coercionConfigFor(logicalType: com.fasterxml.jackson.databind.type.LogicalType): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
					public tokenStreamFactory(): com.fasterxml.jackson.core.JsonFactory;
					public configure(f: com.fasterxml.jackson.core.JsonGenerator.Feature, state: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					/** @deprecated */
					public reader(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public findMixInClassFor(cls: java.lang.Class<any>): java.lang.Class<any>;
					public writer(first: com.fasterxml.jackson.databind.SerializationFeature, ...other: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public readValue(src: number[], offset: number, len: number, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public readerFor(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public isEnabled(f: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public setDefaultPropertyInclusion(incl: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.databind.ObjectMapper;
					/** @deprecated */
					public enableDefaultTyping(applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, includeAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As): com.fasterxml.jackson.databind.ObjectMapper;
					public _initForReading(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.core.JsonToken;
					public reader(first: com.fasterxml.jackson.databind.DeserializationFeature, ...other: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.core.type.ResolvedType): any;
					public readValue(src: java.io.File, valueType: java.lang.Class<any>): any;
					public createDeserializationContext(p: com.fasterxml.jackson.core.JsonParser, cfg: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public writer(defaultBase64: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectWriter;
					public configure(f: com.fasterxml.jackson.databind.DeserializationFeature, state: boolean): com.fasterxml.jackson.databind.ObjectMapper;
					public readTree(source: java.net.URL): com.fasterxml.jackson.databind.JsonNode;
					public createArrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
					public canSerialize(type: java.lang.Class<any>): boolean;
				}
				export module ObjectMapper {
					export class DefaultTypeResolverBuilder extends com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder>;
						public _appliesFor: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public _subtypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
						public inclusion(includeAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public constructor(idType: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, idAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As, propName: string);
						public init(idType: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public withDefaultImpl(defaultImpl: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public defaultImpl(defaultImpl: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public defaultImpl(param0: java.lang.Class<any>): any;
						public static construct(t: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder;
						public withDefaultImpl(defaultImpl: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder;
						/** @deprecated */
						public constructor(t: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping);
						public typeProperty(typeIdPropName: string): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public constructor(base: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder, defaultImpl: java.lang.Class<any>);
						public constructor(base: com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder, defaultImpl: java.lang.Class<any>);
						public getDefaultImpl(): java.lang.Class<any>;
						public withDefaultImpl(defaultImpl: java.lang.Class<any>): any;
						public buildTypeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, baseType: com.fasterxml.jackson.databind.JavaType, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public constructor();
						public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): any;
						public buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public useForType(t: com.fasterxml.jackson.databind.JavaType): boolean;
						public typeProperty(param0: string): any;
						public typeIdVisibility(isVisible: boolean): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public typeIdVisibility(param0: boolean): any;
						public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): any;
						public subTypeValidator(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
						public buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public buildTypeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, baseType: com.fasterxml.jackson.databind.JavaType, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public constructor(t: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator);
					}
					export class DefaultTyping {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping>;
						public static JAVA_LANG_OBJECT: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static OBJECT_AND_NON_CONCRETE: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static NON_CONCRETE_AND_ARRAYS: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static NON_FINAL: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static EVERYTHING: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static values(): com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping[];
						public static valueOf(name: string): com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class ObjectReader implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectReader>;
					public _config: com.fasterxml.jackson.databind.DeserializationConfig;
					public _context: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public _parserFactory: com.fasterxml.jackson.core.JsonFactory;
					public _unwrapRoot: boolean;
					public _valueType: com.fasterxml.jackson.databind.JavaType;
					public _rootDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public _valueToUpdate: any;
					public _schema: com.fasterxml.jackson.core.FormatSchema;
					public _injectableValues: com.fasterxml.jackson.databind.InjectableValues;
					public _dataFormatReaders: com.fasterxml.jackson.databind.deser.DataFormatReaders;
					public _rootDeserializers: java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
					public without(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(src: java.io.Reader): any;
					public readTree(json: number[]): com.fasterxml.jackson.databind.JsonNode;
					public _newIterator(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, parserManaged: boolean): com.fasterxml.jackson.databind.MappingIterator<any>;
					public createParser(content: string[], offset: number, len: number): com.fasterxml.jackson.core.JsonParser;
					public readValues(src: java.io.DataInput): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readTree(json: string): com.fasterxml.jackson.databind.JsonNode;
					public with(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectReader;
					public with(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectReader;
					public withFormatDetection(...readers: com.fasterxml.jackson.databind.ObjectReader[]): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(src: java.io.Reader): com.fasterxml.jackson.databind.MappingIterator<any>;
					public _bind(p: com.fasterxml.jackson.core.JsonParser, valueToUpdate: any): any;
					public _new(base: com.fasterxml.jackson.databind.ObjectReader, config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: com.fasterxml.jackson.databind.JavaType, rootDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueToUpdate: any, schema: com.fasterxml.jackson.core.FormatSchema, injectableValues: com.fasterxml.jackson.databind.InjectableValues, dataFormatReaders: com.fasterxml.jackson.databind.deser.DataFormatReaders): com.fasterxml.jackson.databind.ObjectReader;
					public withHandler(h: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): com.fasterxml.jackson.databind.ObjectReader;
					public _jsonNodeType(): com.fasterxml.jackson.databind.JavaType;
					public readValue(src: string, valueType: java.lang.Class<any>): any;
					public _bindAsTree(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.JsonNode;
					public writeValue(gen: com.fasterxml.jackson.core.JsonGenerator, value: any): void;
					public without(feature: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueType: java.lang.Class<any>): any;
					public readValue(p: com.fasterxml.jackson.core.JsonParser): any;
					public readTree(json: number[], offset: number, len: number): com.fasterxml.jackson.databind.JsonNode;
					public _bindAndClose(p0: com.fasterxml.jackson.core.JsonParser): any;
					public readValue(src: java.io.InputStream): any;
					public _detectBindAndClose(match: com.fasterxml.jackson.databind.deser.DataFormatReaders.Match, forceClosing: boolean): any;
					public constructor(base: com.fasterxml.jackson.databind.ObjectReader, config: com.fasterxml.jackson.databind.DeserializationConfig);
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): any;
					public withFeatures(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(src: string): any;
					public version(): com.fasterxml.jackson.core.Version;
					public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public treeToValue(n: com.fasterxml.jackson.core.TreeNode, valueType: com.fasterxml.jackson.databind.JavaType): any;
					public readValue(src: java.net.URL, valueType: java.lang.Class<any>): any;
					public readValue(src: java.io.File): any;
					public readValues(src: java.io.InputStream): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readValues(src: java.io.File): com.fasterxml.jackson.databind.MappingIterator<any>;
					public _verifyNoTrailingTokens(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bindType: com.fasterxml.jackson.databind.JavaType): void;
					public isEnabled(f: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
					public _detectBindAndReadValues(match: com.fasterxml.jackson.databind.deser.DataFormatReaders.Match, forceClosing: boolean): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readValues(src: java.net.URL): com.fasterxml.jackson.databind.MappingIterator<any>;
					public createParser(content: number[]): com.fasterxml.jackson.core.JsonParser;
					public _bindAndCloseAsTree(p0: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.JsonNode;
					public _assertNotNull(paramName: string, src: any): void;
					public getFactory(): com.fasterxml.jackson.core.JsonFactory;
					public without(feature: com.fasterxml.jackson.core.StreamReadFeature): com.fasterxml.jackson.databind.ObjectReader;
					public getInjectableValues(): com.fasterxml.jackson.databind.InjectableValues;
					public readTree(src: java.io.Reader): com.fasterxml.jackson.databind.JsonNode;
					public with(injectableValues: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.ObjectReader;
					public createParser(src: java.net.URL): com.fasterxml.jackson.core.JsonParser;
					public _findRootDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public constructor(mapper: com.fasterxml.jackson.databind.ObjectMapper, config: com.fasterxml.jackson.databind.DeserializationConfig);
					public _verifySchemaType(schema: com.fasterxml.jackson.core.FormatSchema): void;
					public _initForMultiRead(ctxt: com.fasterxml.jackson.databind.DeserializationContext, p: com.fasterxml.jackson.core.JsonParser): void;
					public with(tz: java.util.TimeZone): com.fasterxml.jackson.databind.ObjectReader;
					public with(feature: com.fasterxml.jackson.databind.DeserializationFeature): com.fasterxml.jackson.databind.ObjectReader;
					public getValueType(): com.fasterxml.jackson.databind.JavaType;
					public createNonBlockingByteArrayParser(): com.fasterxml.jackson.core.JsonParser;
					public readValue(content: number[], valueType: java.lang.Class<any>): any;
					public withFormatDetection(readers: com.fasterxml.jackson.databind.deser.DataFormatReaders): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(content: com.fasterxml.jackson.databind.JsonNode): any;
					public readValue(src: java.io.DataInput): any;
					public getConfig(): com.fasterxml.jackson.databind.DeserializationConfig;
					public createParser(content: number[], offset: number, len: number): com.fasterxml.jackson.core.JsonParser;
					public readTree(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.TreeNode;
					public _new(base: com.fasterxml.jackson.databind.ObjectReader, config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public with(l: java.util.Locale): com.fasterxml.jackson.databind.ObjectReader;
					public withAttribute(key: any, value: any): com.fasterxml.jackson.databind.ObjectReader;
					public nullNode(): com.fasterxml.jackson.databind.JsonNode;
					public readValue(src: java.io.Reader, valueType: java.lang.Class<any>): any;
					public constructor(base: com.fasterxml.jackson.databind.ObjectReader, config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: com.fasterxml.jackson.databind.JavaType, rootDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueToUpdate: any, schema: com.fasterxml.jackson.core.FormatSchema, injectableValues: com.fasterxml.jackson.databind.InjectableValues, dataFormatReaders: com.fasterxml.jackson.databind.deser.DataFormatReaders);
					public withoutRootName(): com.fasterxml.jackson.databind.ObjectReader;
					public _findTreeDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					/** @deprecated */
					public withType(valueType: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public createParser(_in_: java.io.InputStream): com.fasterxml.jackson.core.JsonParser;
					public without(first: com.fasterxml.jackson.databind.DeserializationFeature, ...other: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.ObjectReader;
					public withoutAttribute(key: any): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(src: number[]): com.fasterxml.jackson.databind.MappingIterator<any>;
					/** @deprecated */
					public withType(valueType: java.lang.reflect.Type): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(content: number[]): any;
					public at(pointer: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.ObjectReader;
					public with(f: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectReader;
					public withView(activeView: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public withAttributes(attrs: java.util.Map<any,any>): com.fasterxml.jackson.databind.ObjectReader;
					public _detectBindAndCloseAsTree(_in_: java.io.InputStream): com.fasterxml.jackson.databind.JsonNode;
					/** @deprecated */
					public withType(valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public createParser(src: java.io.File): com.fasterxml.jackson.core.JsonParser;
					public readTree(src: java.io.InputStream): com.fasterxml.jackson.databind.JsonNode;
					public with(feature: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.ObjectReader;
					public _reportUndetectableSource(src: any): void;
					public writeTree(g: com.fasterxml.jackson.core.JsonGenerator, rootNode: com.fasterxml.jackson.core.TreeNode): void;
					public _considerFilter(p: com.fasterxml.jackson.core.JsonParser, multiValue: boolean): com.fasterxml.jackson.core.JsonParser;
					/** @deprecated */
					public withType(valueTypeRef: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public _inputStream(src: java.net.URL): java.io.InputStream;
					public withoutFeatures(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueType: java.lang.Class<any>): java.util.Iterator<any>;
					public _new(base: com.fasterxml.jackson.databind.ObjectReader, f: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectReader;
					public withRootName(rootName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ObjectReader;
					public with(schema: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectReader;
					public createObjectNode(): com.fasterxml.jackson.databind.JsonNode;
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.databind.JavaType): java.util.Iterator<any>;
					public createDeserializationContext(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public without(feature: com.fasterxml.jackson.core.JsonParser.Feature): com.fasterxml.jackson.databind.ObjectReader;
					public forType(valueType: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectReader;
					public withoutFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.ObjectReader;
					public createParser(content: string): com.fasterxml.jackson.core.JsonParser;
					public readValue(src: java.io.InputStream, valueType: java.lang.Class<any>): any;
					public readValue(content: java.io.DataInput, valueType: java.lang.Class<any>): any;
					public treeAsTokens(n: com.fasterxml.jackson.core.TreeNode): com.fasterxml.jackson.core.JsonParser;
					public with(feature: com.fasterxml.jackson.core.StreamReadFeature): com.fasterxml.jackson.databind.ObjectReader;
					public _initForReading(ctxt: com.fasterxml.jackson.databind.DeserializationContext, p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonToken;
					public isEnabled(f: com.fasterxml.jackson.core.StreamReadFeature): boolean;
					public _detectBindAndClose(src: number[], offset: number, length: number): any;
					public constructor(base: com.fasterxml.jackson.databind.ObjectReader, f: com.fasterxml.jackson.core.JsonFactory);
					public readValue(buffer: number[], offset: number, length: number): any;
					public readTree(src: java.io.DataInput): com.fasterxml.jackson.databind.JsonNode;
					public createDummyDeserializationContext(): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					public readValues(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.MappingIterator<any>;
					public readValue(content: com.fasterxml.jackson.databind.JsonNode, valueType: java.lang.Class<any>): any;
					public missingNode(): com.fasterxml.jackson.databind.JsonNode;
					public constructor(base: com.fasterxml.jackson.databind.ObjectReader, filter: com.fasterxml.jackson.core.filter.TokenFilter);
					public withValueToUpdate(value: any): com.fasterxml.jackson.databind.ObjectReader;
					public _prefetchRootDeserializer(valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public createParser(content: java.io.DataInput): com.fasterxml.jackson.core.JsonParser;
					public with(first: com.fasterxml.jackson.databind.DeserializationFeature, ...other: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.ObjectReader;
					public _reportUnkownFormat(detector: com.fasterxml.jackson.databind.deser.DataFormatReaders, match: com.fasterxml.jackson.databind.deser.DataFormatReaders.Match): void;
					public withoutFeatures(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): com.fasterxml.jackson.databind.ObjectReader;
					public _bindAndReadValues(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.MappingIterator<any>;
					public with(defaultBase64: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectReader;
					public at(pointerExpr: string): com.fasterxml.jackson.databind.ObjectReader;
					public withFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.ObjectReader;
					public treeToValue(n: com.fasterxml.jackson.core.TreeNode, valueType: java.lang.Class<any>): any;
					public withRootName(rootName: string): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueTypeRef: com.fasterxml.jackson.core.type.TypeReference): java.util.Iterator<any>;
					public with(f: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.ObjectReader;
					public with(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public createParser(content: string[]): com.fasterxml.jackson.core.JsonParser;
					public isEnabled(f: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public forType(valueTypeRef: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(src: number[], offset: number, length: number): com.fasterxml.jackson.databind.MappingIterator<any>;
					public constructor(mapper: com.fasterxml.jackson.databind.ObjectMapper, config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: com.fasterxml.jackson.databind.JavaType, valueToUpdate: any, schema: com.fasterxml.jackson.core.FormatSchema, injectableValues: com.fasterxml.jackson.databind.InjectableValues);
					public _bindAsTreeOrNull(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.JsonNode;
					public forType(valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectReader;
					public readValue(buffer: number[], offset: number, length: number, valueType: java.lang.Class<any>): any;
					public _inputStream(f: java.io.File): java.io.InputStream;
					public readValue(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.core.type.ResolvedType): any;
					public readValue(src: java.io.File, valueType: java.lang.Class<any>): any;
					public readValues(json: string): com.fasterxml.jackson.databind.MappingIterator<any>;
					public withFeatures(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): com.fasterxml.jackson.databind.ObjectReader;
					public readValues(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.core.type.ResolvedType): java.util.Iterator<any>;
					public createParser(r: java.io.Reader): com.fasterxml.jackson.core.JsonParser;
					public _with(newConfig: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.ObjectReader;
					public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
					public readValue(src: java.net.URL): any;
					public createArrayNode(): com.fasterxml.jackson.databind.JsonNode;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class ObjectWriter extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectWriter>;
					public static NULL_PRETTY_PRINTER: com.fasterxml.jackson.core.PrettyPrinter;
					public _config: com.fasterxml.jackson.databind.SerializationConfig;
					public _serializerFactory: com.fasterxml.jackson.databind.ser.SerializerFactory;
					public _generatorFactory: com.fasterxml.jackson.core.JsonFactory;
					public _generatorSettings: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
					public _prefetch: com.fasterxml.jackson.databind.ObjectWriter.Prefetch;
					public writeValue(w: java.io.Writer, value: any): void;
					public getConfig(): com.fasterxml.jackson.databind.SerializationConfig;
					public _new(base: com.fasterxml.jackson.databind.ObjectWriter, config: com.fasterxml.jackson.databind.SerializationConfig): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValues(out: java.io.OutputStream): com.fasterxml.jackson.databind.SequenceWriter;
					public forType(rootType: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValue(out: java.io.DataOutput, value: any): void;
					/** @deprecated */
					public withType(rootType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public acceptJsonFormatVisitor(type: com.fasterxml.jackson.databind.JavaType, visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public with(feature: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.ObjectWriter;
					public withRootName(rootName: string): com.fasterxml.jackson.databind.ObjectWriter;
					/** @deprecated */
					public withSchema(schema: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public without(feature: com.fasterxml.jackson.core.StreamWriteFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public with(df: java.text.DateFormat): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(f: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public _configureGenerator(gen: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.core.JsonGenerator;
					public with(tz: java.util.TimeZone): com.fasterxml.jackson.databind.ObjectWriter;
					public _new(base: com.fasterxml.jackson.databind.ObjectWriter, f: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectWriter;
					public withDefaultPrettyPrinter(): com.fasterxml.jackson.databind.ObjectWriter;
					public withRootName(rootName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ObjectWriter;
					public withoutRootName(): com.fasterxml.jackson.databind.ObjectWriter;
					public with(schema: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter;
					public withoutFeatures(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValuesAsArray(out: java.io.File): com.fasterxml.jackson.databind.SequenceWriter;
					public isEnabled(f: com.fasterxml.jackson.core.StreamWriteFeature): boolean;
					public writeValue(resultFile: java.io.File, value: any): void;
					public writeValueAsBytes(value: any): number[];
					public withRootValueSeparator(sep: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.databind.ObjectWriter;
					public with(pp: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter;
					public createGenerator(w: java.io.Writer): com.fasterxml.jackson.core.JsonGenerator;
					public with(b64variant: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.ObjectWriter;
					public withoutFeatures(...features: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public with(first: com.fasterxml.jackson.databind.SerializationFeature, ...other: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public canSerialize(type: java.lang.Class<any>, cause: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
					public forType(rootType: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public withAttributes(attrs: java.util.Map<any,any>): com.fasterxml.jackson.databind.ObjectWriter;
					public constructor(mapper: com.fasterxml.jackson.databind.ObjectMapper, config: com.fasterxml.jackson.databind.SerializationConfig, s: com.fasterxml.jackson.core.FormatSchema);
					public writeValues(out: java.io.Writer): com.fasterxml.jackson.databind.SequenceWriter;
					public isEnabled(f: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
					public writeValue(out: java.io.OutputStream, value: any): void;
					/** @deprecated */
					public withType(rootType: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public version(): com.fasterxml.jackson.core.Version;
					public forType(rootType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter;
					public without(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public _newSequenceWriter(wrapInArray: boolean, gen: com.fasterxml.jackson.core.JsonGenerator, managedInput: boolean): com.fasterxml.jackson.databind.SequenceWriter;
					public withRootValueSeparator(sep: string): com.fasterxml.jackson.databind.ObjectWriter;
					public createGenerator(out: java.io.OutputStream): com.fasterxml.jackson.core.JsonGenerator;
					public writeValuesAsArray(out: java.io.DataOutput): com.fasterxml.jackson.databind.SequenceWriter;
					public writeValuesAsArray(out: java.io.Writer): com.fasterxml.jackson.databind.SequenceWriter;
					public without(first: com.fasterxml.jackson.databind.SerializationFeature, ...other: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public without(feature: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public _assertNotNull(paramName: string, src: any): void;
					public createGenerator(out: java.io.DataOutput): com.fasterxml.jackson.core.JsonGenerator;
					public getFactory(): com.fasterxml.jackson.core.JsonFactory;
					public writeValue(g: com.fasterxml.jackson.core.JsonGenerator, value: any): void;
					public writeValues(out: java.io.File): com.fasterxml.jackson.databind.SequenceWriter;
					public with(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.ObjectWriter;
					public acceptJsonFormatVisitor(type: java.lang.Class<any>, visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
					public _new(genSettings: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings, prefetch: com.fasterxml.jackson.databind.ObjectWriter.Prefetch): com.fasterxml.jackson.databind.ObjectWriter;
					public withoutFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public _verifySchemaType(schema: com.fasterxml.jackson.core.FormatSchema): void;
					public hasPrefetchedSerializer(): boolean;
					public with(feature: com.fasterxml.jackson.core.StreamWriteFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public _serializerProvider(): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
					public constructor(mapper: com.fasterxml.jackson.databind.ObjectMapper, config: com.fasterxml.jackson.databind.SerializationConfig);
					public constructor(base: com.fasterxml.jackson.databind.ObjectWriter, f: com.fasterxml.jackson.core.JsonFactory);
					public writeValueAsString(value: any): string;
					public with(feature: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.ObjectWriter;
					/** @deprecated */
					public isEnabled(f: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
					public withoutAttribute(key: any): com.fasterxml.jackson.databind.ObjectWriter;
					public constructor(mapper: com.fasterxml.jackson.databind.ObjectMapper, config: com.fasterxml.jackson.databind.SerializationConfig, rootType: com.fasterxml.jackson.databind.JavaType, pp: com.fasterxml.jackson.core.PrettyPrinter);
					public with(f: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.ObjectWriter;
					public without(feature: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.ObjectWriter;
					public with(filterProvider: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValuesAsArray(gen: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.databind.SequenceWriter;
					public with(escapes: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.databind.ObjectWriter;
					public with(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.ObjectWriter;
					public withAttribute(key: any, value: any): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValuesAsArray(out: java.io.OutputStream): com.fasterxml.jackson.databind.SequenceWriter;
					public withFeatures(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public withView(view: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public createGenerator(out: java.io.OutputStream, enc: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.JsonGenerator;
					public writeValues(g: com.fasterxml.jackson.core.JsonGenerator): com.fasterxml.jackson.databind.SequenceWriter;
					public _writeValueAndClose(gen: com.fasterxml.jackson.core.JsonGenerator, value: any): void;
					public withFeatures(...features: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public constructor(base: com.fasterxml.jackson.databind.ObjectWriter, config: com.fasterxml.jackson.databind.SerializationConfig, genSettings: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings, prefetch: com.fasterxml.jackson.databind.ObjectWriter.Prefetch);
					public createGenerator(outputFile: java.io.File, enc: com.fasterxml.jackson.core.JsonEncoding): com.fasterxml.jackson.core.JsonGenerator;
					public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
					/** @deprecated */
					public withType(rootType: java.lang.Class<any>): com.fasterxml.jackson.databind.ObjectWriter;
					public constructor(base: com.fasterxml.jackson.databind.ObjectWriter, config: com.fasterxml.jackson.databind.SerializationConfig);
					public withFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.ObjectWriter;
					public with(l: java.util.Locale): com.fasterxml.jackson.databind.ObjectWriter;
					public writeValues(out: java.io.DataOutput): com.fasterxml.jackson.databind.SequenceWriter;
					public canSerialize(type: java.lang.Class<any>): boolean;
				}
				export module ObjectWriter {
					export class GeneratorSettings extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings>;
						public static empty: com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public prettyPrinter: com.fasterxml.jackson.core.PrettyPrinter;
						public schema: com.fasterxml.jackson.core.FormatSchema;
						public characterEscapes: com.fasterxml.jackson.core.io.CharacterEscapes;
						public rootValueSeparator: com.fasterxml.jackson.core.SerializableString;
						public withRootValueSeparator(sep: string): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public initialize(gen: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(pp: com.fasterxml.jackson.core.PrettyPrinter, sch: com.fasterxml.jackson.core.FormatSchema, esc: com.fasterxml.jackson.core.io.CharacterEscapes, rootSep: com.fasterxml.jackson.core.SerializableString);
						public with(esc: com.fasterxml.jackson.core.io.CharacterEscapes): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public with(sch: com.fasterxml.jackson.core.FormatSchema): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public with(pp: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
						public withRootValueSeparator(sep: com.fasterxml.jackson.core.SerializableString): com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings;
					}
					export class Prefetch extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ObjectWriter.Prefetch>;
						public static empty: com.fasterxml.jackson.databind.ObjectWriter.Prefetch;
						public getValueSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public forRootType(parent: com.fasterxml.jackson.databind.ObjectWriter, newType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ObjectWriter.Prefetch;
						public getTypeSerializer(): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public hasSerializer(): boolean;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, value: any, prov: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class PropertyMetadata extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyMetadata>;
					public static STD_REQUIRED: com.fasterxml.jackson.databind.PropertyMetadata;
					public static STD_OPTIONAL: com.fasterxml.jackson.databind.PropertyMetadata;
					public static STD_REQUIRED_OR_OPTIONAL: com.fasterxml.jackson.databind.PropertyMetadata;
					public _required: java.lang.Boolean;
					public _description: string;
					public _index: java.lang.Integer;
					public _defaultValue: string;
					public _mergeInfo: com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo;
					public _valueNulls: com.fasterxml.jackson.annotation.Nulls;
					public _contentNulls: com.fasterxml.jackson.annotation.Nulls;
					public getValueNulls(): com.fasterxml.jackson.annotation.Nulls;
					public static construct(req: java.lang.Boolean, desc: string, index: java.lang.Integer, defaultValue: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public getRequired(): java.lang.Boolean;
					public withDefaultValue(def: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public hasDefaultValue(): boolean;
					public withDescription(desc: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public getMergeInfo(): com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo;
					/** @deprecated */
					public static construct(req: boolean, desc: string, index: java.lang.Integer, defaultValue: string): com.fasterxml.jackson.databind.PropertyMetadata;
					public isRequired(): boolean;
					public getIndex(): java.lang.Integer;
					public hasIndex(): boolean;
					public readResolve(): any;
					public withNulls(valueNulls: com.fasterxml.jackson.annotation.Nulls, contentNulls: com.fasterxml.jackson.annotation.Nulls): com.fasterxml.jackson.databind.PropertyMetadata;
					public withMergeInfo(mergeInfo: com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo): com.fasterxml.jackson.databind.PropertyMetadata;
					public constructor(req: java.lang.Boolean, desc: string, index: java.lang.Integer, def: string, mergeInfo: com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo, valueNulls: com.fasterxml.jackson.annotation.Nulls, contentNulls: com.fasterxml.jackson.annotation.Nulls);
					public getDescription(): string;
					public getDefaultValue(): string;
					public withIndex(index: java.lang.Integer): com.fasterxml.jackson.databind.PropertyMetadata;
					public withRequired(b: java.lang.Boolean): com.fasterxml.jackson.databind.PropertyMetadata;
					public getContentNulls(): com.fasterxml.jackson.annotation.Nulls;
				}
				export module PropertyMetadata {
					export class MergeInfo extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo>;
						public getter: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public fromDefaults: boolean;
						public static createForPropertyOverride(getter: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo;
						public static createForDefaults(getter: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo;
						public constructor(getter: com.fasterxml.jackson.databind.introspect.AnnotatedMember, fromDefaults: boolean);
						public static createForTypeOverride(getter: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class PropertyName extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyName>;
					public static USE_DEFAULT: com.fasterxml.jackson.databind.PropertyName;
					public static NO_NAME: com.fasterxml.jackson.databind.PropertyName;
					public _simpleName: string;
					public _namespace: string;
					public _encodedSimple: com.fasterxml.jackson.core.SerializableString;
					public getNamespace(): string;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public constructor(simpleName: string);
					public constructor(simpleName: string, namespace: string);
					public internSimpleName(): com.fasterxml.jackson.databind.PropertyName;
					public withNamespace(ns: string): com.fasterxml.jackson.databind.PropertyName;
					public equals(o: any): boolean;
					public getSimpleName(): string;
					public static construct(simpleName: string, ns: string): com.fasterxml.jackson.databind.PropertyName;
					public hasSimpleName(): boolean;
					public toString(): string;
					public withSimpleName(simpleName: string): com.fasterxml.jackson.databind.PropertyName;
					public simpleAsEncoded(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.core.SerializableString;
					public hasNamespace(): boolean;
					public readResolve(): any;
					public hasSimpleName(str: string): boolean;
					public static construct(simpleName: string): com.fasterxml.jackson.databind.PropertyName;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class PropertyNamingStrategies extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies>;
					public static LOWER_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static UPPER_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static SNAKE_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static UPPER_SNAKE_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static LOWER_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static KEBAB_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static LOWER_DOT_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public constructor();
				}
				export module PropertyNamingStrategies {
					export class KebabCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.KebabCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class LowerCamelCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.LowerCamelCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class LowerCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.LowerCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class LowerDotCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.LowerDotCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export abstract class NamingBase extends com.fasterxml.jackson.databind.PropertyNamingStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase>;
						public constructor();
						public nameForField(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, field: com.fasterxml.jackson.databind.introspect.AnnotatedField, defaultName: string): string;
						public nameForGetterMethod(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, defaultName: string): string;
						public nameForSetterMethod(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, defaultName: string): string;
						public nameForConstructorParameter(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ctorParam: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, defaultName: string): string;
						public translateLowerCaseWithSeparator(input: string, separator: string): string;
						public translate(param0: string): string;
					}
					export class SnakeCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class UpperCamelCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.UpperCamelCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class UpperSnakeCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategies.UpperSnakeCaseStrategy>;
						public constructor();
						public translate(input: string): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class PropertyNamingStrategy extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy>;
					public static LOWER_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static UPPER_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static SNAKE_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static LOWER_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static KEBAB_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static LOWER_DOT_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public static PASCAL_CASE_TO_CAMEL_CASE: com.fasterxml.jackson.databind.PropertyNamingStrategy;
					public nameForSetterMethod(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, defaultName: string): string;
					public nameForConstructorParameter(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ctorParam: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, defaultName: string): string;
					public constructor();
					public nameForGetterMethod(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, defaultName: string): string;
					public nameForField(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, field: com.fasterxml.jackson.databind.introspect.AnnotatedField, defaultName: string): string;
				}
				export module PropertyNamingStrategy {
					export class KebabCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.KebabCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class LowerCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class LowerCaseWithUnderscoresStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy>;
						public constructor();
					}
					export class LowerDotCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerDotCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class PascalCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.UpperCamelCaseStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.PascalCaseStrategy>;
						public constructor();
					}
					export abstract class PropertyNamingStrategyBase extends com.fasterxml.jackson.databind.PropertyNamingStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase>;
						public constructor();
						public nameForField(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, field: com.fasterxml.jackson.databind.introspect.AnnotatedField, defaultName: string): string;
						public nameForGetterMethod(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, defaultName: string): string;
						public nameForSetterMethod(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, defaultName: string): string;
						public nameForConstructorParameter(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ctorParam: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, defaultName: string): string;
						public static translateLowerCaseWithSeparator(input: string, separator: string): string;
						public translate(param0: string): string;
					}
					export class SnakeCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
					export class UpperCamelCaseStrategy extends com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.PropertyNamingStrategy.UpperCamelCaseStrategy>;
						public constructor();
						public translate(param0: string): string;
						public translate(input: string): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class RuntimeJsonMappingException extends java.lang.RuntimeException {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.RuntimeJsonMappingException>;
					public constructor(message: string);
					public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
					public constructor();
					public constructor(message: string, cause: com.fasterxml.jackson.databind.JsonMappingException);
					public constructor(cause: java.lang.Throwable);
					public constructor(cause: com.fasterxml.jackson.databind.JsonMappingException);
					public constructor(message: string, cause: java.lang.Throwable);
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class SequenceWriter extends java.lang.Object implements java.io.Closeable, java.io.Flushable {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SequenceWriter>;
					public _provider: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
					public _config: com.fasterxml.jackson.databind.SerializationConfig;
					public _generator: com.fasterxml.jackson.core.JsonGenerator;
					public _rootSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
					public _closeGenerator: boolean;
					public _cfgFlush: boolean;
					public _cfgCloseCloseable: boolean;
					public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
					public _openArray: boolean;
					public _closed: boolean;
					public write(value: any): com.fasterxml.jackson.databind.SequenceWriter;
					public write(value: any, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.SequenceWriter;
					public constructor(prov: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, gen: com.fasterxml.jackson.core.JsonGenerator, closeGenerator: boolean, prefetch: com.fasterxml.jackson.databind.ObjectWriter.Prefetch);
					public _writeCloseableValue(value: any, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.SequenceWriter;
					public close(): void;
					public version(): com.fasterxml.jackson.core.Version;
					public flush(): void;
					public init(wrapInArray: boolean): com.fasterxml.jackson.databind.SequenceWriter;
					public _writeCloseableValue(value: any): com.fasterxml.jackson.databind.SequenceWriter;
					public writeAll(value: any[]): com.fasterxml.jackson.databind.SequenceWriter;
					public writeAll(iterable: java.lang.Iterable<any>): com.fasterxml.jackson.databind.SequenceWriter;
					public writeAll(container: java.util.Collection<any>): com.fasterxml.jackson.databind.SequenceWriter;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class SerializationConfig extends com.fasterxml.jackson.databind.cfg.MapperConfigBase<com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationConfig> implements java.io.Serializable  {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SerializationConfig>;
					public static DEFAULT_PRETTY_PRINTER: com.fasterxml.jackson.core.PrettyPrinter;
					public _filterProvider: com.fasterxml.jackson.databind.ser.FilterProvider;
					public _defaultPrettyPrinter: com.fasterxml.jackson.core.PrettyPrinter;
					public _serFeatures: number;
					public _generatorFeatures: number;
					public _generatorFeaturesToChange: number;
					public _formatWriteFeatures: number;
					public _formatWriteFeaturesToChange: number;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): any;
					public constructor(src: com.fasterxml.jackson.databind.SerializationConfig, defaultPP: com.fasterxml.jackson.core.PrettyPrinter);
					public with(str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): com.fasterxml.jackson.databind.SerializationConfig;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver);
					public isEnabled(f: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public with(feature: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.SerializationConfig;
					/** @deprecated */
					public getSerializationInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Include;
					public withFilters(filterProvider: com.fasterxml.jackson.databind.ser.FilterProvider): com.fasterxml.jackson.databind.SerializationConfig;
					public withDefaultPrettyPrinter(pp: com.fasterxml.jackson.core.PrettyPrinter): com.fasterxml.jackson.databind.SerializationConfig;
					public with(hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
					public useRootWrapping(): boolean;
					public with(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): com.fasterxml.jackson.databind.SerializationConfig;
					public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): any;
					public with(df: java.text.DateFormat): com.fasterxml.jackson.databind.SerializationConfig;
					public withoutFeatures(...features: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public withoutFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public with(trb: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, view: java.lang.Class<any>);
					public withFeatures(...features: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, mapperFeatures: number);
					public without(feature: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.databind.SerializationConfig;
					public with(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					/** @deprecated */
					public withPropertyInclusion(incl: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.SerializationConfig;
					public hasSerializationFeatures(featureMask: number): boolean;
					public constructDefaultPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
					public with(pns: com.fasterxml.jackson.databind.PropertyNamingStrategy): any;
					public _withBase(newBase: com.fasterxml.jackson.databind.cfg.BaseSettings): com.fasterxml.jackson.databind.SerializationConfig;
					public with(base64: com.fasterxml.jackson.core.Base64Variant): any;
					public constructor(src: com.fasterxml.jackson.databind.SerializationConfig, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public without(feature: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public with(feature: com.fasterxml.jackson.databind.MapperFeature, state: boolean): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, base: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public withView(param0: java.lang.Class<any>): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>);
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, attr: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public with(tz: java.util.TimeZone): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, rootName: com.fasterxml.jackson.databind.PropertyName);
					/** @deprecated */
					public constructor(src: com.fasterxml.jackson.databind.SerializationConfig, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public constructor(src: com.fasterxml.jackson.databind.SerializationConfig, attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes);
					public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
					public with(ci: com.fasterxml.jackson.databind.introspect.ClassIntrospector): any;
					public withRootName(rootName: string): any;
					public without(first: com.fasterxml.jackson.databind.SerializationFeature, ...features: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public withFeatures(...features: com.fasterxml.jackson.core.FormatFeature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public without(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, base: com.fasterxml.jackson.databind.cfg.BaseSettings);
					public with(l: java.util.Locale): any;
					public without(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public _withMapperFeatures(param0: number): any;
					public with(first: com.fasterxml.jackson.databind.SerializationFeature, ...features: com.fasterxml.jackson.databind.SerializationFeature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public getFilterProvider(): com.fasterxml.jackson.databind.ser.FilterProvider;
					public introspect(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
					public isEnabled(f: com.fasterxml.jackson.core.JsonGenerator.Feature, factory: com.fasterxml.jackson.core.JsonFactory): boolean;
					public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, mapperFeatures: number);
					public without(...param0: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public getDefaultPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
					public constructor(src: com.fasterxml.jackson.databind.SerializationConfig, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
					public with(feature: com.fasterxml.jackson.databind.SerializationFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public with(feature: com.fasterxml.jackson.core.FormatFeature): com.fasterxml.jackson.databind.SerializationConfig;
					public findMixInClassFor(cls: java.lang.Class<any>): java.lang.Class<any>;
					public withFeatures(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public with(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): any;
					public withoutFeatures(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): com.fasterxml.jackson.databind.SerializationConfig;
					public withView(view: java.lang.Class<any>): com.fasterxml.jackson.databind.SerializationConfig;
					public initialize(g: com.fasterxml.jackson.core.JsonGenerator): void;
					public _withMapperFeatures(mapperFeatures: number): com.fasterxml.jackson.databind.SerializationConfig;
					public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): any;
					public with(p: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider): any;
					public with(df: java.text.DateFormat): any;
					public getSerializationFeatures(): number;
					public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, mapperFeatures: number);
					public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
					public _withBase(param0: com.fasterxml.jackson.databind.cfg.BaseSettings): any;
					public withRootName(rootName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.SerializationConfig;
					public with(...param0: com.fasterxml.jackson.databind.MapperFeature[]): any;
					public with(tf: com.fasterxml.jackson.databind.type.TypeFactory): any;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export class SerializationFeature extends com.fasterxml.jackson.databind.cfg.ConfigFeature {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SerializationFeature>;
					public static WRAP_ROOT_VALUE: com.fasterxml.jackson.databind.SerializationFeature;
					public static INDENT_OUTPUT: com.fasterxml.jackson.databind.SerializationFeature;
					public static FAIL_ON_EMPTY_BEANS: com.fasterxml.jackson.databind.SerializationFeature;
					public static FAIL_ON_SELF_REFERENCES: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRAP_EXCEPTIONS: com.fasterxml.jackson.databind.SerializationFeature;
					public static FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_SELF_REFERENCES_AS_NULL: com.fasterxml.jackson.databind.SerializationFeature;
					public static CLOSE_CLOSEABLE: com.fasterxml.jackson.databind.SerializationFeature;
					public static FLUSH_AFTER_WRITE_VALUE: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATES_AS_TIMESTAMPS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATE_KEYS_AS_TIMESTAMPS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATES_WITH_ZONE_ID: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATES_WITH_CONTEXT_TIME_ZONE: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DURATIONS_AS_TIMESTAMPS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_ENUMS_USING_TO_STRING: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_ENUMS_USING_INDEX: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_ENUM_KEYS_USING_INDEX: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_NULL_MAP_VALUES: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_EMPTY_JSON_ARRAYS: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_BIGDECIMAL_AS_PLAIN: com.fasterxml.jackson.databind.SerializationFeature;
					public static WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS: com.fasterxml.jackson.databind.SerializationFeature;
					public static ORDER_MAP_ENTRIES_BY_KEYS: com.fasterxml.jackson.databind.SerializationFeature;
					public static EAGER_SERIALIZER_FETCH: com.fasterxml.jackson.databind.SerializationFeature;
					public static USE_EQUALITY_FOR_OBJECT_ID: com.fasterxml.jackson.databind.SerializationFeature;
					public enabledIn(param0: number): boolean;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static values(): com.fasterxml.jackson.databind.SerializationFeature[];
					public enabledIn(flags: number): boolean;
					public getMask(): number;
					public static valueOf(name: string): com.fasterxml.jackson.databind.SerializationFeature;
					public enabledByDefault(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export abstract class SerializerProvider extends com.fasterxml.jackson.databind.DatabindContext {
					public static class: java.lang.Class<com.fasterxml.jackson.databind.SerializerProvider>;
					public static CACHE_UNKNOWN_MAPPINGS: boolean;
					public static DEFAULT_NULL_KEY_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public static DEFAULT_UNKNOWN_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _config: com.fasterxml.jackson.databind.SerializationConfig;
					public _serializationView: java.lang.Class<any>;
					public _serializerFactory: com.fasterxml.jackson.databind.ser.SerializerFactory;
					public _serializerCache: com.fasterxml.jackson.databind.ser.SerializerCache;
					public _attributes: com.fasterxml.jackson.databind.cfg.ContextAttributes;
					public _unknownTypeSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _nullValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _nullKeySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _knownSerializers: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
					public _stdNullValueSerializer: boolean;
					public findValueSerializer(valueType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public reportMappingProblem(message: string, ...args: any[]): void;
					public getConfig(): com.fasterxml.jackson.databind.SerializationConfig;
					public reportMappingProblem(t: java.lang.Throwable, message: string, ...msgArgs: any[]): void;
					public constructor(src: com.fasterxml.jackson.databind.SerializerProvider);
					public constructSpecializedType(baseType: com.fasterxml.jackson.databind.JavaType, subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public reportBadDefinition(param0: com.fasterxml.jackson.databind.JavaType, param1: string): any;
					public defaultSerializeField(fieldName: string, value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
					public defaultSerializeDateKey(date: java.util.Date, gen: com.fasterxml.jackson.core.JsonGenerator): void;
					public reportBadTypeDefinition(bean: com.fasterxml.jackson.databind.BeanDescription, msg: string, ...msgArgs: any[]): any;
					public constructor();
					public defaultSerializeDateValue(date: java.util.Date, gen: com.fasterxml.jackson.core.JsonGenerator): void;
					public _createAndCacheUntypedSerializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public getGenerator(): com.fasterxml.jackson.core.JsonGenerator;
					public canOverrideAccessModifiers(): boolean;
					public findTypedValueSerializer(valueType: com.fasterxml.jackson.databind.JavaType, cache: boolean, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public setNullValueSerializer(nvs: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
					public isUnknownTypeSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
					public defaultSerializeDateValue(timestamp: number, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					public _createUntypedSerializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _createAndCacheUntypedSerializer(rawType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findNullValueSerializer(property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public handleSecondaryContextualization(ser: com.fasterxml.jackson.databind.JsonSerializer<any>, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					/** @deprecated */
					public mappingException(t: java.lang.Throwable, message: string, ...msgArgs: any[]): com.fasterxml.jackson.databind.JsonMappingException;
					public hasSerializationFeatures(featureMask: number): boolean;
					public setDefaultKeySerializer(ks: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
					public getUnknownTypeSerializer(unknownType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getDefaultNullKeySerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public _findExplicitUntypedSerializer(runtimeType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findKeySerializer(rawKeyType: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
					public getAttribute(key: any): any;
					public invalidTypeIdException(baseType: com.fasterxml.jackson.databind.JavaType, typeId: string, extraDesc: string): com.fasterxml.jackson.databind.JsonMappingException;
					public _reportIncompatibleRootType(value: any, rootType: com.fasterxml.jackson.databind.JavaType): void;
					public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
					public defaultSerializeNull(gen: com.fasterxml.jackson.core.JsonGenerator): void;
					public findValueSerializer(valueType: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getAttribute(param0: any): any;
					public getDefaultNullValueSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public defaultSerializeDateKey(timestamp: number, param1: com.fasterxml.jackson.core.JsonGenerator): void;
					public _handleResolvable(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public reportBadDefinition(type: com.fasterxml.jackson.databind.JavaType, msg: string): any;
					public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
					public setAttribute(key: any, value: any): com.fasterxml.jackson.databind.SerializerProvider;
					public findContentValueSerializer(valueType: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public defaultSerializeValue(value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
					public getDefaultPropertyFormat(baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
					public getLocale(): java.util.Locale;
					public handlePrimaryContextualization(ser: com.fasterxml.jackson.databind.JsonSerializer<any>, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public getActiveView(): java.lang.Class<any>;
					public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
					public getTimeZone(): java.util.TimeZone;
					public isEnabled(param0: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public includeFilterSuppressNulls(param0: any): boolean;
					public isEnabled(feature: com.fasterxml.jackson.databind.MapperFeature): boolean;
					public setAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.DatabindContext;
					public getFilterProvider(): com.fasterxml.jackson.databind.ser.FilterProvider;
					public reportBadDefinition(type: com.fasterxml.jackson.databind.JavaType, msg: string, cause: java.lang.Throwable): any;
					public reportBadDefinition(type: java.lang.Class<any>, msg: string): any;
					public findKeySerializer(keyType: com.fasterxml.jackson.databind.JavaType, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public serializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findValueSerializer(valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public bufferForValueConversion(): com.fasterxml.jackson.databind.util.TokenBuffer;
					public includeFilterInstance(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: java.lang.Class<any>): any;
					public _dateFormat(): java.text.DateFormat;
					/** @deprecated */
					public mappingException(message: string, ...msgArgs: any[]): com.fasterxml.jackson.databind.JsonMappingException;
					public _handleContextualResolvable(ser: com.fasterxml.jackson.databind.JsonSerializer<any>, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public setNullKeySerializer(nks: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
					public findPrimaryPropertySerializer(valueType: com.fasterxml.jackson.databind.JavaType, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findContentValueSerializer(valueType: com.fasterxml.jackson.databind.JavaType, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findPrimaryPropertySerializer(valueType: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public reportBadPropertyDefinition(bean: com.fasterxml.jackson.databind.BeanDescription, prop: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, message: string, ...msgArgs: any[]): any;
					public findNullKeySerializer(serializationType: com.fasterxml.jackson.databind.JavaType, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public constructor(src: com.fasterxml.jackson.databind.SerializerProvider, config: com.fasterxml.jackson.databind.SerializationConfig, f: com.fasterxml.jackson.databind.ser.SerializerFactory);
					public bufferForValueConversion(oc: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.databind.util.TokenBuffer;
					public findValueSerializer(valueType: com.fasterxml.jackson.databind.JavaType, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public findTypedValueSerializer(valueType: java.lang.Class<any>, cache: boolean, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					public isEnabled(feature: com.fasterxml.jackson.databind.SerializationFeature): boolean;
					public findTypeSerializer(javaType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
					public getDefaultPropertyInclusion(baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
					public reportBadDefinition(raw: java.lang.Class<any>, msg: string, cause: java.lang.Throwable): any;
					public constructSpecializedType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
					public invalidTypeIdException(param0: com.fasterxml.jackson.databind.JavaType, param1: string, param2: string): com.fasterxml.jackson.databind.JsonMappingException;
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JacksonStdImpl extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JacksonStdImpl>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JacksonStdImpl interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonAppend extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonAppend>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonAppend interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							attrs(): com.fasterxml.jackson.databind.annotation.JsonAppend.Attr[];
							props(): com.fasterxml.jackson.databind.annotation.JsonAppend.Prop[];
							prepend(): boolean;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public equals(obj: any): boolean;
						public prepend(): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public attrs(): com.fasterxml.jackson.databind.annotation.JsonAppend.Attr[];
						public props(): com.fasterxml.jackson.databind.annotation.JsonAppend.Prop[];
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
					export module JsonAppend {
						export class Attr extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonAppend.Attr>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonAppend$Attr interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								value(): string;
								propName(): string;
								propNamespace(): string;
								include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
								required(): boolean;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public propNamespace(): string;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public propName(): string;
							public toString(): string;
							public value(): string;
							public required(): boolean;
							public equals(param0: any): boolean;
							public include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
						}
						export class Prop extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonAppend.Prop>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonAppend$Prop interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								value(): java.lang.Class<any>;
								name(): string;
								namespace(): string;
								include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
								required(): boolean;
								type(): java.lang.Class<any>;
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public namespace(): string;
							public type(): java.lang.Class<any>;
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public value(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public name(): string;
							public toString(): string;
							public required(): boolean;
							public equals(param0: any): boolean;
							public include(): com.fasterxml.jackson.annotation.JsonInclude.Include;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonDeserialize extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonDeserialize>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonDeserialize interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							using(): java.lang.Class<any>;
							contentUsing(): java.lang.Class<any>;
							keyUsing(): java.lang.Class<any>;
							builder(): java.lang.Class<any>;
							converter(): java.lang.Class<any>;
							contentConverter(): java.lang.Class<any>;
							as(): java.lang.Class<any>;
							keyAs(): java.lang.Class<any>;
							contentAs(): java.lang.Class<any>;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public keyUsing(): java.lang.Class<any>;
						public contentAs(): java.lang.Class<any>;
						public equals(obj: any): boolean;
						public using(): java.lang.Class<any>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public builder(): java.lang.Class<any>;
						public keyAs(): java.lang.Class<any>;
						public toString(): string;
						public contentUsing(): java.lang.Class<any>;
						public contentConverter(): java.lang.Class<any>;
						public converter(): java.lang.Class<any>;
						public as(): java.lang.Class<any>;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonNaming extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonNaming>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonNaming interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonPOJOBuilder extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							buildMethodName(): string;
							withPrefix(): string;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public static DEFAULT_WITH_PREFIX: string;
						public static DEFAULT_BUILD_METHOD: string;
						public equals(obj: any): boolean;
						public buildMethodName(): string;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public withPrefix(): string;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
					export module JsonPOJOBuilder {
						export class Value extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value>;
							public buildMethodName: string;
							public withPrefix: string;
							public constructor(ann: com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder);
							public constructor(buildMethodName: string, withPrefix: string);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonSerialize extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonSerialize>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonSerialize interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							using(): java.lang.Class<any>;
							contentUsing(): java.lang.Class<any>;
							keyUsing(): java.lang.Class<any>;
							nullsUsing(): java.lang.Class<any>;
							as(): java.lang.Class<any>;
							keyAs(): java.lang.Class<any>;
							contentAs(): java.lang.Class<any>;
							typing(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							converter(): java.lang.Class<any>;
							contentConverter(): java.lang.Class<any>;
							include(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public keyUsing(): java.lang.Class<any>;
						public contentAs(): java.lang.Class<any>;
						public equals(obj: any): boolean;
						public nullsUsing(): java.lang.Class<any>;
						public using(): java.lang.Class<any>;
						public typing(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public keyAs(): java.lang.Class<any>;
						public toString(): string;
						public contentUsing(): java.lang.Class<any>;
						public contentConverter(): java.lang.Class<any>;
						public converter(): java.lang.Class<any>;
						public as(): java.lang.Class<any>;
						/** @deprecated */
						public include(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
						public annotationType(): java.lang.Class<any>;
					}
					export module JsonSerialize {
						export class Inclusion {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion>;
							public static ALWAYS: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static NON_NULL: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static NON_DEFAULT: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static NON_EMPTY: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static DEFAULT_INCLUSION: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static values(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion[];
							public static valueOf(name: string): com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
						}
						export class Typing {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing>;
							public static DYNAMIC: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							public static STATIC: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							public static DEFAULT_TYPING: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
							public static values(): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing[];
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(name: string): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonTypeIdResolver extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonTypeResolver extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonTypeResolver>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonTypeResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class JsonValueInstantiator extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.JsonValueInstantiator>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.annotation.JsonValueInstantiator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): java.lang.Class<any>;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public value(): java.lang.Class<any>;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module annotation {
					export class NoClass extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.annotation.NoClass>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class BaseSettings extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.BaseSettings>;
						public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
						public _classIntrospector: com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _propertyNamingStrategy: com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public _accessorNaming: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider;
						public _typeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public _typeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
						public _dateFormat: java.text.DateFormat;
						public _handlerInstantiator: com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
						public _locale: java.util.Locale;
						public _timeZone: java.util.TimeZone;
						public _defaultBase64: com.fasterxml.jackson.core.Base64Variant;
						public with(l: java.util.Locale): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getHandlerInstantiator(): com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
						public getAccessorNaming(): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider;
						public constructor(ci: com.fasterxml.jackson.databind.introspect.ClassIntrospector, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, pns: com.fasterxml.jackson.databind.PropertyNamingStrategy, tf: com.fasterxml.jackson.databind.type.TypeFactory, typer: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>, dateFormat: java.text.DateFormat, hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator, locale: java.util.Locale, tz: java.util.TimeZone, defaultBase64: com.fasterxml.jackson.core.Base64Variant, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, accNaming: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider);
						public withDateFormat(df: java.text.DateFormat): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getLocale(): java.util.Locale;
						public with(v: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getPropertyNamingStrategy(): com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public with(base64: com.fasterxml.jackson.core.Base64Variant): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getDateFormat(): java.text.DateFormat;
						public withInsertedAnnotationIntrospector(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public with(tz: java.util.TimeZone): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getBase64Variant(): com.fasterxml.jackson.core.Base64Variant;
						public withTypeFactory(tf: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public withHandlerInstantiator(hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
						public withAnnotationIntrospector(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
						public copy(): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getPolymorphicTypeValidator(): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
						public withClassIntrospector(ci: com.fasterxml.jackson.databind.introspect.ClassIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public withPropertyNamingStrategy(pns: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.cfg.BaseSettings;
						/** @deprecated */
						public constructor(ci: com.fasterxml.jackson.databind.introspect.ClassIntrospector, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, pns: com.fasterxml.jackson.databind.PropertyNamingStrategy, tf: com.fasterxml.jackson.databind.type.TypeFactory, typer: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>, dateFormat: java.text.DateFormat, hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator, locale: java.util.Locale, tz: java.util.TimeZone, defaultBase64: com.fasterxml.jackson.core.Base64Variant, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator);
						public getTimeZone(): java.util.TimeZone;
						public withAppendedAnnotationIntrospector(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public getClassIntrospector(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public withTypeResolverBuilder(typer: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): com.fasterxml.jackson.databind.cfg.BaseSettings;
						public hasExplicitTimeZone(): boolean;
						public getTypeResolverBuilder(): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public withAccessorNaming(p: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider): com.fasterxml.jackson.databind.cfg.BaseSettings;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class CoercionAction {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.CoercionAction>;
						public static Fail: com.fasterxml.jackson.databind.cfg.CoercionAction;
						public static TryConvert: com.fasterxml.jackson.databind.cfg.CoercionAction;
						public static AsNull: com.fasterxml.jackson.databind.cfg.CoercionAction;
						public static AsEmpty: com.fasterxml.jackson.databind.cfg.CoercionAction;
						public static values(): com.fasterxml.jackson.databind.cfg.CoercionAction[];
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.fasterxml.jackson.databind.cfg.CoercionAction;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class CoercionConfig extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.CoercionConfig>;
						public _acceptBlankAsEmpty: java.lang.Boolean;
						public _coercionsByShape: com.fasterxml.jackson.databind.cfg.CoercionAction[];
						public constructor();
						public getAcceptBlankAsEmpty(): java.lang.Boolean;
						public findAction(shape: com.fasterxml.jackson.databind.cfg.CoercionInputShape): com.fasterxml.jackson.databind.cfg.CoercionAction;
						public constructor(src: com.fasterxml.jackson.databind.cfg.CoercionConfig);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class CoercionConfigs extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.CoercionConfigs>;
						public _defaultAction: com.fasterxml.jackson.databind.cfg.CoercionAction;
						public _defaultCoercions: com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
						public _perTypeCoercions: com.fasterxml.jackson.databind.cfg.MutableCoercionConfig[];
						public _perClassCoercions: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.cfg.MutableCoercionConfig>;
						public constructor();
						public copy(): com.fasterxml.jackson.databind.cfg.CoercionConfigs;
						public findCoercionFromBlankString(config: com.fasterxml.jackson.databind.DeserializationConfig, targetType: com.fasterxml.jackson.databind.type.LogicalType, targetClass: java.lang.Class<any>, actionIfBlankNotAllowed: com.fasterxml.jackson.databind.cfg.CoercionAction): com.fasterxml.jackson.databind.cfg.CoercionAction;
						public defaultCoercions(): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
						public findOrCreateCoercion(type: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
						public _isScalarType(targetType: com.fasterxml.jackson.databind.type.LogicalType): boolean;
						public findOrCreateCoercion(type: com.fasterxml.jackson.databind.type.LogicalType): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
						public constructor(defaultAction: com.fasterxml.jackson.databind.cfg.CoercionAction, defaultCoercions: com.fasterxml.jackson.databind.cfg.MutableCoercionConfig, perTypeCoercions: com.fasterxml.jackson.databind.cfg.MutableCoercionConfig[], perClassCoercions: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.cfg.MutableCoercionConfig>);
						public findCoercion(config: com.fasterxml.jackson.databind.DeserializationConfig, targetType: com.fasterxml.jackson.databind.type.LogicalType, targetClass: java.lang.Class<any>, inputShape: com.fasterxml.jackson.databind.cfg.CoercionInputShape): com.fasterxml.jackson.databind.cfg.CoercionAction;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class CoercionInputShape {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.CoercionInputShape>;
						public static Array: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static Object: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static Integer: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static Float: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static Boolean: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static String: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static Binary: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static EmptyArray: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static EmptyObject: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static EmptyString: com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static values(): com.fasterxml.jackson.databind.cfg.CoercionInputShape[];
						public static valueOf(name: string): com.fasterxml.jackson.databind.cfg.CoercionInputShape;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class ConfigFeature extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ConfigFeature>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.cfg.ConfigFeature interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							enabledByDefault(): boolean;
							getMask(): number;
							enabledIn(param0: number): boolean;
						});
						public constructor();
						public getMask(): number;
						public enabledIn(param0: number): boolean;
						public enabledByDefault(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export abstract class ConfigOverride extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ConfigOverride>;
						public _format: com.fasterxml.jackson.annotation.JsonFormat.Value;
						public _include: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _includeAsProperty: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _ignorals: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public _setterInfo: com.fasterxml.jackson.annotation.JsonSetter.Value;
						public _visibility: com.fasterxml.jackson.annotation.JsonAutoDetect.Value;
						public _isIgnoredType: java.lang.Boolean;
						public _mergeable: java.lang.Boolean;
						public getSetterInfo(): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public constructor();
						public getVisibility(): com.fasterxml.jackson.annotation.JsonAutoDetect.Value;
						public getIncludeAsProperty(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getMergeable(): java.lang.Boolean;
						public getInclude(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getIgnorals(): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public getIsIgnoredType(): java.lang.Boolean;
						public static empty(): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public getFormat(): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.cfg.ConfigOverride);
					}
					export module ConfigOverride {
						export class Empty extends com.fasterxml.jackson.databind.cfg.ConfigOverride {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ConfigOverride.Empty>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class ConfigOverrides extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ConfigOverrides>;
						public _overrides: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.cfg.MutableConfigOverride>;
						public _defaultInclusion: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _defaultSetterInfo: com.fasterxml.jackson.annotation.JsonSetter.Value;
						public _visibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public _defaultMergeable: java.lang.Boolean;
						public _defaultLeniency: java.lang.Boolean;
						public setDefaultMergeable(v: java.lang.Boolean): void;
						public constructor(overrides: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.cfg.MutableConfigOverride>, defIncl: com.fasterxml.jackson.annotation.JsonInclude.Value, defSetter: com.fasterxml.jackson.annotation.JsonSetter.Value, defVisibility: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, defMergeable: java.lang.Boolean, defLeniency: java.lang.Boolean);
						public _newMap(): java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.cfg.MutableConfigOverride>;
						public constructor();
						public copy(): com.fasterxml.jackson.databind.cfg.ConfigOverrides;
						public getDefaultInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findOverride(type: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public getDefaultMergeable(): java.lang.Boolean;
						/** @deprecated */
						public constructor(overrides: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.cfg.MutableConfigOverride>, defIncl: com.fasterxml.jackson.annotation.JsonInclude.Value, defSetter: com.fasterxml.jackson.annotation.JsonSetter.Value, defVisibility: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, defMergeable: java.lang.Boolean);
						public getDefaultLeniency(): java.lang.Boolean;
						public findOrCreateOverride(type: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public setDefaultLeniency(v: java.lang.Boolean): void;
						public setDefaultInclusion(v: com.fasterxml.jackson.annotation.JsonInclude.Value): void;
						public setDefaultSetterInfo(v: com.fasterxml.jackson.annotation.JsonSetter.Value): void;
						public getDefaultSetterInfo(): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public setDefaultVisibility(v: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): void;
						public findFormatDefaults(type: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getDefaultVisibility(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class ConstructorDetector extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ConstructorDetector>;
						public static DEFAULT: com.fasterxml.jackson.databind.cfg.ConstructorDetector;
						public static USE_PROPERTIES_BASED: com.fasterxml.jackson.databind.cfg.ConstructorDetector;
						public static USE_DELEGATING: com.fasterxml.jackson.databind.cfg.ConstructorDetector;
						public static EXPLICIT_ONLY: com.fasterxml.jackson.databind.cfg.ConstructorDetector;
						public _singleArgMode: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor;
						public _requireCtorAnnotation: boolean;
						public _allowJDKTypeCtors: boolean;
						public shouldIntrospectorImplicitConstructors(rawType: java.lang.Class<any>): boolean;
						public withRequireAnnotation(state: boolean): com.fasterxml.jackson.databind.cfg.ConstructorDetector;
						public singleArgMode(): com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor;
						public singleArgCreatorDefaultsToDelegating(): boolean;
						public requireCtorAnnotation(): boolean;
						public allowJDKTypeConstructors(): boolean;
						public singleArgCreatorDefaultsToProperties(): boolean;
						public constructor(singleArgMode: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor);
						public withAllowJDKTypeConstructors(state: boolean): com.fasterxml.jackson.databind.cfg.ConstructorDetector;
						public constructor(singleArgMode: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor, requireCtorAnnotation: boolean, allowJDKTypeCtors: boolean);
						public withSingleArgMode(singleArgMode: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor): com.fasterxml.jackson.databind.cfg.ConstructorDetector;
					}
					export module ConstructorDetector {
						export class SingleArgConstructor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor>;
							public static DELEGATING: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor;
							public static PROPERTIES: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor;
							public static HEURISTIC: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor;
							public static REQUIRE_MODE: com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor;
							public static values(): com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor[];
							public static valueOf(name: string): com.fasterxml.jackson.databind.cfg.ConstructorDetector.SingleArgConstructor;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export abstract class ContextAttributes extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ContextAttributes>;
						public static getEmpty(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public withSharedAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public constructor();
						public withoutSharedAttribute(param0: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public withPerCallAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public withSharedAttributes(param0: java.util.Map<any,any>): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public getAttribute(param0: any): any;
					}
					export module ContextAttributes {
						export class Impl extends com.fasterxml.jackson.databind.cfg.ContextAttributes implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl>;
							public static EMPTY: com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl;
							public static NULL_SURROGATE: any;
							public _shared: java.util.Map<any,any>;
							public _nonShared: java.util.Map<any,any>;
							public constructor();
							public withPerCallAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public withSharedAttributes(shared: java.util.Map<any,any>): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public withoutSharedAttribute(key: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public constructor(shared: java.util.Map<any,any>);
							public getAttribute(key: any): any;
							public static getEmpty(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public getAttribute(param0: any): any;
							public withSharedAttributes(param0: java.util.Map<any,any>): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public withoutSharedAttribute(param0: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public withPerCallAttribute(key: any, value: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public withSharedAttribute(param0: any, param1: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public constructor(shared: java.util.Map<any,any>, nonShared: java.util.Map<any,any>);
							public nonSharedInstance(key: any, value: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
							public withSharedAttribute(key: any, value: any): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class DeserializerFactoryConfig extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig>;
						public static NO_DESERIALIZERS: com.fasterxml.jackson.databind.deser.Deserializers[];
						public static NO_MODIFIERS: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier[];
						public static NO_ABSTRACT_TYPE_RESOLVERS: com.fasterxml.jackson.databind.AbstractTypeResolver[];
						public static NO_VALUE_INSTANTIATORS: com.fasterxml.jackson.databind.deser.ValueInstantiators[];
						public static DEFAULT_KEY_DESERIALIZERS: com.fasterxml.jackson.databind.deser.KeyDeserializers[];
						public _additionalDeserializers: com.fasterxml.jackson.databind.deser.Deserializers[];
						public _additionalKeyDeserializers: com.fasterxml.jackson.databind.deser.KeyDeserializers[];
						public _modifiers: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier[];
						public _abstractTypeResolvers: com.fasterxml.jackson.databind.AbstractTypeResolver[];
						public _valueInstantiators: com.fasterxml.jackson.databind.deser.ValueInstantiators[];
						public constructor();
						public withValueInstantiators(instantiators: com.fasterxml.jackson.databind.deser.ValueInstantiators): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public withDeserializerModifier(modifier: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public deserializers(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.Deserializers>;
						public withAdditionalDeserializers(additional: com.fasterxml.jackson.databind.deser.Deserializers): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public keyDeserializers(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.KeyDeserializers>;
						public deserializerModifiers(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.BeanDeserializerModifier>;
						public hasValueInstantiators(): boolean;
						public hasAbstractTypeResolvers(): boolean;
						public hasDeserializers(): boolean;
						public hasKeyDeserializers(): boolean;
						public valueInstantiators(): java.lang.Iterable<com.fasterxml.jackson.databind.deser.ValueInstantiators>;
						public constructor(allAdditionalDeserializers: com.fasterxml.jackson.databind.deser.Deserializers[], allAdditionalKeyDeserializers: com.fasterxml.jackson.databind.deser.KeyDeserializers[], modifiers: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier[], atr: com.fasterxml.jackson.databind.AbstractTypeResolver[], vi: com.fasterxml.jackson.databind.deser.ValueInstantiators[]);
						public withAbstractTypeResolver(resolver: com.fasterxml.jackson.databind.AbstractTypeResolver): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public hasDeserializerModifiers(): boolean;
						public abstractTypeResolvers(): java.lang.Iterable<com.fasterxml.jackson.databind.AbstractTypeResolver>;
						public withAdditionalKeyDeserializers(additional: com.fasterxml.jackson.databind.deser.KeyDeserializers): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export abstract class HandlerInstantiator extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.HandlerInstantiator>;
						public objectIdGeneratorInstance(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, annotated: com.fasterxml.jackson.databind.introspect.Annotated, implClass: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
						public constructor();
						public valueInstantiatorInstance(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, annotated: com.fasterxml.jackson.databind.introspect.Annotated, resolverClass: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public resolverIdGeneratorInstance(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, annotated: com.fasterxml.jackson.databind.introspect.Annotated, implClass: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdResolver;
						public namingStrategyInstance(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, annotated: com.fasterxml.jackson.databind.introspect.Annotated, implClass: java.lang.Class<any>): com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public serializerInstance(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public deserializerInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public converterInstance(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, annotated: com.fasterxml.jackson.databind.introspect.Annotated, implClass: java.lang.Class<any>): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public includeFilterInstance(config: com.fasterxml.jackson.databind.SerializationConfig, forProperty: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, filterClass: java.lang.Class<any>): any;
						public virtualPropertyWriterInstance(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, implClass: java.lang.Class<any>): com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
						public typeResolverBuilderInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public typeIdResolverInstance(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public keyDeserializerInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.introspect.Annotated, param2: java.lang.Class<any>): com.fasterxml.jackson.databind.KeyDeserializer;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export abstract class MapperBuilder<M, B>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.MapperBuilder<any,any>>;
						public _mapper: M;
						public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
						public registerSubtypes(...subtypes: java.lang.Class<any>[]): B;
						public registerSubtypes(subtypes: java.util.Collection<java.lang.Class<any>>): B;
						public disable(...features: com.fasterxml.jackson.databind.SerializationFeature[]): B;
						public configure(feature: com.fasterxml.jackson.core.StreamWriteFeature, state: boolean): B;
						public withConfigOverride(forType: java.lang.Class<any>, handler: any /* any*/): B;
						public activateDefaultTyping(subtypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, dti: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping): B;
						public enable(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): B;
						public defaultLocale(locale: java.util.Locale): B;
						public defaultBase64Variant(v: com.fasterxml.jackson.core.Base64Variant): B;
						public streamFactory(): com.fasterxml.jackson.core.TokenStreamFactory;
						public configure(feature: com.fasterxml.jackson.core.JsonGenerator.Feature, state: boolean): B;
						public filterProvider(prov: com.fasterxml.jackson.databind.ser.FilterProvider): B;
						public propertyNamingStrategy(s: com.fasterxml.jackson.databind.PropertyNamingStrategy): B;
						public disable(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): B;
						public withCoercionConfigDefaults(handler: any /* any*/): B;
						public activateDefaultTyping(subtypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): B;
						public isEnabled(f: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public setDefaultTyping(typer: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): B;
						public static findModules(): java.util.List<com.fasterxml.jackson.databind.Module>;
						public defaultPrettyPrinter(pp: com.fasterxml.jackson.core.PrettyPrinter): B;
						public defaultMergeable(b: java.lang.Boolean): B;
						public polymorphicTypeValidator(ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): B;
						public findAndAddModules(): B;
						public isEnabled(f: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
						public configure(feature: com.fasterxml.jackson.databind.DeserializationFeature, state: boolean): B;
						public configure(feature: com.fasterxml.jackson.core.JsonParser.Feature, state: boolean): B;
						public addModules(modules: java.lang.Iterable<any>): B;
						public isEnabled(f: com.fasterxml.jackson.databind.SerializationFeature): boolean;
						public removeMixIn(target: java.lang.Class<any>): B;
						public enable(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): B;
						public defaultSetterInfo(v: com.fasterxml.jackson.annotation.JsonSetter.Value): B;
						public build(): M;
						public nodeFactory(f: com.fasterxml.jackson.databind.node.JsonNodeFactory): B;
						public subtypeResolver(r: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): B;
						public accessorNaming(s: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider): B;
						public static findModules(classLoader: java.lang.ClassLoader): java.util.List<com.fasterxml.jackson.databind.Module>;
						public configure(feature: com.fasterxml.jackson.databind.MapperFeature, state: boolean): B;
						public enable(...features: com.fasterxml.jackson.core.StreamWriteFeature[]): B;
						public disable(...features: com.fasterxml.jackson.core.StreamReadFeature[]): B;
						public serializerFactory(f: com.fasterxml.jackson.databind.ser.SerializerFactory): B;
						public configure(feature: com.fasterxml.jackson.databind.SerializationFeature, state: boolean): B;
						public enable(...features: com.fasterxml.jackson.core.StreamReadFeature[]): B;
						public addHandler(h: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler): B;
						public addModules(...modules: com.fasterxml.jackson.databind.Module[]): B;
						public registerSubtypes(...subtypes: com.fasterxml.jackson.databind.jsontype.NamedType[]): B;
						public constructor(mapper: M);
						public serializationInclusion(incl: com.fasterxml.jackson.annotation.JsonInclude.Include): B;
						public enable(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): B;
						public withCoercionConfig(forType: com.fasterxml.jackson.databind.type.LogicalType, handler: any /* any*/): B;
						public disable(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): B;
						public injectableValues(v: com.fasterxml.jackson.databind.InjectableValues): B;
						public deactivateDefaultTyping(): B;
						public disable(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): B;
						public _this(): B;
						public enable(...features: com.fasterxml.jackson.databind.SerializationFeature[]): B;
						public addMixIn(target: java.lang.Class<any>, mixinSource: java.lang.Class<any>): B;
						public isEnabled(f: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
						public defaultAttributes(attrs: com.fasterxml.jackson.databind.cfg.ContextAttributes): B;
						public activateDefaultTyping(subtypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, includeAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As): B;
						public typeFactory(f: com.fasterxml.jackson.databind.type.TypeFactory): B;
						public addModule(module: com.fasterxml.jackson.databind.Module): B;
						public defaultPropertyInclusion(incl: com.fasterxml.jackson.annotation.JsonInclude.Value): B;
						public disable(...features: com.fasterxml.jackson.databind.MapperFeature[]): B;
						public handlerInstantiator(hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): B;
						public defaultLeniency(b: java.lang.Boolean): B;
						public activateDefaultTypingAsProperty(subtypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, applicability: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, propertyName: string): B;
						public withCoercionConfig(forType: java.lang.Class<any>, handler: any /* any*/): B;
						public constructorDetector(cd: com.fasterxml.jackson.databind.cfg.ConstructorDetector): B;
						public defaultTimeZone(tz: java.util.TimeZone): B;
						public defaultDateFormat(df: java.text.DateFormat): B;
						public enable(...features: com.fasterxml.jackson.databind.MapperFeature[]): B;
						public disable(...features: com.fasterxml.jackson.core.StreamWriteFeature[]): B;
						public clearProblemHandlers(): B;
						public annotationIntrospector(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): B;
						public visibility(vc: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): B;
						public visibility(forMethod: com.fasterxml.jackson.annotation.PropertyAccessor, visibility: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): B;
						public configure(feature: com.fasterxml.jackson.core.StreamReadFeature, state: boolean): B;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export abstract class MapperConfig<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.MapperConfig<any>>;
						public static EMPTY_INCLUDE: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public static EMPTY_FORMAT: com.fasterxml.jackson.annotation.JsonFormat.Value;
						public _mapperFeatures: number;
						public _base: com.fasterxml.jackson.databind.cfg.BaseSettings;
						public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
						public findConfigOverride(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public typeResolverBuilderInstance(annotated: com.fasterxml.jackson.databind.introspect.Annotated, builderClass: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public getPropertyNamingStrategy(): com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public getDefaultPropertyIgnorals(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public introspectDirectClassAnnotations(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
						public getDefaultMergeable(param0: java.lang.Class<any>): java.lang.Boolean;
						public introspectDirectClassAnnotations(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
						public constructType(valueTypeRef: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.JavaType;
						public findRootName(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.PropertyName;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<T>, mapperFeatures: number);
						public getBase64Variant(): com.fasterxml.jackson.core.Base64Variant;
						public getDefaultInclusion(baseType: java.lang.Class<any>, propertyType: java.lang.Class<any>, defaultIncl: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findRootName(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.PropertyName;
						public shouldSortPropertiesAlphabetically(): boolean;
						public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
						/** @deprecated */
						public hasMapperFeatures(featureMask: number): boolean;
						public getTypeFactory(): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<T>, base: com.fasterxml.jackson.databind.cfg.BaseSettings);
						public useRootWrapping(): boolean;
						public getPolymorphicTypeValidator(): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
						public getTimeZone(): java.util.TimeZone;
						public getClassIntrospector(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public getDefaultPropertyInclusion(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): T;
						public constructSpecializedType(baseType: com.fasterxml.jackson.databind.JavaType, subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getHandlerInstantiator(): com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
						public getDefaultPropertyInclusions(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
						public getAccessorNaming(): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider;
						public getLocale(): java.util.Locale;
						public getSubtypeResolver(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
						public introspectClassAnnotations(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.BeanDescription;
						public getDefaultMergeable(): java.lang.Boolean;
						public without(...param0: com.fasterxml.jackson.databind.MapperFeature[]): T;
						public canOverrideAccessModifiers(): boolean;
						public getDefaultPropertyInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getActiveView(): java.lang.Class<any>;
						public isAnnotationProcessingEnabled(): boolean;
						public compileString(src: string): com.fasterxml.jackson.core.SerializableString;
						public typeIdResolverInstance(annotated: com.fasterxml.jackson.databind.introspect.Annotated, resolverClass: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public getConfigOverride(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public introspectClassAnnotations(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.BeanDescription;
						public getDefaultSetterInfo(): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public getDateFormat(): java.text.DateFormat;
						public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public getDefaultVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
						public static collectFeatureDefaults(enumClass: java.lang.Class<any>): number;
						public getDefaultTyper(baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public getDefaultPropertyIgnorals(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public getDefaultVisibilityChecker(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<T>);
						public getDefaultInclusion(param0: java.lang.Class<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public with(...param0: com.fasterxml.jackson.databind.MapperFeature[]): T;
						public getDefaultPropertyInclusion(baseType: java.lang.Class<any>, defaultIncl: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public hasExplicitTimeZone(): boolean;
						public constructType(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, mapperFeatures: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export abstract class MapperConfigBase<CFG, T>  extends com.fasterxml.jackson.databind.cfg.MapperConfig<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>>;
						public static EMPTY_OVERRIDE: com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public _mixIns: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public _subtypeResolver: com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
						public _rootName: com.fasterxml.jackson.databind.PropertyName;
						public _view: java.lang.Class<any>;
						public _attributes: com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public _rootNames: com.fasterxml.jackson.databind.util.RootNameLookup;
						public _configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides;
						public getDefaultPropertyFormat(type: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver);
						public getDefaultVisibilityChecker(baseType: java.lang.Class<any>, actualClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public with(feature: com.fasterxml.jackson.databind.MapperFeature, state: boolean): any;
						/** @deprecated */
						public getRootName(): string;
						public getDefaultMergeable(baseType: java.lang.Class<any>): java.lang.Boolean;
						public getDefaultInclusion(baseType: java.lang.Class<any>, propertyType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findConfigOverride(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public findRootName(rootType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.PropertyName;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, attr: com.fasterxml.jackson.databind.cfg.ContextAttributes);
						public findConfigOverride(type: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, base: com.fasterxml.jackson.databind.cfg.BaseSettings);
						public getDefaultPropertyIgnorals(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public withoutAttribute(key: any): any;
						public with(param0: com.fasterxml.jackson.databind.jsontype.SubtypeResolver): any;
						public getDefaultMergeable(param0: java.lang.Class<any>): java.lang.Boolean;
						public withAppendedAnnotationIntrospector(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
						public findRootName(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.PropertyName;
						public with(p: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider): any;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
						public withRootName(param0: com.fasterxml.jackson.databind.PropertyName): any;
						public getDefaultPropertyInclusions(baseType: java.lang.Class<any>, actualClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
						public with(...param0: com.fasterxml.jackson.databind.MapperFeature[]): any;
						public with(tf: com.fasterxml.jackson.databind.type.TypeFactory): any;
						public getDefaultInclusion(baseType: java.lang.Class<any>, propertyType: java.lang.Class<any>, defaultIncl: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findRootName(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.PropertyName;
						public with(base64: com.fasterxml.jackson.core.Base64Variant): any;
						public withRootName(rootName: string): any;
						public withAttribute(key: any, value: any): any;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, mapperFeatures: number);
						public _withMapperFeatures(param0: number): any;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver);
						public getDefaultPropertyInclusion(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public with(param0: com.fasterxml.jackson.databind.MapperFeature, param1: boolean): any;
						public with(hi: com.fasterxml.jackson.databind.cfg.HandlerInstantiator): any;
						public findRootName(rawRootType: java.lang.Class<any>): com.fasterxml.jackson.databind.PropertyName;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, mapperFeatures: number);
						public getDefaultPropertyFormat(param0: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public with(ci: com.fasterxml.jackson.databind.introspect.ClassIntrospector): any;
						public withInsertedAnnotationIntrospector(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
						public getDefaultPropertyInclusions(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
						public getFullRootName(): com.fasterxml.jackson.databind.PropertyName;
						public with(df: java.text.DateFormat): any;
						public with(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
						public without(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
						public with(tz: java.util.TimeZone): any;
						public getSubtypeResolver(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
						public with(l: java.util.Locale): any;
						public getDefaultMergeable(): java.lang.Boolean;
						public with(pns: com.fasterxml.jackson.databind.PropertyNamingStrategy): any;
						public getDefaultPropertyInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getActiveView(): java.lang.Class<any>;
						public getConfigOverride(type: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public with(param0: com.fasterxml.jackson.databind.cfg.ContextAttributes): any;
						public getConfigOverride(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.ConfigOverride;
						public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
						public _withBase(param0: com.fasterxml.jackson.databind.cfg.BaseSettings): any;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, view: java.lang.Class<any>);
						public getDefaultSetterInfo(): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public getAttributes(): com.fasterxml.jackson.databind.cfg.ContextAttributes;
						public getDefaultVisibilityChecker(): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, base: com.fasterxml.jackson.databind.cfg.BaseSettings);
						public getDefaultPropertyIgnorals(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, str: com.fasterxml.jackson.databind.jsontype.SubtypeResolver, mixins: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, rootNames: com.fasterxml.jackson.databind.util.RootNameLookup, configOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverrides);
						public getDefaultVisibilityChecker(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>);
						public getDefaultInclusion(param0: java.lang.Class<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getDefaultPropertyInclusion(baseType: java.lang.Class<any>, defaultIncl: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public mixInCount(): number;
						public without(...param0: com.fasterxml.jackson.databind.MapperFeature[]): any;
						public withAttributes(attributes: java.util.Map<any,any>): any;
						public with(trb: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>): any;
						public withView(param0: java.lang.Class<any>): any;
						public getDefaultPropertyInclusion(baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findMixInClassFor(cls: java.lang.Class<any>): java.lang.Class<any>;
						public getDefaultPropertyIgnorals(baseType: java.lang.Class<any>, actualClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MapperConfigBase<any,any>, rootName: com.fasterxml.jackson.databind.PropertyName);
						public getDefaultPropertyIgnorals(type: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public constructor(base: com.fasterxml.jackson.databind.cfg.BaseSettings, mapperFeatures: number);
						public with(ai: com.fasterxml.jackson.databind.AnnotationIntrospector): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class MutableCoercionConfig extends com.fasterxml.jackson.databind.cfg.CoercionConfig implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.MutableCoercionConfig>;
						public constructor();
						public constructor(src: com.fasterxml.jackson.databind.cfg.MutableCoercionConfig);
						public copy(): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
						public setCoercion(shape: com.fasterxml.jackson.databind.cfg.CoercionInputShape, action: com.fasterxml.jackson.databind.cfg.CoercionAction): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
						public constructor(src: com.fasterxml.jackson.databind.cfg.CoercionConfig);
						public setAcceptBlankAsEmpty(state: java.lang.Boolean): com.fasterxml.jackson.databind.cfg.MutableCoercionConfig;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class MutableConfigOverride extends com.fasterxml.jackson.databind.cfg.ConfigOverride implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.MutableConfigOverride>;
						public constructor(src: com.fasterxml.jackson.databind.cfg.MutableConfigOverride);
						public constructor();
						public setVisibility(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Value): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public setIsIgnoredType(v: java.lang.Boolean): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public copy(): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public setFormat(v: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public setSetterInfo(v: com.fasterxml.jackson.annotation.JsonSetter.Value): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public constructor(src: com.fasterxml.jackson.databind.cfg.ConfigOverride);
						public setIgnorals(v: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public setIncludeAsProperty(v: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public setMergeable(v: java.lang.Boolean): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
						public setInclude(v: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class PackageVersion extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.PackageVersion>;
						public static VERSION: com.fasterxml.jackson.core.Version;
						public constructor();
						public version(): com.fasterxml.jackson.core.Version;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module cfg {
					export class SerializerFactoryConfig extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig>;
						public static NO_SERIALIZERS: com.fasterxml.jackson.databind.ser.Serializers[];
						public static NO_MODIFIERS: com.fasterxml.jackson.databind.ser.BeanSerializerModifier[];
						public _additionalSerializers: com.fasterxml.jackson.databind.ser.Serializers[];
						public _additionalKeySerializers: com.fasterxml.jackson.databind.ser.Serializers[];
						public _modifiers: com.fasterxml.jackson.databind.ser.BeanSerializerModifier[];
						public withAdditionalSerializers(additional: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public hasKeySerializers(): boolean;
						public constructor();
						public withAdditionalKeySerializers(additional: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public hasSerializerModifiers(): boolean;
						public serializerModifiers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.BeanSerializerModifier>;
						public hasSerializers(): boolean;
						public keySerializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
						public constructor(allAdditionalSerializers: com.fasterxml.jackson.databind.ser.Serializers[], allAdditionalKeySerializers: com.fasterxml.jackson.databind.ser.Serializers[], modifiers: com.fasterxml.jackson.databind.ser.BeanSerializerModifier[]);
						public withSerializerModifier(modifier: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public serializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class AbstractDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.AbstractDeserializer>;
						public _baseType: com.fasterxml.jackson.databind.JavaType;
						public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public _backRefProperties: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _properties: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _acceptString: boolean;
						public _acceptBoolean: boolean;
						public _acceptInt: boolean;
						public _acceptDouble: boolean;
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, backRefProps: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, props: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
						/** @deprecated */
						public getNullValue(): any;
						/** @deprecated */
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, backRefProps: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
						public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
						public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
						public findBackReference(refName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
						public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
						public _deserializeIfNatural(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public findBackReference(logicalName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public handledType(): java.lang.Class<any>;
						public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor();
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public static constructForNonPOJO(beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.AbstractDeserializer;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(beanDesc: com.fasterxml.jackson.databind.BeanDescription);
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public isCachable(): boolean;
						public constructor(base: com.fasterxml.jackson.databind.deser.AbstractDeserializer, objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader, props: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
						public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public _deserializeFromObjectId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class BasicDeserializerFactory extends com.fasterxml.jackson.databind.deser.DeserializerFactory implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory>;
						public static UNWRAPPED_CREATOR_PARAM_NAME: com.fasterxml.jackson.databind.PropertyName;
						public _factoryConfig: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public _validateNamedPropertyParameter(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, candidate: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate, paramIndex: number, name: com.fasterxml.jackson.databind.PropertyName, injectId: com.fasterxml.jackson.annotation.JacksonInject.Value): void;
						public _findCustomBeanDeserializer(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						/** @deprecated */
						public _findJsonValueFor(config: com.fasterxml.jackson.databind.DeserializationConfig, enumType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public withAbstractTypeResolver(resolver: com.fasterxml.jackson.databind.AbstractTypeResolver): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public findDefaultDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findCustomTreeNodeDeserializer(type: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createCollectionDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createArrayDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public _mapAbstractCollectionType(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.type.CollectionType;
						public resolveMemberAndTypeAnnotations(ctxt: com.fasterxml.jackson.databind.DeserializationContext, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public _findCustomMapDeserializer(type: com.fasterxml.jackson.databind.type.MapType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						/** @deprecated */
						public modifyTypeByAnnotation(ctxt: com.fasterxml.jackson.databind.DeserializationContext, a: com.fasterxml.jackson.databind.introspect.Annotated, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public createMapLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public findValueInstantiator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _findCustomReferenceDeserializer(type: com.fasterxml.jackson.databind.type.ReferenceType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contentDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _addExplicitPropertyCreator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, creators: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, candidate: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate): void;
						public constructor();
						public _findCustomCollectionDeserializer(type: com.fasterxml.jackson.databind.type.CollectionType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createMapDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createMapDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.type.MapType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createKeyDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public createReferenceDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findTypeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public createCollectionLikeDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.type.CollectionLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findPropertyContentTypeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, containerType: com.fasterxml.jackson.databind.JavaType, propertyEntity: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public createTreeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findOptionalStdDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructEnumResolver(enumClass: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, jsonValueAccessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.EnumResolver;
						public findPropertyTypeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, baseType: com.fasterxml.jackson.databind.JavaType, annotated: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public withAdditionalKeyDeserializers(additional: com.fasterxml.jackson.databind.deser.KeyDeserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _addExplicitConstructorCreators(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ccState: com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.CreatorCollectionState, findImplicit: boolean): void;
						public hasExplicitDeserializerFor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: java.lang.Class<any>): boolean;
						public createTreeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, nodeType: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withAdditionalDeserializers(additional: com.fasterxml.jackson.databind.deser.Deserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public withDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _addExplicitFactoryCreators(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ccState: com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.CreatorCollectionState, findImplicit: boolean): void;
						public createCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withDeserializerModifier(modifier: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _findCustomEnumDeserializer(type: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createMapLikeDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.type.MapLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createEnumDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(config: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig);
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _valueInstantiatorInstance(config: com.fasterxml.jackson.databind.DeserializationConfig, annotated: com.fasterxml.jackson.databind.introspect.Annotated, instDef: any): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _findCustomCollectionLikeDeserializer(type: com.fasterxml.jackson.databind.type.CollectionLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findContentDeserializerFromAnnotation(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withAdditionalKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public withAdditionalDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _findRemappedType(config: com.fasterxml.jackson.databind.DeserializationConfig, rawType: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public _addExplicitAnyCreator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, creators: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, candidate: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate): void;
						public createEnumDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withValueInstantiators(instantiators: com.fasterxml.jackson.databind.deser.ValueInstantiators): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _addRecordConstructor(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ccState: com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.CreatorCollectionState, canonical: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor, implicitNames: java.util.List<string>): void;
						/** @deprecated */
						public resolveType(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, type: com.fasterxml.jackson.databind.JavaType, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.JavaType;
						public mapAbstractType(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public _addImplicitFactoryCreators(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ccState: com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.CreatorCollectionState, factoryCandidates: java.util.List<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate>): void;
						public _mapAbstractMapType(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.type.MapType;
						public _addExplicitAnyCreator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, creators: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, candidate: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate, ctorDetector: com.fasterxml.jackson.databind.cfg.ConstructorDetector): void;
						public findDeserializerFromAnnotation(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public getFactoryConfig(): com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
						public createReferenceDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.type.ReferenceType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createArrayDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.type.ArrayType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public hasExplicitDeserializerFor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: java.lang.Class<any>): boolean;
						public createCollectionDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.type.CollectionType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _constructDefaultValueInstantiator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public withAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _findCustomMapLikeDeserializer(type: com.fasterxml.jackson.databind.type.MapLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findCustomArrayDeserializer(type: com.fasterxml.jackson.databind.type.ArrayType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructCreatorProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, name: com.fasterxml.jackson.databind.PropertyName, index: number, param: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, injectable: com.fasterxml.jackson.annotation.JacksonInject.Value): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _addExplicitDelegatingCreator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, creators: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, candidate: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate): void;
						public findKeyDeserializerFromAnnotation(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.KeyDeserializer;
						public _findCreatorsFromProperties(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription): java.util.Map<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]>;
						public _addImplicitConstructorCreators(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ccState: com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.CreatorCollectionState, ctorCandidates: java.util.List<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate>): void;
						public _handleSingleArgumentCreator(creators: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, ctor: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, isCreator: boolean, isVisible: boolean): boolean;
						public _getSetterInfo(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.BeanProperty, metadata: com.fasterxml.jackson.databind.PropertyMetadata): com.fasterxml.jackson.databind.PropertyMetadata;
						public _reportUnwrappedCreatorProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, param: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): void;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public mapAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public _hasCreatorAnnotation(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ann: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
					}
					export module BasicDeserializerFactory {
						export class ContainerDefaultMappings extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.ContainerDefaultMappings>;
							public constructor();
							public static findMapFallback(type: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
							public static findCollectionFallback(type: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						}
						export class CreatorCollectionState extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.CreatorCollectionState>;
							public context: com.fasterxml.jackson.databind.DeserializationContext;
							public beanDesc: com.fasterxml.jackson.databind.BeanDescription;
							public vchecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
							public creators: com.fasterxml.jackson.databind.deser.impl.CreatorCollector;
							public creatorParams: java.util.Map<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]>;
							public increaseExplicitConstructorCount(): void;
							public implicitConstructorCandidates(): java.util.List<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate>;
							public addImplicitFactoryCandidate(cc: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate): void;
							public addImplicitConstructorCandidate(cc: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate): void;
							public hasImplicitConstructorCandidates(): boolean;
							public hasImplicitFactoryCandidates(): boolean;
							public hasExplicitConstructors(): boolean;
							public increaseExplicitFactoryCount(): void;
							public annotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
							public hasExplicitFactories(): boolean;
							public constructor(ctxt: com.fasterxml.jackson.databind.DeserializationContext, bd: com.fasterxml.jackson.databind.BeanDescription, vc: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>, cc: com.fasterxml.jackson.databind.deser.impl.CreatorCollector, cp: java.util.Map<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]>);
							public implicitFactoryCandidates(): java.util.List<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class BeanDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializer>;
						public _nullFromCreator: java.lang.Exception;
						/** @deprecated */
						public getNullValue(): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public withObjectIdReader(oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializer;
						public _deserializeWithErrorWrapping(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): any;
						public deserializeUsingPropertyBasedWithUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _deserializeUsingPropertyBased(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						/** @deprecated */
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.HashSet<string>, ignoreAllUnknown: boolean, hasViews: boolean);
						/** @deprecated */
						public _missingToken(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, beanProps: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
						public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
						public constructor();
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
						public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public unwrappingDeserializer(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _deserializeOther(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, t: com.fasterxml.jackson.core.JsonToken): any;
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeWithExternalTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
						public deserializeUsingPropertyBasedWithExternalTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withBeanProperties(props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignoreAllUnknown: boolean);
						public deserializeWithView(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, activeView: java.lang.Class<any>): any;
						public _deserializeWithExternalTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, ext: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler): any;
						public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _creatorReturnedNullException(): java.lang.Exception;
						public withIgnoreAllUnknown(param0: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeWithExternalTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): any;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(vc: java.lang.Class<any>);
						public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromNull(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						/** @deprecated */
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>);
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
						public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.HashSet<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): any;
						public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
						public deserializeFromObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withIgnoreAllUnknown(ignoreUnknown: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public withByNameInclusion(ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializer;
						public deserializeWithUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>);
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public deserializeWithUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): any;
					}
					export module BeanDeserializer {
						export class BeanReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring>;
							public handleResolvedForwardReference(id: any, value: any): void;
							public setBean(bean: any): void;
							public handleResolvedForwardReference(param0: any, param1: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class BeanDeserializerBase extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerBase>;
						public static TEMP_PROPERTY_NAME: com.fasterxml.jackson.databind.PropertyName;
						public _beanType: com.fasterxml.jackson.databind.JavaType;
						public _serializationShape: com.fasterxml.jackson.annotation.JsonFormat.Shape;
						public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _arrayDelegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _propertyBasedCreator: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
						public _nonStandardCreation: boolean;
						public _vanillaProcessing: boolean;
						public _beanProperties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
						public _injectables: com.fasterxml.jackson.databind.deser.impl.ValueInjector[];
						public _anySetter: com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public _ignorableProps: java.util.Set<string>;
						public _includableProps: java.util.Set<string>;
						public _ignoreAllUnknown: boolean;
						public _needViewProcesing: boolean;
						public _backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _subDeserializers: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public _unwrappedPropertyHandler: com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler;
						public _externalTypeIdHandler: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
						public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						/** @deprecated */
						public getNullValue(): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public wrapAndThrow(t: java.lang.Throwable, bean: any, fieldName: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
						public getPropertyCount(): number;
						public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
						public findBackReference(refName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public properties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _resolveMergeAndNullSettings(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty, propMetadata: com.fasterxml.jackson.databind.PropertyMetadata): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public unwrappingDeserializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _resolveInnerClassValuedProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public deserializeFromDouble(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromEmbedded(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _resolvedObjectIdProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _handleTypedObjectId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, pojo: any, rawId: any): any;
						public deserializeFromNumber(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, beanProps: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
						public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						public findProperty(propertyName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public findBackReference(logicalName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public injectValues(ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): void;
						/** @deprecated */
						public getBeanClass(): java.lang.Class<any>;
						public deserializeFromObjectId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
						public getValueType(): com.fasterxml.jackson.databind.JavaType;
						public _replaceProperty(props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, creatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], origProp: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newProp: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public constructor();
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
						public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public getValueType(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JavaType;
						public deserializeWithObjectId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						/** @deprecated */
						public withIgnorableProperties(ignorableProps: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public handlePolymorphic(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, unknownTokens: com.fasterxml.jackson.databind.util.TokenBuffer): any;
						public hasProperty(propertyName: string): boolean;
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public isCachable(): boolean;
						public isCaseInsensitive(): boolean;
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withBeanProperties(props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						public handleUnknownProperty(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanOrClass: any, propName: string): void;
						public wrapInstantiationProblem(t: java.lang.Throwable, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignoreAllUnknown: boolean);
						/** @deprecated */
						public deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public findProperty(propertyName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _findSubclassDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, unknownTokens: com.fasterxml.jackson.databind.util.TokenBuffer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
						public _convertObjectId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, rawId: any, idDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>): any;
						public withIgnoreAllUnknown(param0: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
						public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public hasViews(): boolean;
						public _handleByNameInclusion(ctxt: com.fasterxml.jackson.databind.DeserializationContext, intr: com.fasterxml.jackson.databind.AnnotationIntrospector, contextual: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public deserializeFromObjectUsingNonDefault(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _delegateDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(vc: java.lang.Class<any>);
						public handleUnknownVanilla(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanOrBuilder: any, propName: string): void;
						public handleIgnoredProperty(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanOrClass: any, propName: string): void;
						public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public handledType(): java.lang.Class<any>;
						public getKnownPropertyNames(): java.util.Collection<any>;
						public findProperty(propertyIndex: number): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public handleUnknownProperty(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instanceOrClass: any, propName: string): void;
						/** @deprecated */
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>);
						public deserializeFromString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
						public _resolveManagedReferenceProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _findPropertyUnwrapper(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.util.NameTransformer;
						public deserializeFromBoolean(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
						public replaceProperty(original: com.fasterxml.jackson.databind.deser.SettableBeanProperty, replacement: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public findConvertingDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public handleUnknownProperties(ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, unknownTokens: com.fasterxml.jackson.databind.util.TokenBuffer): any;
						/** @deprecated */
						public getEmptyValue(): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>);
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public creatorProperties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class BeanDeserializerBuilder extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder>;
						public _config: com.fasterxml.jackson.databind.DeserializationConfig;
						public _context: com.fasterxml.jackson.databind.DeserializationContext;
						public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
						public _properties: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _injectables: java.util.List<com.fasterxml.jackson.databind.deser.impl.ValueInjector>;
						public _backRefProperties: java.util.HashMap<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _ignorableProps: java.util.HashSet<string>;
						public _includableProps: java.util.HashSet<string>;
						public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public _anySetter: com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public _ignoreAllUnknown: boolean;
						public _buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _builderConfig: com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public setAnySetter(s: com.fasterxml.jackson.databind.deser.SettableAnyProperty): void;
						public _fixAccess(mainProps: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): void;
						public getBuilderConfig(): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public addIncludable(propName: string): void;
						public buildBuilderBased(valueType: com.fasterxml.jackson.databind.JavaType, expBuildMethodName: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addCreatorProperty(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public getInjectables(): java.util.List<com.fasterxml.jackson.databind.deser.impl.ValueInjector>;
						public setValueInstantiator(inst: com.fasterxml.jackson.databind.deser.ValueInstantiator): void;
						public getBuildMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public build(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findCaseInsensitivity(): boolean;
						public hasIgnorable(name: string): boolean;
						public buildAbstract(): com.fasterxml.jackson.databind.deser.AbstractDeserializer;
						public addBackReferenceProperty(referenceName: string, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public findProperty(propertyName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public constructor(beanDesc: com.fasterxml.jackson.databind.BeanDescription, ctxt: com.fasterxml.jackson.databind.DeserializationContext);
						public hasProperty(propertyName: com.fasterxml.jackson.databind.PropertyName): boolean;
						public removeProperty(name: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public getAnySetter(): com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public setIgnoreUnknownProperties(ignore: boolean): void;
						public addProperty(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public setObjectIdReader(r: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): void;
						public addIgnorable(propName: string): void;
						public getProperties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public _handleBadAccess(e0: java.lang.IllegalArgumentException): void;
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public createBuilderBasedDeserializer(valueType: com.fasterxml.jackson.databind.JavaType, propertyMap: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, anyViews: boolean): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder);
						public _collectAliases(props: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): java.util.Map<string,java.util.List<com.fasterxml.jackson.databind.PropertyName>>;
						public addOrReplaceProperty(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty, allowOverride: boolean): void;
						public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
						public setPOJOBuilder(buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, config: com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value): void;
						public addInjectable(propName: com.fasterxml.jackson.databind.PropertyName, propType: com.fasterxml.jackson.databind.JavaType, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, valueId: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class BeanDeserializerFactory extends com.fasterxml.jackson.databind.deser.BasicDeserializerFactory implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory>;
						public static instance: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
						/** @deprecated */
						public addReferenceProperties(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public addBeanProps(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						/** @deprecated */
						public filterBeanProps(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, propDefsIn: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>, ignored: java.util.Set<string>): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public addBackReferenceProperties(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public constructBeanDeserializerBuilder(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
						public materializeAbstractType(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JavaType;
						public createBeanDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withConfig(config: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public constructor();
						public buildThrowableDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructSetterlessProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public createBuilderBasedDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public isIgnorableType(config: com.fasterxml.jackson.databind.DeserializationConfig, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: java.lang.Class<any>, ignoredTypes: java.util.Map<java.lang.Class<any>,java.lang.Boolean>): boolean;
						public addInjectables(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public constructSettableProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, propType0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public buildBuilderBasedDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, valueType: com.fasterxml.jackson.databind.JavaType, builderDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addObjectIdReader(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): void;
						public constructAnySetter(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, mutator: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public createBeanDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findStdDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public isPotentialBeanType(type: java.lang.Class<any>): boolean;
						public buildBeanDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _findUnsupportedTypeDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public filterBeanProps(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, propDefsIn: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>, ignored: java.util.Set<string>, included: java.util.Set<string>): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public constructor(config: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig);
						public _validateSubType(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): void;
						public createBuilderBasedDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, valueType: com.fasterxml.jackson.databind.JavaType, valueBeanDesc: com.fasterxml.jackson.databind.BeanDescription, builderClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class BeanDeserializerModifier extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BeanDeserializerModifier>;
						public updateBuilder(config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder): com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
						public constructor();
						public modifyArrayDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: com.fasterxml.jackson.databind.type.ArrayType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyCollectionLikeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.type.CollectionLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyKeyDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType, deserializer: com.fasterxml.jackson.databind.KeyDeserializer): com.fasterxml.jackson.databind.KeyDeserializer;
						public modifyDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyEnumDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public updateProperties(config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, propDefs: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public modifyReferenceDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.type.ReferenceType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyCollectionDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.type.CollectionType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyMapDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.type.MapType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public modifyMapLikeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.type.MapLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class BuilderBasedDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer>;
						public _buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _targetType: com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, hasViews: boolean);
						/** @deprecated */
						public getNullValue(): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						public deserializeUsingPropertyBasedWithUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _deserializeUsingPropertyBased(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public withByNameInclusion(ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public unwrappingDeserializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, builder: any): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, ignoreAllUnknown: boolean);
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, beanProps: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
						public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
						public constructor();
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, targetType: com.fasterxml.jackson.databind.JavaType, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
						public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeWithExternalTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, targetType: com.fasterxml.jackson.databind.JavaType, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, hasViews: boolean);
						public withObjectIdReader(oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
						public deserializeUsingPropertyBasedWithExternalTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withBeanProperties(props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public constructor(src: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, ignorableProps: java.util.Set<string>);
						public constructor(src: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignoreAllUnknown: boolean);
						public finishBuild(ctxt: com.fasterxml.jackson.databind.DeserializationContext, builder: any): any;
						public deserializeWithView(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, activeView: java.lang.Class<any>): any;
						public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
						public deserializeWithUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, builder: any, tokens: com.fasterxml.jackson.databind.util.TokenBuffer): any;
						public withIgnoreAllUnknown(param0: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeWithExternalTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): any;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(vc: java.lang.Class<any>);
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: any): any;
						public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						/** @deprecated */
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>);
						public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
						public constructor(src: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer, ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>);
						public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
						public constructor(src: com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer);
						public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
						public deserializeFromObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public withIgnoreAllUnknown(ignoreUnknown: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
						public deserializeWithUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>);
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class ContextualDeserializer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ContextualDeserializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ContextualDeserializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						});
						public constructor();
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class ContextualKeyDeserializer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ContextualKeyDeserializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ContextualKeyDeserializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.KeyDeserializer;
						});
						public constructor();
						public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.KeyDeserializer;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class CreatorProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.CreatorProperty>;
						public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public _injectableValue: com.fasterxml.jackson.annotation.JacksonInject.Value;
						public _fallbackSetter: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public _creatorIndex: number;
						public _ignorable: boolean;
						public constructor(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapperName: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, param: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, index: number, injectable: com.fasterxml.jackson.annotation.JacksonInject.Value, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
						public isRequired(): boolean;
						public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
						public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						/** @deprecated */
						public inject(context: com.fasterxml.jackson.databind.DeserializationContext, beanInstance: any): void;
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public setAndReturn(param0: any, param1: any): any;
						public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
						public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static construct(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapperName: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, param: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, index: number, injectable: com.fasterxml.jackson.annotation.JacksonInject.Value, metadata: com.fasterxml.jackson.databind.PropertyMetadata): com.fasterxml.jackson.databind.deser.CreatorProperty;
						public withNullProvider(nva: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
						public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public toString(): string;
						public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
						public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public getInjectableValueId(): any;
						/** @deprecated */
						public findInjectableValue(context: com.fasterxml.jackson.databind.DeserializationContext, beanInstance: any): any;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public setAndReturn(instance: any, value: any): any;
						public set(param0: any, param1: any): void;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public markAsIgnorable(): void;
						public isIgnorable(): boolean;
						public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
						public constructor(src: com.fasterxml.jackson.databind.deser.CreatorProperty, newName: com.fasterxml.jackson.databind.PropertyName);
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
						public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						public getCreatorIndex(): number;
						public isInjectionOnly(): boolean;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
						/** @deprecated */
						public constructor(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapperName: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, param: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, index: number, injectableValueId: any, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
						public setFallbackSetter(fallbackSetter: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
						public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public constructor(src: com.fasterxml.jackson.databind.deser.CreatorProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nva: com.fasterxml.jackson.databind.deser.NullValueProvider);
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public set(instance: any, value: any): void;
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class DataFormatReaders extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DataFormatReaders>;
						public static DEFAULT_MAX_INPUT_LOOKAHEAD: number;
						public _readers: com.fasterxml.jackson.databind.ObjectReader[];
						public _optimalMatch: com.fasterxml.jackson.core.format.MatchStrength;
						public _minimalMatch: com.fasterxml.jackson.core.format.MatchStrength;
						public _maxInputLookahead: number;
						public with(readers: com.fasterxml.jackson.databind.ObjectReader[]): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public withType(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public with(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public withMinimalMatch(minMatch: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public findFormat(_in_: java.io.InputStream): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
						public findFormat(fullInputData: number[]): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
						public constructor(detectors: java.util.Collection<com.fasterxml.jackson.databind.ObjectReader>);
						public findFormat(fullInputData: number[], offset: number, len: number): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
						public withMaxInputLookahead(lookaheadBytes: number): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public constructor(...detectors: com.fasterxml.jackson.databind.ObjectReader[]);
						public withOptimalMatch(optMatch: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.databind.deser.DataFormatReaders;
						public toString(): string;
					}
					export module DataFormatReaders {
						export class AccessorForReader {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DataFormatReaders.AccessorForReader>;
							public constructor(inputDocument: number[], start: number, len: number);
							public constructor(_in_: java.io.InputStream, buffer: number[]);
							public constructor(inputDocument: number[]);
							public createMatcher(match: com.fasterxml.jackson.databind.ObjectReader, matchStrength: com.fasterxml.jackson.core.format.MatchStrength): com.fasterxml.jackson.databind.deser.DataFormatReaders.Match;
						}
						export class Match extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DataFormatReaders.Match>;
							public _originalStream: java.io.InputStream;
							public _bufferedData: number[];
							public _bufferedStart: number;
							public _bufferedLength: number;
							public _match: com.fasterxml.jackson.databind.ObjectReader;
							public _matchStrength: com.fasterxml.jackson.core.format.MatchStrength;
							public hasMatch(): boolean;
							public createParserWithMatch(): com.fasterxml.jackson.core.JsonParser;
							public constructor(_in_: java.io.InputStream, buffered: number[], bufferedStart: number, bufferedLength: number, match: com.fasterxml.jackson.databind.ObjectReader, strength: com.fasterxml.jackson.core.format.MatchStrength);
							public getReader(): com.fasterxml.jackson.databind.ObjectReader;
							public getMatchedFormatName(): string;
							public getDataStream(): java.io.InputStream;
							public getMatchStrength(): com.fasterxml.jackson.core.format.MatchStrength;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class DefaultDeserializationContext extends com.fasterxml.jackson.databind.DeserializationContext implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext>;
						public _objectIds: java.util.LinkedHashMap<com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey,com.fasterxml.jackson.databind.deser.impl.ReadableObjectId>;
						public findObjectId(id: any, gen: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, resolverType: com.fasterxml.jackson.annotation.ObjectIdResolver): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public keyDeserializerInstance(ann: com.fasterxml.jackson.databind.introspect.Annotated, deserDef: any): com.fasterxml.jackson.databind.KeyDeserializer;
						public deserializerInstance(ann: com.fasterxml.jackson.databind.introspect.Annotated, deserDef: any): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(src: com.fasterxml.jackson.databind.DeserializationContext);
						public constructor(df: com.fasterxml.jackson.databind.deser.DeserializerFactory, cache: com.fasterxml.jackson.databind.deser.DeserializerCache);
						public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory);
						public tryToResolveUnresolvedObjectId(roid: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId): boolean;
						public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig, p: com.fasterxml.jackson.core.JsonParser, injectableValues: com.fasterxml.jackson.databind.InjectableValues);
						public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext);
						public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, param2: com.fasterxml.jackson.annotation.ObjectIdResolver): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public keyDeserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.KeyDeserializer;
						public createInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.core.JsonParser, param2: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
						public constructor();
						public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory);
						public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig, p: com.fasterxml.jackson.core.JsonParser, values: com.fasterxml.jackson.databind.InjectableValues);
						public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig);
						public checkUnresolvedObjectId(): void;
						public with(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
						public deserializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createDummyInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
						public createReadableObjectId(key: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public constructor(df: com.fasterxml.jackson.databind.deser.DeserializerFactory);
						public readRootValue(p: com.fasterxml.jackson.core.JsonParser, valueType: com.fasterxml.jackson.databind.JavaType, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueToUpdate: any): any;
						public _unwrapAndDeserialize(p: com.fasterxml.jackson.core.JsonParser, rootType: com.fasterxml.jackson.databind.JavaType, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueToUpdate: any): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig);
						public copy(): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
					}
					export module DefaultDeserializationContext {
						export class Impl extends com.fasterxml.jackson.databind.deser.DefaultDeserializationContext {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl>;
							public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory);
							public constructor();
							public with(param0: com.fasterxml.jackson.databind.deser.DeserializerFactory): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory);
							public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig, p: com.fasterxml.jackson.core.JsonParser, values: com.fasterxml.jackson.databind.InjectableValues);
							public createDummyInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public constructor(src: com.fasterxml.jackson.databind.DeserializationContext);
							public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig);
							public with(factory: com.fasterxml.jackson.databind.deser.DeserializerFactory): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public constructor(src: com.fasterxml.jackson.databind.DeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig, p: com.fasterxml.jackson.core.JsonParser, injectableValues: com.fasterxml.jackson.databind.InjectableValues);
							public createDummyInstance(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public copy(): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext);
							public constructor(src: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, config: com.fasterxml.jackson.databind.DeserializationConfig);
							public createInstance(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.core.JsonParser, param2: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public createInstance(config: com.fasterxml.jackson.databind.DeserializationConfig, p: com.fasterxml.jackson.core.JsonParser, values: com.fasterxml.jackson.databind.InjectableValues): com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
							public constructor(df: com.fasterxml.jackson.databind.deser.DeserializerFactory);
							public constructor(df: com.fasterxml.jackson.databind.deser.DeserializerFactory, cache: com.fasterxml.jackson.databind.deser.DeserializerCache);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class DeserializationProblemHandler extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DeserializationProblemHandler>;
						public static NOT_HANDLED: any;
						public handleMissingTypeId(ctxt: com.fasterxml.jackson.databind.DeserializationContext, baseType: com.fasterxml.jackson.databind.JavaType, idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, failureMsg: string): com.fasterxml.jackson.databind.JavaType;
						public constructor();
						public handleUnknownTypeId(ctxt: com.fasterxml.jackson.databind.DeserializationContext, baseType: com.fasterxml.jackson.databind.JavaType, subTypeId: string, idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, failureMsg: string): com.fasterxml.jackson.databind.JavaType;
						public handleWeirdNativeValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: com.fasterxml.jackson.databind.JavaType, valueToConvert: any, p: com.fasterxml.jackson.core.JsonParser): any;
						public handleWeirdNumberValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: java.lang.Class<any>, valueToConvert: java.lang.Number, failureMsg: string): any;
						/** @deprecated */
						public handleUnexpectedToken(ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: java.lang.Class<any>, t: com.fasterxml.jackson.core.JsonToken, p: com.fasterxml.jackson.core.JsonParser, failureMsg: string): any;
						public handleMissingInstantiator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, instClass: java.lang.Class<any>, valueInsta: com.fasterxml.jackson.databind.deser.ValueInstantiator, p: com.fasterxml.jackson.core.JsonParser, msg: string): any;
						public handleWeirdKey(ctxt: com.fasterxml.jackson.databind.DeserializationContext, rawKeyType: java.lang.Class<any>, keyValue: string, failureMsg: string): any;
						public handleUnknownProperty(ctxt: com.fasterxml.jackson.databind.DeserializationContext, p: com.fasterxml.jackson.core.JsonParser, deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>, beanOrClass: any, propertyName: string): boolean;
						public handleInstantiationProblem(ctxt: com.fasterxml.jackson.databind.DeserializationContext, instClass: java.lang.Class<any>, argument: any, t: java.lang.Throwable): any;
						public handleWeirdStringValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: java.lang.Class<any>, valueToConvert: string, failureMsg: string): any;
						public handleUnexpectedToken(ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: com.fasterxml.jackson.databind.JavaType, t: com.fasterxml.jackson.core.JsonToken, p: com.fasterxml.jackson.core.JsonParser, failureMsg: string): any;
						/** @deprecated */
						public handleMissingInstantiator(ctxt: com.fasterxml.jackson.databind.DeserializationContext, instClass: java.lang.Class<any>, p: com.fasterxml.jackson.core.JsonParser, msg: string): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class DeserializerCache extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DeserializerCache>;
						public _cachedDeserializers: com.fasterxml.jackson.databind.util.LRUMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public _incompleteDeserializers: java.util.HashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public _createAndCache2(ctxt: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _createDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findConvertingDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, a: com.fasterxml.jackson.databind.introspect.Annotated, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public findConverter(ctxt: com.fasterxml.jackson.databind.DeserializationContext, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public _handleUnknownValueDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findKeyDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public _findCachedDeserializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _handleUnknownKeyDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public cachedDeserializersCount(): number;
						public _createDeserializer2(ctxt: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findDeserializerFromAnnotation(ctxt: com.fasterxml.jackson.databind.DeserializationContext, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findValueDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory, propertyType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(maxSize: number);
						public flushCachedDeserializers(): void;
						public hasValueDeserializerFor(ctxt: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory, type: com.fasterxml.jackson.databind.JavaType): boolean;
						public _createAndCacheValueDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, factory: com.fasterxml.jackson.databind.deser.DeserializerFactory, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class DeserializerFactory extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.DeserializerFactory>;
						public static NO_DESERIALIZERS: com.fasterxml.jackson.databind.deser.Deserializers[];
						public withAdditionalKeyDeserializers(param0: com.fasterxml.jackson.databind.deser.KeyDeserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public constructor();
						public createMapDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public withAdditionalDeserializers(param0: com.fasterxml.jackson.databind.deser.Deserializers): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public createBuilderBasedDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createReferenceDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createCollectionDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createEnumDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createTreeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createArrayDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createKeyDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
						public withDeserializerModifier(param0: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public createCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createBeanDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public createMapLikeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public hasExplicitDeserializerFor(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: java.lang.Class<any>): boolean;
						public mapAbstractType(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public findTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public withValueInstantiators(param0: com.fasterxml.jackson.databind.deser.ValueInstantiators): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public withAbstractTypeResolver(param0: com.fasterxml.jackson.databind.AbstractTypeResolver): com.fasterxml.jackson.databind.deser.DeserializerFactory;
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class Deserializers extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.Deserializers>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.Deserializers interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							hasDeserializerFor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: java.lang.Class<any>): boolean;
						});
						public constructor();
						public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public hasDeserializerFor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: java.lang.Class<any>): boolean;
						public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
					export module Deserializers {
						export abstract class Base extends java.lang.Object implements com.fasterxml.jackson.databind.deser.Deserializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.Deserializers.Base>;
							public constructor();
							public findCollectionDeserializer(type: com.fasterxml.jackson.databind.type.CollectionType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findTreeNodeDeserializer(nodeType: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public hasDeserializerFor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: java.lang.Class<any>): boolean;
							public findArrayDeserializer(type: com.fasterxml.jackson.databind.type.ArrayType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findMapDeserializer(type: com.fasterxml.jackson.databind.type.MapType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findReferenceDeserializer(refType: com.fasterxml.jackson.databind.type.ReferenceType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contentDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findBeanDeserializer(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findEnumDeserializer(type: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findMapLikeDeserializer(type: com.fasterxml.jackson.databind.type.MapLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findCollectionLikeDeserializer(type: com.fasterxml.jackson.databind.type.CollectionLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class KeyDeserializers extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.KeyDeserializers>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.KeyDeserializers interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
						});
						public constructor();
						public findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class NullValueProvider extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.NullValueProvider>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.NullValueProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						});
						public constructor();
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class ResolvableDeserializer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ResolvableDeserializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ResolvableDeserializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
						});
						public constructor();
						public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class SettableAnyProperty extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.SettableAnyProperty>;
						public _property: com.fasterxml.jackson.databind.BeanProperty;
						public _setter: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public _keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer;
						public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public getProperty(): com.fasterxml.jackson.databind.BeanProperty;
						public set(instance: any, propName: any, value: any): void;
						public hasValueDeserializer(): boolean;
						public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableAnyProperty;
						public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any, propName: string): void;
						public constructor(property: com.fasterxml.jackson.databind.BeanProperty, setter: com.fasterxml.jackson.databind.introspect.AnnotatedMember, type: com.fasterxml.jackson.databind.JavaType, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
						/** @deprecated */
						public constructor(property: com.fasterxml.jackson.databind.BeanProperty, setter: com.fasterxml.jackson.databind.introspect.AnnotatedMember, type: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public _throwAsIOE(e: java.lang.Exception, propName: any, value: any): void;
						public toString(): string;
					}
					export module SettableAnyProperty {
						export class AnySetterReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.SettableAnyProperty.AnySetterReferring>;
							public constructor(parent: com.fasterxml.jackson.databind.deser.SettableAnyProperty, reference: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, type: java.lang.Class<any>, instance: any, propName: string);
							public handleResolvedForwardReference(id: any, value: any): void;
							public constructor(ref: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, beanType: java.lang.Class<any>);
							public constructor(ref: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, beanType: com.fasterxml.jackson.databind.JavaType);
							public handleResolvedForwardReference(param0: any, param1: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class SettableBeanProperty extends com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
						public static MISSING_VALUE_DESERIALIZER: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _propName: com.fasterxml.jackson.databind.PropertyName;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _wrapperName: com.fasterxml.jackson.databind.PropertyName;
						public _contextAnnotations: com.fasterxml.jackson.databind.util.Annotations;
						public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public _nullProvider: com.fasterxml.jackson.databind.deser.NullValueProvider;
						public _managedReferenceName: string;
						public _objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public _viewMatcher: com.fasterxml.jackson.databind.util.ViewMatcher;
						public _propertyIndex: number;
						public isRequired(): boolean;
						public getValueTypeDeserializer(): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						/** @deprecated */
						public _throwAsIOE(e: java.lang.Exception): java.io.IOException;
						public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public setAndReturn(param0: any, param1: any): any;
						public _throwAsIOE(p: com.fasterxml.jackson.core.JsonParser, e: java.lang.Exception, value: any): void;
						public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
						public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
						public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public withSimpleName(simpleName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public toString(): string;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public getPropertyIndex(): number;
						public hasValueDeserializer(): boolean;
						public _throwAsIOE(p: com.fasterxml.jackson.core.JsonParser, e: java.lang.Exception): java.io.IOException;
						public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
						public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public getInjectableValueId(): any;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public visibleInView(activeView: java.lang.Class<any>): boolean;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public set(param0: any, param1: any): void;
						public markAsIgnorable(): void;
						public isIgnorable(): boolean;
						public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
						public getManagedReferenceName(): string;
						public getDeclaringClass(): java.lang.Class<any>;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public assignIndex(index: number): void;
						public setObjectIdInfo(objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): void;
						public hasViews(): boolean;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
						public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						public getCreatorIndex(): number;
						public isInjectionOnly(): boolean;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _throwAsIOE(e: java.lang.Exception, value: any): void;
						public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
						public setViews(views: java.lang.Class<any>[]): void;
						public setManagedReferenceName(n: string): void;
						public deserializeWith(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, toUpdate: any): any;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getValueDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
						public hasValueTypeDeserializer(): boolean;
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getNullValueProvider(): com.fasterxml.jackson.databind.deser.NullValueProvider;
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
					}
					export module SettableBeanProperty {
						export abstract class Delegating extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating>;
							public delegate: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getCreatorIndex(): number;
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withDelegate(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							public getManagedReferenceName(): string;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public set(instance: any, value: any): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public set(param0: any, param1: any): void;
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(d: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
							public hasViews(): boolean;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public setAndReturn(param0: any, param1: any): any;
							public getDelegate(): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public isInjectionOnly(): boolean;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getValueTypeDeserializer(): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public getDeclaringClass(): java.lang.Class<any>;
							public visibleInView(activeView: java.lang.Class<any>): boolean;
							public getPropertyIndex(): number;
							public getValueDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public hasValueDeserializer(): boolean;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getInjectableValueId(): any;
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public _with(newDelegate: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public withNullProvider(nva: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public hasValueTypeDeserializer(): boolean;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public assignIndex(index: number): void;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class UnresolvedForwardReference extends com.fasterxml.jackson.databind.JsonMappingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.UnresolvedForwardReference>;
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation, roid: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId);
						public getMessage(): string;
						/** @deprecated */
						public constructor(msg: string);
						public getUnresolvedIds(): java.util.List<com.fasterxml.jackson.databind.deser.UnresolvedId>;
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public fillInStackTrace(): com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public getRoid(): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
						public withStackTrace(): com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, roid: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId);
						public getUnresolvedId(): any;
						public addUnresolvedId(id: any, type: java.lang.Class<any>, where: com.fasterxml.jackson.core.JsonLocation): void;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class UnresolvedId extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.UnresolvedId>;
						public constructor(id: any, type: java.lang.Class<any>, where: com.fasterxml.jackson.core.JsonLocation);
						public getId(): any;
						public getLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getType(): java.lang.Class<any>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export abstract class ValueInstantiator extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiator>;
						public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public canCreateFromString(): boolean;
						public createFromLong(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
						public canCreateFromBigDecimal(): boolean;
						public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, props: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], buffer: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer): any;
						public createUsingDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public createUsingArrayDelegate(ctxt: com.fasterxml.jackson.databind.DeserializationContext, delegate: any): any;
						public getDefaultCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public createFromBoolean(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: boolean): any;
						public getValueClass(): java.lang.Class<any>;
						public getDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public canCreateUsingArrayDelegate(): boolean;
						public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, args: any[]): any;
						public createFromBigInteger(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: java.math.BigInteger): any;
						/** @deprecated */
						public _createFromStringFallbacks(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: string): any;
						public canCreateUsingDefault(): boolean;
						public constructor();
						public canCreateFromBoolean(): boolean;
						public canCreateFromObjectWith(): boolean;
						public getFromObjectArguments(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
						public createFromInt(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
						public canCreateFromInt(): boolean;
						public canCreateFromDouble(): boolean;
						public getWithArgsCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public canCreateFromBigInteger(): boolean;
						public canCreateFromLong(): boolean;
						public createFromBigDecimal(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: java.math.BigDecimal): any;
						public getDelegateType(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
						public getValueTypeDesc(): string;
						public canCreateUsingDelegate(): boolean;
						public createFromDouble(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
						public canInstantiate(): boolean;
						public getArrayDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public createUsingDelegate(ctxt: com.fasterxml.jackson.databind.DeserializationContext, delegate: any): any;
						public createFromString(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: string): any;
						public getArrayDelegateType(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
					}
					export module ValueInstantiator {
						export class Base extends com.fasterxml.jackson.databind.deser.ValueInstantiator implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiator.Base>;
							public _valueType: java.lang.Class<any>;
							public constructor();
							public constructor(type: java.lang.Class<any>);
							public getValueTypeDesc(): string;
							public getValueClass(): java.lang.Class<any>;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
						}
						export class Delegating extends com.fasterxml.jackson.databind.deser.ValueInstantiator implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiator.Delegating>;
							public _delegate: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, props: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], buffer: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer): any;
							public getArrayDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public canCreateFromBoolean(): boolean;
							public getValueTypeDesc(): string;
							public createFromDouble(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
							public createUsingDelegate(ctxt: com.fasterxml.jackson.databind.DeserializationContext, delegate: any): any;
							public getArrayDelegateType(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
							public getFromObjectArguments(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public createFromInt(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
							public canCreateFromInt(): boolean;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public canCreateFromLong(): boolean;
							public canCreateFromDouble(): boolean;
							public getDefaultCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public createFromBigDecimal(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: java.math.BigDecimal): any;
							public constructor();
							public constructor(delegate: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public canCreateFromString(): boolean;
							public createUsingArrayDelegate(ctxt: com.fasterxml.jackson.databind.DeserializationContext, delegate: any): any;
							public getDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public createFromString(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: string): any;
							public canCreateFromObjectWith(): boolean;
							public getValueClass(): java.lang.Class<any>;
							public canInstantiate(): boolean;
							public canCreateUsingDefault(): boolean;
							public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, args: any[]): any;
							public getWithArgsCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public createFromBigInteger(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: java.math.BigInteger): any;
							public getDelegateType(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
							public createFromBoolean(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: boolean): any;
							public canCreateUsingDelegate(): boolean;
							public canCreateUsingArrayDelegate(): boolean;
							public createUsingDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public delegate(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public createFromLong(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
						}
						export class Gettable extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiator.Gettable>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ValueInstantiator$Gettable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							});
							public constructor();
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export class ValueInstantiators extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiators>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.deser.ValueInstantiators interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						});
						public constructor();
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
					}
					export module ValueInstantiators {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.deser.ValueInstantiators {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.ValueInstantiators.Base>;
							public constructor();
							public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public findValueInstantiator(config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, defaultInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class BeanAsArrayBuilderDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer>;
							public _delegate: com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public _orderedProperties: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public _buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
							public _targetType: com.fasterxml.jackson.databind.JavaType;
							public constructor(delegate: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, targetType: com.fasterxml.jackson.databind.JavaType, ordered: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], buildMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							public constructor(vc: java.lang.Class<any>);
							public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public finishBuild(ctxt: com.fasterxml.jackson.databind.DeserializationContext, builder: any): any;
							public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>);
							public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withByNameInclusion(ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public withIgnoreAllUnknown(param0: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, beanProps: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>);
							public _deserializeFromNonArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public withBeanProperties(props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: any): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeUsingPropertyBased(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeNonVanilla(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withIgnoreAllUnknown(ignoreUnknown: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeFromObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public withObjectIdReader(oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignoreAllUnknown: boolean);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public unwrappingDeserializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class BeanAsArrayDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer>;
							public _delegate: com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public _orderedProperties: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public constructor(vc: java.lang.Class<any>);
							public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
							public constructor(delegate: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ordered: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]);
							public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>);
							public _deserializeUsingPropertyBased(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withByNameInclusion(ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public withIgnoreAllUnknown(param0: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): any;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public asArrayDeserializer(): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, beanProps: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>);
							public _deserializeFromNonArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public withBeanProperties(props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public unwrappingDeserializer(param0: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeUsingPropertyBased(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeNonVanilla(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withIgnoreAllUnknown(ignoreUnknown: boolean): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeFromObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public withObjectIdReader(oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public withObjectIdReader(param0: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignoreAllUnknown: boolean);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public unwrappingDeserializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class BeanPropertyMap extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap>;
							public _caseInsensitive: boolean;
							/** @deprecated */
							public static construct(props: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, caseInsensitive: boolean, aliasMapping: java.util.Map<string,java.util.List<com.fasterxml.jackson.databind.PropertyName>>): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public size(): number;
							public assignIndexes(): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public spliterator(): java.util.Spliterator<any>;
							public withCaseInsensitivity(state: boolean): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public toString(): string;
							public remove(propToRm: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
							/** @deprecated */
							public constructor(caseInsensitive: boolean, props: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, aliasDefs: java.util.Map<string,java.util.List<com.fasterxml.jackson.databind.PropertyName>>);
							public withProperty(newProp: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public hasAliases(): boolean;
							public init(props: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>): void;
							public isCaseInsensitive(): boolean;
							/** @deprecated */
							public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, props: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, aliasMapping: java.util.Map<string,java.util.List<com.fasterxml.jackson.databind.PropertyName>>): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, props: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, aliasMapping: java.util.Map<string,java.util.List<com.fasterxml.jackson.databind.PropertyName>>, caseInsensitive: boolean): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public wrapAndThrow(t: java.lang.Throwable, bean: any, fieldName: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							public getPropertyName(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): string;
							public iterator(): java.util.Iterator<any>;
							public getPropertiesInInsertionOrder(): com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public withoutProperties(toExclude: java.util.Collection<string>): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public constructor(base: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, caseInsensitive: boolean);
							public findDeserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, key: string): boolean;
							public _rename(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty, xf: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public replace(origProp: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newProp: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
							public constructor(caseInsensitive: boolean, props: java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>, aliasDefs: java.util.Map<string,java.util.List<com.fasterxml.jackson.databind.PropertyName>>, locale: java.util.Locale);
							public withoutProperties(toExclude: java.util.Collection<string>, toInclude: java.util.Collection<string>): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public forEach(action: any /* any*/): void;
							public find(key: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public renameAll(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
							public find(index: number): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class CreatorCandidate extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate>;
							public _intr: com.fasterxml.jackson.databind.AnnotationIntrospector;
							public _creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _paramCount: number;
							public _params: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param[];
							public creator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public injection(i: number): com.fasterxml.jackson.annotation.JacksonInject.Value;
							public paramCount(): number;
							public explicitParamName(i: number): com.fasterxml.jackson.databind.PropertyName;
							public propertyDef(i: number): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
							public constructor(intr: com.fasterxml.jackson.databind.AnnotationIntrospector, ct: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, params: com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param[], count: number);
							public static construct(intr: com.fasterxml.jackson.databind.AnnotationIntrospector, creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, propDefs: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]): com.fasterxml.jackson.databind.deser.impl.CreatorCandidate;
							public parameter(i: number): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
							public toString(): string;
							public paramName(i: number): com.fasterxml.jackson.databind.PropertyName;
							public findImplicitParamName(i: number): com.fasterxml.jackson.databind.PropertyName;
							public findOnlyParamWithoutInjection(): number;
						}
						export module CreatorCandidate {
							export class Param extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param>;
								public annotated: com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
								public propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
								public injection: com.fasterxml.jackson.annotation.JacksonInject.Value;
								public constructor(p: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, pd: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, i: com.fasterxml.jackson.annotation.JacksonInject.Value);
								public fullName(): com.fasterxml.jackson.databind.PropertyName;
								public hasFullName(): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class CreatorCollector extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.CreatorCollector>;
							public static C_DEFAULT: number;
							public static C_STRING: number;
							public static C_INT: number;
							public static C_LONG: number;
							public static C_BIG_INTEGER: number;
							public static C_DOUBLE: number;
							public static C_BIG_DECIMAL: number;
							public static C_BOOLEAN: number;
							public static C_DELEGATE: number;
							public static C_PROPS: number;
							public static C_ARRAY_DELEGATE: number;
							public static TYPE_DESCS: string[];
							public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
							public _canFixAccess: boolean;
							public _forceAccess: boolean;
							public _creators: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams[];
							public _explicitCreators: number;
							public _hasNonDefaultCreator: boolean;
							public _delegateArgs: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public _arrayDelegateArgs: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public _propertyBasedArgs: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public hasPropertyBasedCreator(): boolean;
							public addLongCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean): void;
							public addBooleanCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean): void;
							public setDefaultCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public addDelegatingCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean, injectables: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], delegateeIndex: number): void;
							public hasDefaultCreator(): boolean;
							public hasDelegatingCreator(): boolean;
							public _isEnumValueOf(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): boolean;
							public addDoubleCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean): void;
							public _reportDuplicateCreator(typeIndex: number, explicit: boolean, oldOne: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, newOne: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public verifyNonDup(newOne: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, typeIndex: number, explicit: boolean): boolean;
							public constructor(beanDesc: com.fasterxml.jackson.databind.BeanDescription, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>);
							public addPropertyCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean, properties: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]): void;
							public addStringCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean): void;
							public addBigIntegerCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean): void;
							public constructValueInstantiator(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public addIntCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean): void;
							public addBigDecimalCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, explicit: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ErrorThrowingDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer>;
							public constructor();
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(cause: java.lang.NoClassDefFoundError);
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ExternalTypeHandler extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler>;
							public constructor(beanType: com.fasterxml.jackson.databind.JavaType, properties: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.ExtTypedProperty[], nameToPropertyIndex: java.util.Map<string,any>, typeIds: string[], tokens: com.fasterxml.jackson.databind.util.TokenBuffer[]);
							public start(): com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
							public static builder(beanType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder;
							public complete(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, buffer: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer, creator: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator): any;
							public _deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, index: number, typeId: string): any;
							public _deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, index: number, typeId: string): void;
							public complete(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): any;
							public constructor(h: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler);
							public handleTypePropertyValue(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, propName: string, bean: any): boolean;
							public handlePropertyValue(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, propName: string, bean: any): boolean;
						}
						export module ExternalTypeHandler {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder>;
								public build(otherProps: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap): com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
								public constructor(t: com.fasterxml.jackson.databind.JavaType);
								public addExternal(property: com.fasterxml.jackson.databind.deser.SettableBeanProperty, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): void;
							}
							export class ExtTypedProperty extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.ExtTypedProperty>;
								public constructor(property: com.fasterxml.jackson.databind.deser.SettableBeanProperty, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
								public getTypePropertyName(): string;
								public hasTypePropertyName(n: string): boolean;
								public getDefaultTypeId(): string;
								public getProperty(): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
								public getTypeProperty(): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
								public hasDefaultType(): boolean;
								public linkTypeProperty(p: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class FailingDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.FailingDeserializer>;
							public _message: string;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public constructor(rawType: java.lang.Class<any>, m: string);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(m: string);
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class FieldProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.FieldProperty>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedField;
							public _field: java.lang.reflect.Field;
							public _skipNulls: boolean;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public set(instance: any, value: any): void;
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, field: com.fasterxml.jackson.databind.introspect.AnnotatedField);
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.FieldProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nva: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public set(param0: any, param1: any): void;
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public setAndReturn(param0: any, param1: any): any;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.FieldProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.FieldProperty);
							public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public withNullProvider(nva: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class InnerClassProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.InnerClassProperty>;
							public _creator: java.lang.reflect.Constructor<any>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public withDelegate(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withDelegate(d: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, ann: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor);
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(d: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): void;
							public constructor(delegate: com.fasterxml.jackson.databind.deser.SettableBeanProperty, ctor: java.lang.reflect.Constructor<any>);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export abstract class JDKValueInstantiators extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators>;
							public constructor();
							public static findStdValueInstantiator(config: com.fasterxml.jackson.databind.DeserializationConfig, raw: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						}
						export module JDKValueInstantiators {
							export class ArrayListInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator.Base implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.ArrayListInstantiator>;
								public static INSTANCE: com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.ArrayListInstantiator;
								public constructor(type: java.lang.Class<any>);
								public canInstantiate(): boolean;
								public canCreateUsingDefault(): boolean;
								public constructor();
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public createUsingDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ConstantValueInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator.Base implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.ConstantValueInstantiator>;
								public _value: any;
								public constructor(type: java.lang.Class<any>);
								public canInstantiate(): boolean;
								public canCreateUsingDefault(): boolean;
								public constructor(value: any);
								public constructor();
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public createUsingDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class HashMapInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator.Base implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.HashMapInstantiator>;
								public static INSTANCE: com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.HashMapInstantiator;
								public constructor(type: java.lang.Class<any>);
								public canInstantiate(): boolean;
								public canCreateUsingDefault(): boolean;
								public constructor();
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public createUsingDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class LinkedHashMapInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator.Base implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.LinkedHashMapInstantiator>;
								public static INSTANCE: com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.LinkedHashMapInstantiator;
								public constructor(type: java.lang.Class<any>);
								public canInstantiate(): boolean;
								public canCreateUsingDefault(): boolean;
								public constructor();
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public createUsingDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export abstract class JavaUtilCollectionsDeserializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers>;
							public static TYPE_AS_LIST: number;
							public constructor();
							public static findForCollection(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public static findForMap(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
						export module JavaUtilCollectionsDeserializers {
							export class JavaUtilCollectionsConverter extends com.fasterxml.jackson.databind.util.Converter<any,any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers.JavaUtilCollectionsConverter>;
								public convert(param0: any): any;
								public convert(value: any): any;
								public getInputType(typeFactory: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
								public getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
								public getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
								public getOutputType(typeFactory: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ManagedReferenceProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty>;
							public _referenceName: string;
							public _isContainer: boolean;
							public _backProperty: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public withDelegate(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withDelegate(d: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(forward: com.fasterxml.jackson.databind.deser.SettableBeanProperty, refName: string, backward: com.fasterxml.jackson.databind.deser.SettableBeanProperty, isContainer: boolean);
							public set(instance: any, value: any): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(d: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class MergingSettableBeanProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty>;
							public _accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public isVirtual(): boolean;
							public static construct(delegate: com.fasterxml.jackson.databind.deser.SettableBeanProperty, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty, delegate: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public withDelegate(param0: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public withDelegate(d: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public set(instance: any, value: any): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public constructor(delegate: com.fasterxml.jackson.databind.deser.SettableBeanProperty, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(d: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class MethodProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.MethodProperty>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
							public _setter: java.lang.reflect.Method;
							public _skipNulls: boolean;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public set(instance: any, value: any): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public set(param0: any, param1: any): void;
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.MethodProperty, m: java.lang.reflect.Method);
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public setAndReturn(param0: any, param1: any): any;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.MethodProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.MethodProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nva: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public withNullProvider(nva: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class NullsAsEmptyProvider extends java.lang.Object implements com.fasterxml.jackson.databind.deser.NullValueProvider, java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.NullsAsEmptyProvider>;
							public _deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class NullsConstantProvider extends java.lang.Object implements com.fasterxml.jackson.databind.deser.NullValueProvider, java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider>;
							public _nullValue: any;
							public _access: com.fasterxml.jackson.databind.util.AccessPattern;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public static forValue(nvl: any): com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider;
							public static isSkipper(p: com.fasterxml.jackson.databind.deser.NullValueProvider): boolean;
							public static nuller(): com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public static isNuller(p: com.fasterxml.jackson.databind.deser.NullValueProvider): boolean;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(nvl: any);
							public static skipper(): com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class NullsFailProvider extends java.lang.Object implements com.fasterxml.jackson.databind.deser.NullValueProvider, java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.NullsFailProvider>;
							public _name: com.fasterxml.jackson.databind.PropertyName;
							public _type: com.fasterxml.jackson.databind.JavaType;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public static constructForRootValue(t: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.deser.impl.NullsFailProvider;
							public static constructForProperty(prop: com.fasterxml.jackson.databind.BeanProperty, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.deser.impl.NullsFailProvider;
							public static constructForProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.deser.impl.NullsFailProvider;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ObjectIdReader extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdReader>;
							public _idType: com.fasterxml.jackson.databind.JavaType;
							public propertyName: com.fasterxml.jackson.databind.PropertyName;
							public generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public resolver: com.fasterxml.jackson.annotation.ObjectIdResolver;
							public _deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public idProperty: com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getIdType(): com.fasterxml.jackson.databind.JavaType;
							public readObjectReference(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public isValidReferencePropertyName(name: string, parser: com.fasterxml.jackson.core.JsonParser): boolean;
							public static construct(idType: com.fasterxml.jackson.databind.JavaType, propName: com.fasterxml.jackson.databind.PropertyName, generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, idProp: com.fasterxml.jackson.databind.deser.SettableBeanProperty, resolver: com.fasterxml.jackson.annotation.ObjectIdResolver): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public constructor(t: com.fasterxml.jackson.databind.JavaType, propName: com.fasterxml.jackson.databind.PropertyName, gen: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, idProp: com.fasterxml.jackson.databind.deser.SettableBeanProperty, resolver: com.fasterxml.jackson.annotation.ObjectIdResolver);
							public maySerializeAsObject(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ObjectIdReferenceProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty>;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getCreatorIndex(): number;
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							public constructor(forward: com.fasterxml.jackson.databind.deser.SettableBeanProperty, objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo);
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public set(instance: any, value: any): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public set(param0: any, param1: any): void;
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public setAndReturn(param0: any, param1: any): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nva: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public withNullProvider(nva: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
						export module ObjectIdReferenceProperty {
							export class PropertyReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty.PropertyReferring>;
								public _pojo: any;
								public constructor(ref: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, beanType: java.lang.Class<any>);
								public constructor(ref: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, beanType: com.fasterxml.jackson.databind.JavaType);
								public handleResolvedForwardReference(id: any, value: any): void;
								public constructor(parent: com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty, ref: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, type: java.lang.Class<any>, ob: any);
								public handleResolvedForwardReference(param0: any, param1: any): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ObjectIdValueProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty>;
							public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nva: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public set(instance: any, value: any): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public set(param0: any, param1: any): void;
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withNullProvider(nva: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class PropertyBasedCreator extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator>;
							public _propertyCount: number;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _propertyLookup: java.util.HashMap<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public _allProperties: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public static construct(ctxt: com.fasterxml.jackson.databind.DeserializationContext, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, srcCreatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], allProperties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap): com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
							public startBuilding(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader): com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
							public constructor(ctxt: com.fasterxml.jackson.databind.DeserializationContext, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, creatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], caseInsensitive: boolean, addAliases: boolean);
							public properties(): java.util.Collection<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public findCreatorProperty(propertyIndex: number): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public build(ctxt: com.fasterxml.jackson.databind.DeserializationContext, buffer: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer): any;
							public findCreatorProperty(name: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public static construct(ctxt: com.fasterxml.jackson.databind.DeserializationContext, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, srcCreatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], caseInsensitive: boolean): com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
							/** @deprecated */
							public static construct(ctxt: com.fasterxml.jackson.databind.DeserializationContext, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, srcCreatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]): com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
						}
						export module PropertyBasedCreator {
							export class CaseInsensitiveMap extends java.util.HashMap<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.CaseInsensitiveMap>;
								public _locale: java.util.Locale;
								public constructor(l: java.util.Locale);
								public size(): number;
								public forEach(action: any /* any<any,any>*/): void;
								public replaceAll(_function_: any /* any<any,any,any>*/): void;
								public equals(param0: any): boolean;
								public remove(param0: any): any;
								public equals(o: any): boolean;
								public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
								public containsKey(key: any): boolean;
								public put(key: string, value: com.fasterxml.jackson.databind.deser.SettableBeanProperty): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
								public replace(key: any, value: any): any;
								public static construct(l: java.util.Locale): com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.CaseInsensitiveMap;
								public containsValue(value: any): boolean;
								public containsKey(param0: any): boolean;
								public putAll(m: java.util.Map<any,any>): void;
								public replace(key: any, oldValue: any, newValue: any): boolean;
								public remove(key: any, value: any): boolean;
								public keySet(): java.util.Set<any>;
								public put(key: any, value: any): any;
								public constructor(m: java.util.Map<any,any>);
								public get(param0: any): any;
								public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
								public constructor();
								public put(param0: any, param1: any): any;
								public containsValue(param0: any): boolean;
								public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
								/** @deprecated */
								public constructor();
								public values(): java.util.Collection<any>;
								public get(key: any): any;
								public clear(): void;
								public constructor(initialCapacity: number, loadFactor: number);
								public remove(key: any): any;
								public putAll(param0: java.util.Map<any,any>): void;
								public getOrDefault(key: any, defaultValue: any): any;
								public constructor(initialCapacity: number);
								public get(key0: any): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
								public isEmpty(): boolean;
								public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
								public putIfAbsent(key: any, value: any): any;
								public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class PropertyBasedObjectIdGenerator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator>;
							public generateId(forPojo: any): any;
							public forScope(scope: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public constructor(scope: java.lang.Class<any>);
							public newForSerialization(context: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public key(key: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export abstract class PropertyValue extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue>;
							public next: com.fasterxml.jackson.databind.deser.impl.PropertyValue;
							public value: any;
							public constructor(next: com.fasterxml.jackson.databind.deser.impl.PropertyValue, value: any);
							public assign(param0: any): void;
						}
						export module PropertyValue {
							export class Any extends com.fasterxml.jackson.databind.deser.impl.PropertyValue {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue.Any>;
								public assign(param0: any): void;
								public constructor(next: com.fasterxml.jackson.databind.deser.impl.PropertyValue, value: any, prop: com.fasterxml.jackson.databind.deser.SettableAnyProperty, propName: string);
								public assign(bean: any): void;
								public constructor(next: com.fasterxml.jackson.databind.deser.impl.PropertyValue, value: any);
							}
							export class Map extends com.fasterxml.jackson.databind.deser.impl.PropertyValue {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue.Map>;
								public assign(param0: any): void;
								public assign(bean: any): void;
								public constructor(next: com.fasterxml.jackson.databind.deser.impl.PropertyValue, value: any, key: any);
								public constructor(next: com.fasterxml.jackson.databind.deser.impl.PropertyValue, value: any);
							}
							export class Regular extends com.fasterxml.jackson.databind.deser.impl.PropertyValue {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValue.Regular>;
								public assign(param0: any): void;
								public assign(bean: any): void;
								public constructor(next: com.fasterxml.jackson.databind.deser.impl.PropertyValue, value: any);
								public constructor(next: com.fasterxml.jackson.databind.deser.impl.PropertyValue, value: any, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class PropertyValueBuffer extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer>;
							public _parser: com.fasterxml.jackson.core.JsonParser;
							public _context: com.fasterxml.jackson.databind.DeserializationContext;
							public _objectIdReader: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public _creatorParameters: any[];
							public _paramsNeeded: number;
							public _paramsSeen: number;
							public _paramsSeenBig: java.util.BitSet;
							public _buffered: com.fasterxml.jackson.databind.deser.impl.PropertyValue;
							public _idValue: any;
							public bufferMapProperty(key: any, value: any): void;
							public handleIdValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any): any;
							public buffered(): com.fasterxml.jackson.databind.deser.impl.PropertyValue;
							public bufferProperty(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty, value: any): void;
							public getParameters(props: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]): any[];
							public readIdProperty(propName: string): boolean;
							public isComplete(): boolean;
							public assignParameter(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty, value: any): boolean;
							public _findMissing(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): any;
							public getParameter(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): any;
							public hasParameter(prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): boolean;
							public bufferAnyProperty(prop: com.fasterxml.jackson.databind.deser.SettableAnyProperty, propName: string, value: any): void;
							public constructor(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, paramCount: number, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ReadableObjectId extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId>;
							public _item: any;
							public _key: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
							public _referringProperties: java.util.LinkedList<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring>;
							public _resolver: com.fasterxml.jackson.annotation.ObjectIdResolver;
							public setResolver(resolver: com.fasterxml.jackson.annotation.ObjectIdResolver): void;
							public appendReferring(currentReferring: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring): void;
							public hasReferringProperties(): boolean;
							public resolve(): any;
							public bindItem(ob: any): void;
							public referringProperties(): java.util.Iterator<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring>;
							public tryToResolveUnresolved(ctxt: com.fasterxml.jackson.databind.DeserializationContext): boolean;
							public toString(): string;
							public constructor(key: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey);
							public getKey(): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
							public getResolver(): com.fasterxml.jackson.annotation.ObjectIdResolver;
						}
						export module ReadableObjectId {
							export abstract class Referring extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring>;
								public constructor(ref: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, beanType: java.lang.Class<any>);
								public constructor(ref: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, beanType: com.fasterxml.jackson.databind.JavaType);
								public getLocation(): com.fasterxml.jackson.core.JsonLocation;
								public handleResolvedForwardReference(param0: any, param1: any): void;
								public getBeanType(): java.lang.Class<any>;
								public hasId(id: any): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class SetterlessProperty extends com.fasterxml.jackson.databind.deser.SettableBeanProperty {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.SetterlessProperty>;
							public _annotated: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
							public _getter: java.lang.reflect.Method;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							public deserializeSetAndReturn(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): any;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public withNullProvider(param0: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public setAndReturn(instance: any, value: any): any;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.SetterlessProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, newName: com.fasterxml.jackson.databind.PropertyName);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty);
							public constructor(src: com.fasterxml.jackson.databind.deser.impl.SetterlessProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nva: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public deserializeAndSet(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public withValueDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public set(instance: any, value: any): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.SettableBeanProperty, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public set(param0: any, param1: any): void;
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public deserializeAndSet(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instance: any): void;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public isRequired(): boolean;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withNullProvider(nva: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, metadata: com.fasterxml.jackson.databind.PropertyMetadata, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public fixAccess(config: com.fasterxml.jackson.databind.DeserializationConfig): void;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public deserializeSetAndReturn(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext, param2: any): any;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public setAndReturn(param0: any, param1: any): any;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapper: com.fasterxml.jackson.databind.PropertyName, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations);
							public withValueDeserializer(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class TypeWrappedDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<any> implements java.io.Serializable  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer>;
							public _typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public handledType(): java.lang.Class<any>;
							/** @deprecated */
							public getEmptyValue(): any;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getDelegatee(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							/** @deprecated */
							public getNullValue(): any;
							public getKnownPropertyNames(): java.util.Collection<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class UnsupportedTypeDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.UnsupportedTypeDeserializer>;
							public _type: com.fasterxml.jackson.databind.JavaType;
							public _message: string;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(t: com.fasterxml.jackson.databind.JavaType, m: string);
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class UnwrappedPropertyHandler extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler>;
							public _properties: java.util.List<com.fasterxml.jackson.databind.deser.SettableBeanProperty>;
							public constructor();
							public addProperty(property: com.fasterxml.jackson.databind.deser.SettableBeanProperty): void;
							public renameAll(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler;
							public processUnwrapped(originalParser: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, bean: any, buffered: com.fasterxml.jackson.databind.util.TokenBuffer): any;
							public constructor(props: java.util.List<com.fasterxml.jackson.databind.deser.SettableBeanProperty>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module impl {
						export class ValueInjector extends com.fasterxml.jackson.databind.BeanProperty.Std {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.impl.ValueInjector>;
							public _valueId: any;
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public inject(context: com.fasterxml.jackson.databind.DeserializationContext, beanInstance: any): void;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findValue(context: com.fasterxml.jackson.databind.DeserializationContext, beanInstance: any): any;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							/** @deprecated */
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, mutator: com.fasterxml.jackson.databind.introspect.AnnotatedMember, valueId: any);
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							/** @deprecated */
							public constructor(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapperName: com.fasterxml.jackson.databind.PropertyName, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public constructor(name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, wrapperName: com.fasterxml.jackson.databind.PropertyName, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, metadata: com.fasterxml.jackson.databind.PropertyMetadata);
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public constructor(propName: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType, mutator: com.fasterxml.jackson.databind.introspect.AnnotatedMember, valueId: any);
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(base: com.fasterxml.jackson.databind.BeanProperty.Std, newType: com.fasterxml.jackson.databind.JavaType);
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class ArrayBlockingQueueDeserializer extends com.fasterxml.jackson.databind.deser.std.CollectionDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer>;
							public constructor(vc: java.lang.Class<any>);
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Collection<any>): java.util.Collection<any>;
							public constructor(containerType: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, delegateDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(collectionType: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public constructor(src: com.fasterxml.jackson.databind.deser.std.CollectionDeserializer);
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withResolved(dd: com.fasterxml.jackson.databind.JsonDeserializer<any>, vd: com.fasterxml.jackson.databind.JsonDeserializer<any>, vtd: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public withResolved(dd: com.fasterxml.jackson.databind.JsonDeserializer<any>, vd: com.fasterxml.jackson.databind.JsonDeserializer<any>, vtd: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer;
							public createDefaultInstance(ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Collection<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(containerType: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public constructor(collectionType: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, delegateDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(src: com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result0: java.util.Collection<any>): java.util.Collection<any>;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class AtomicBooleanDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.util.concurrent.atomic.AtomicBoolean> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							/** @deprecated */
							public getEmptyValue(): any;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.concurrent.atomic.AtomicBoolean;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class AtomicIntegerDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.util.concurrent.atomic.AtomicInteger> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.AtomicIntegerDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							/** @deprecated */
							public getEmptyValue(): any;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.concurrent.atomic.AtomicInteger;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class AtomicLongDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.util.concurrent.atomic.AtomicLong> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.AtomicLongDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							/** @deprecated */
							public getEmptyValue(): any;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.concurrent.atomic.AtomicLong;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class AtomicReferenceDeserializer extends com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer<java.util.concurrent.atomic.AtomicReference<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer>;
							public constructor(vc: java.lang.Class<any>);
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType, inst: com.fasterxml.jackson.databind.deser.ValueInstantiator, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							/** @deprecated */
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public referenceValue(param0: any): any;
							public updateReference(reference: java.util.concurrent.atomic.AtomicReference<any>, contents: any): java.util.concurrent.atomic.AtomicReference<any>;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getReferenced(reference: java.util.concurrent.atomic.AtomicReference<any>): any;
							public withResolved(typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							/** @deprecated */
							public getEmptyValue(): any;
							public referenceValue(contents: any): java.util.concurrent.atomic.AtomicReference<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.concurrent.atomic.AtomicReference<any>;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public getReferenced(param0: any): any;
							public updateReference(param0: any, param1: any): any;
							public withResolved(param0: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer<any>;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType, vi: com.fasterxml.jackson.databind.deser.ValueInstantiator, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class BaseNodeDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<any>>;
							public _supportsUpdates: java.lang.Boolean;
							public updateObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, node: com.fasterxml.jackson.databind.node.ObjectNode, stack: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.ContainerStack): com.fasterxml.jackson.databind.JsonNode;
							public _fromFloat(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.JsonNode;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public _fromInt(p: com.fasterxml.jackson.core.JsonParser, coercionFeatures: number, nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.JsonNode;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public isCachable(): boolean;
							public _deserializeRareScalar(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonNode;
							public _deserializeAnyScalar(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonNode;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeObjectAtName(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory, stack: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.ContainerStack): com.fasterxml.jackson.databind.node.ObjectNode;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public _deserializeContainerNoRecursion(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory, stack: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.ContainerStack, root: com.fasterxml.jackson.databind.node.ContainerNode<any>): com.fasterxml.jackson.databind.node.ContainerNode<any>;
							public _fromEmbedded(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonNode;
							public constructor(vc: java.lang.Class<any>, supportsUpdates: java.lang.Boolean);
							public _handleDuplicateField(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory, fieldName: string, objectNode: com.fasterxml.jackson.databind.node.ObjectNode, oldValue: com.fasterxml.jackson.databind.JsonNode, newValue: com.fasterxml.jackson.databind.JsonNode): void;
							public _fromInt(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory): com.fasterxml.jackson.databind.JsonNode;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
						export module BaseNodeDeserializer {
							export class ContainerStack extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.ContainerStack>;
								public size(): number;
								public push(node: com.fasterxml.jackson.databind.node.ContainerNode<any>): void;
								public popOrNull(): com.fasterxml.jackson.databind.node.ContainerNode<any>;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class ByteBufferDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.nio.ByteBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public deserialize(parser: com.fasterxml.jackson.core.JsonParser, cx: com.fasterxml.jackson.databind.DeserializationContext): java.nio.ByteBuffer;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class CollectionDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Collection<any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer>;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _deserializeFromString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Collection<any>): java.util.Collection<any>;
							public _deserializeWithObjectId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Collection<any>): java.util.Collection<any>;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public isCachable(): boolean;
							public constructor(collectionType: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public constructor(src: com.fasterxml.jackson.databind.deser.std.CollectionDeserializer);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withResolved(dd: com.fasterxml.jackson.databind.JsonDeserializer<any>, vd: com.fasterxml.jackson.databind.JsonDeserializer<any>, vtd: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Collection<any>;
							public createDefaultInstance(ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Collection<any>;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _deserializeFromString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: string): java.util.Collection<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public handleNonArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Collection<any>): java.util.Collection<any>;
							public constructor(collectionType: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, delegateDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Collection<any>): java.util.Collection<any>;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
						export module CollectionDeserializer {
							export class CollectionReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionReferring>;
								public next: java.util.List<any>;
								public handleResolvedForwardReference(id: any, value: any): void;
								public handleResolvedForwardReference(param0: any, param1: any): void;
							}
							export class CollectionReferringAccumulator extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionReferringAccumulator>;
								public resolveForwardReference(id: any, value: any): void;
								public handleUnresolvedReference(reference: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;
								public constructor(elementType: java.lang.Class<any>, result: java.util.Collection<any>);
								public add(value: any): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class ContainerDeserializerBase<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ValueInstantiator.Gettable  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>>;
							public _containerType: com.fasterxml.jackson.databind.JavaType;
							public _nullProvider: com.fasterxml.jackson.databind.deser.NullValueProvider;
							public _skipNullValues: boolean;
							public _unwrapSingle: java.lang.Boolean;
							public constructor(vc: java.lang.Class<any>);
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public getValueType(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JavaType;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public findBackReference(refName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							/** @deprecated */
							public getEmptyValue(): any;
							public wrapAndThrow(ctxt: com.fasterxml.jackson.databind.DeserializationContext, t: java.lang.Throwable, ref: any, key: string): any;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public getValueType(): com.fasterxml.jackson.databind.JavaType;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							/** @deprecated */
							public wrapAndThrow(t: java.lang.Throwable, ref: any, key: string): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class DateDeserializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers>;
							public constructor();
							public static find(rawType: java.lang.Class<any>, clsName: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public static hasDeserializerFor(rawType: java.lang.Class<any>): boolean;
						}
						export module DateDeserializers {
							export class CalendarDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.util.Calendar> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.CalendarDeserializer>;
								public _defaultCtor: java.lang.reflect.Constructor<java.util.Calendar>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(base: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, format: java.text.DateFormat, formatStr: string);
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(clz: java.lang.Class<any>);
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Calendar;
								public withDateFormat(df: java.text.DateFormat, formatString: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.CalendarDeserializer;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(cc: java.lang.Class<any>);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.DateDeserializers.CalendarDeserializer, df: java.text.DateFormat, formatString: string);
							}
							export abstract class DateBasedDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>>;
								public _customFormat: java.text.DateFormat;
								public _formatString: string;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor();
								public _parseDate(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(base: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, format: java.text.DateFormat, formatStr: string);
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(clz: java.lang.Class<any>);
								public _parseDate(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class DateDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.util.Date> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(base: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, format: java.text.DateFormat, formatStr: string);
								public withDateFormat(df: java.text.DateFormat, formatString: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(clz: java.lang.Class<any>);
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateDeserializer, df: java.text.DateFormat, formatString: string);
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class SqlDateDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.sql.Date> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.SqlDateDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.DateDeserializers.SqlDateDeserializer, df: java.text.DateFormat, formatString: string);
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor();
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.sql.Date;
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(base: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, format: java.text.DateFormat, formatStr: string);
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(clz: java.lang.Class<any>);
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public withDateFormat(df: java.text.DateFormat, formatString: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.SqlDateDeserializer;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class TimestampDeserializer extends com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<java.sql.Timestamp> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DateDeserializers.TimestampDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withDateFormat(df: java.text.DateFormat, formatString: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.TimestampDeserializer;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.sql.Timestamp;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.DateDeserializers.TimestampDeserializer, df: java.text.DateFormat, formatString: string);
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(base: com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>, format: java.text.DateFormat, formatStr: string);
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(clz: java.lang.Class<any>);
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public withDateFormat(param0: java.text.DateFormat, param1: string): com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer<any>;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class DelegatingDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer>;
							public _delegatee: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public isCachable(): boolean;
							public getDelegatee(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public findBackReference(logicalName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							public replaceDelegatee(delegatee: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getKnownPropertyNames(): java.util.Collection<any>;
							public constructor(d: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public findBackReference(refName: string): com.fasterxml.jackson.databind.deser.SettableBeanProperty;
							/** @deprecated */
							public getEmptyValue(): any;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public newDelegatingInstance(param0: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getObjectIdReader(): com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class EnumDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.EnumDeserializer>;
							public _enumsByIndex: any[];
							public _lookupByName: com.fasterxml.jackson.databind.util.CompactStringObjectMap;
							public _lookupByToString: com.fasterxml.jackson.databind.util.CompactStringObjectMap;
							public _caseInsensitive: java.lang.Boolean;
							public _isFromIntValue: boolean;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.EnumDeserializer, caseInsensitive: java.lang.Boolean);
							public withResolved(caseInsensitive: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.EnumDeserializer;
							public isCachable(): boolean;
							public _fromString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): any;
							/** @deprecated */
							public constructor(byNameResolver: com.fasterxml.jackson.databind.util.EnumResolver);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(byNameResolver: com.fasterxml.jackson.databind.util.EnumResolver, caseInsensitive: java.lang.Boolean);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public static deserializerForNoArgsCreator(config: com.fasterxml.jackson.databind.DeserializationConfig, enumClass: java.lang.Class<any>, factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _enumClass(): java.lang.Class<any>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							/** @deprecated */
							public getEmptyValue(): any;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public static deserializerForCreator(config: com.fasterxml.jackson.databind.DeserializationConfig, enumClass: java.lang.Class<any>, factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _deserializeOther(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public static deserializerForCreator(config: com.fasterxml.jackson.databind.DeserializationConfig, enumClass: java.lang.Class<any>, factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, creatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _fromInteger(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, index: number): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _getToStringLookup(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.util.CompactStringObjectMap;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class EnumMapDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.EnumMap<any,any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer>;
							public _enumClass: java.lang.Class<any>;
							public _keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _propertyBasedCreator: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							/** @deprecated */
							public constructor(mapType: com.fasterxml.jackson.databind.JavaType, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, vtd: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public isCachable(): boolean;
							public constructor(mapType: com.fasterxml.jackson.databind.JavaType, valueInst: com.fasterxml.jackson.databind.deser.ValueInstantiator, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, vtd: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public _deserializeUsingProperties(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.EnumMap<any,any>;
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getEmptyValue(): any;
							public constructMap(ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.EnumMap<any,any>;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.EnumMap<any,any>;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.EnumMap<any,any>): java.util.EnumMap<any,any>;
							public withResolved(keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider): com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, vtd: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class EnumSetDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<java.util.EnumSet<any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer>;
							public _enumType: com.fasterxml.jackson.databind.JavaType;
							public _enumDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Enum<any>>;
							public _nullProvider: com.fasterxml.jackson.databind.deser.NullValueProvider;
							public _skipNullValues: boolean;
							public _unwrapSingle: java.lang.Boolean;
							public constructor(enumType: com.fasterxml.jackson.databind.JavaType, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public constructor(vc: java.lang.Class<any>);
							/** @deprecated */
							public withResolved(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public isCachable(): boolean;
							public handleNonArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.EnumSet<any>): java.util.EnumSet<any>;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.EnumSet<any>): java.util.EnumSet<any>;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							/** @deprecated */
							public getEmptyValue(): any;
							/** @deprecated */
							public constructor(base: com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, unwrapSingle: java.lang.Boolean);
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public withDeserializer(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.EnumSet<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.EnumSet<any>): java.util.EnumSet<any>;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public withResolved(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class FactoryBasedEnumDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer>;
							public _inputType: com.fasterxml.jackson.databind.JavaType;
							public _factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
							public _deser: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _creatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public _hasArgs: boolean;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public constructor(cls: java.lang.Class<any>, f: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public isCachable(): boolean;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public deserializeEnumUsingPropertyBased(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, creator: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator): any;
							public constructor(cls: java.lang.Class<any>, f: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, paramType: com.fasterxml.jackson.databind.JavaType, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, creatorProps: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeWithErrorWrapping(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public wrapAndThrow(t: java.lang.Throwable, bean: any, fieldName: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class FromStringDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>>;
							public constructor(vc: java.lang.Class<any>);
							public _deserializeEmbedded(ob: any, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public static findDeserializer(rawType: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>;
							/** @deprecated */
							public _deserializeFromEmptyString(): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeFromEmptyString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, act: com.fasterxml.jackson.databind.cfg.CoercionAction, rawTargetType: java.lang.Class<any>, desc: string): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeFromOther(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, t: com.fasterxml.jackson.core.JsonToken): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public static types(): java.lang.Class<any>[];
							public _deserializeFromEmptyString(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _shouldTrim(): boolean;
							public findDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _deserializeFromEmptyStringDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
						export module FromStringDeserializer {
							export class Std extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.Std>;
								public static STD_FILE: number;
								public static STD_URL: number;
								public static STD_URI: number;
								public static STD_CLASS: number;
								public static STD_JAVA_TYPE: number;
								public static STD_CURRENCY: number;
								public static STD_PATTERN: number;
								public static STD_LOCALE: number;
								public static STD_CHARSET: number;
								public static STD_TIME_ZONE: number;
								public static STD_INET_ADDRESS: number;
								public static STD_INET_SOCKET_ADDRESS: number;
								public static LOCALE_EXT_MARKER: string;
								public _kind: number;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public _deserializeFromEmptyStringDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _deserialize(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public _shouldTrim(): boolean;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public _firstHyphenOrUnderscore(str: string): number;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
								public constructor(valueType: java.lang.Class<any>, kind: number);
							}
							export class StringBufferDeserializer extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.StringBufferDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _deserialize(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class StringBuilderDeserializer extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.StringBuilderDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _deserialize(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class JdkDeserializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JdkDeserializers>;
							public constructor();
							public static find(rawType: java.lang.Class<any>, clsName: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public static hasDeserializerFor(rawType: java.lang.Class<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class JsonLocationInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator.Base {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator>;
							public constructor();
							public constructor(type: java.lang.Class<any>);
							public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, props: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], buffer: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer): any;
							public canCreateFromObjectWith(): boolean;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public getFromObjectArguments(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, args: any[]): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class JsonNodeDeserializer extends com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<com.fasterxml.jackson.databind.JsonNode> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonNode;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonNode;
							public constructor(vc: java.lang.Class<any>, supportsUpdates: java.lang.Boolean);
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public static getDeserializer(nodeClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
						export module JsonNodeDeserializer {
							export class ArrayDeserializer extends com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<com.fasterxml.jackson.databind.node.ArrayNode> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ArrayDeserializer>;
								public static _instance: com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ArrayDeserializer;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, arrayNode: com.fasterxml.jackson.databind.node.ArrayNode): com.fasterxml.jackson.databind.node.ArrayNode;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public static getInstance(): com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ArrayDeserializer;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(vc: java.lang.Class<any>, supportsUpdates: java.lang.Boolean);
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.node.ArrayNode;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ObjectDeserializer extends com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer<com.fasterxml.jackson.databind.node.ObjectNode> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ObjectDeserializer>;
								public static _instance: com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ObjectDeserializer;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, node: com.fasterxml.jackson.databind.node.ObjectNode): com.fasterxml.jackson.databind.node.ObjectNode;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public static getInstance(): com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ObjectDeserializer;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.node.ObjectNode;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(vc: java.lang.Class<any>, supportsUpdates: java.lang.Boolean);
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class MapDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Map<any,any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapDeserializer>;
							public _keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer;
							public _standardStringKey: boolean;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _propertyBasedCreator: com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
							public _hasDefaultCreator: boolean;
							public _ignorableProperties: java.util.Set<string>;
							public _includableProperties: java.util.Set<string>;
							public _inclusionChecker: com.fasterxml.jackson.databind.util.IgnorePropertiesUtil.Checker;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Map<any,any>;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(src: com.fasterxml.jackson.databind.deser.std.MapDeserializer);
							public isCachable(): boolean;
							public withResolved(keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, ignorable: java.util.Set<string>, includable: java.util.Set<string>): com.fasterxml.jackson.databind.deser.std.MapDeserializer;
							public getMapClass(): java.lang.Class<any>;
							public setIgnorableProperties(ignorable: java.util.Set<string>): void;
							public constructor(mapType: com.fasterxml.jackson.databind.JavaType, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public constructor(src: com.fasterxml.jackson.databind.deser.std.MapDeserializer, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, ignorable: java.util.Set<string>, includable: java.util.Set<string>);
							public withResolved(keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, ignorable: java.util.Set<string>): com.fasterxml.jackson.databind.deser.std.MapDeserializer;
							public _readAndBindStringKeyMap(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map<any,any>): void;
							public getValueType(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JavaType;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _readAndUpdate(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map<any,any>): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							/** @deprecated */
							public setIgnorableProperties(ignorable: string[]): void;
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.MapDeserializer, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, ignorable: java.util.Set<string>);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map<any,any>): java.util.Map<any,any>;
							public setIncludableProperties(includable: java.util.Set<string>): void;
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _isStdKeyDeser(mapType: com.fasterxml.jackson.databind.JavaType, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer): boolean;
							public _readAndUpdateStringKeyMap(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map<any,any>): void;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _deserializeUsingCreator(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Map<any,any>;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getValueType(): com.fasterxml.jackson.databind.JavaType;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _readAndBind(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map<any,any>): void;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
						export module MapDeserializer {
							export class MapReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferring>;
								public next: java.util.Map<any,any>;
								public key: any;
								public handleResolvedForwardReference(id: any, value: any): void;
								public handleResolvedForwardReference(param0: any, param1: any): void;
							}
							export class MapReferringAccumulator extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferringAccumulator>;
								public resolveForwardReference(id: any, value: any): void;
								public handleUnresolvedReference(reference: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, key: any): com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;
								public constructor(valueType: java.lang.Class<any>, result: java.util.Map<any,any>);
								public put(key: any, value: any): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class MapEntryDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Map.Entry<any,any>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer>;
							public _keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public withResolved(keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(type: com.fasterxml.jackson.databind.JavaType, keyDeser: com.fasterxml.jackson.databind.KeyDeserializer, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Map.Entry<any,any>;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							/** @deprecated */
							public getNullValue(): any;
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map.Entry<any,any>): java.util.Map.Entry<any,any>;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer);
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class NullifyingDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer>;
							public static instance: com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class NumberDeserializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers>;
							public constructor();
							public static find(rawType: java.lang.Class<any>, clsName: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
						export module NumberDeserializers {
							export class BigDecimalDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.math.BigDecimal> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigDecimalDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigDecimalDeserializer;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.math.BigDecimal;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class BigIntegerDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.math.BigInteger> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigIntegerDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigIntegerDeserializer;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								/** @deprecated */
								public getEmptyValue(): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.math.BigInteger;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class BooleanDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Boolean> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BooleanDeserializer>;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<java.lang.Boolean>, nvl: java.lang.Boolean);
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Boolean;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): java.lang.Boolean;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class ByteDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Byte> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.ByteDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public _parseByte(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Byte;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public constructor(cls: java.lang.Class<java.lang.Byte>, nvl: java.lang.Byte);
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Byte;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class CharacterDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Character> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.CharacterDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor();
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Character;
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(cls: java.lang.Class<java.lang.Character>, nvl: java.lang.Character);
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class DoubleDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Double> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.DoubleDeserializer>;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor(cls: java.lang.Class<java.lang.Double>, nvl: java.lang.Double);
								public static _parseDouble(numStr: string): number;
								public _parseDouble(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Double;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): java.lang.Double;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Double;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class FloatDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Float> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.FloatDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor();
								public constructor(cls: java.lang.Class<java.lang.Float>, nvl: java.lang.Float);
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _parseFloat(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Float;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Float;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class IntegerDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Integer> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.IntegerDeserializer>;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<java.lang.Integer>, nvl: java.lang.Integer);
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): java.lang.Integer;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public isCachable(): boolean;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Integer;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class LongDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Long> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.LongDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Long;
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public isCachable(): boolean;
								public constructor(cls: java.lang.Class<java.lang.Long>, nvl: java.lang.Long);
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class NumberDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.NumberDeserializer>;
								public static instance: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.NumberDeserializer;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export abstract class PrimitiveOrWrapperDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<any>>;
								public _logicalType: com.fasterxml.jackson.databind.type.LogicalType;
								public _nullValue: any;
								public _emptyValue: any;
								public _primitive: boolean;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								/** @deprecated */
								public getEmptyValue(): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
							export class ShortDeserializer extends com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer<java.lang.Short> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.NumberDeserializers.ShortDeserializer>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Short;
								/** @deprecated */
								public constructor(vc: java.lang.Class<any>, nvl: any, empty: any);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _parseShort(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Short;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								/** @deprecated */
								public getNullValue(): any;
								public constructor(cls: java.lang.Class<java.lang.Short>, nvl: java.lang.Short);
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public constructor(vc: java.lang.Class<any>, logicalType: com.fasterxml.jackson.databind.type.LogicalType, nvl: any, empty: any);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class ObjectArrayDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any[]> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer>;
							public _untyped: boolean;
							public _elementClass: java.lang.Class<any>;
							public _elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _emptyValue: any[];
							public constructor(vc: java.lang.Class<any>);
							public withDeserializer(elemTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elemDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public handleNonArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any[];
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public isCachable(): boolean;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any[]): any[];
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer, elemDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, elemTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public withResolved(elemTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elemDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							/** @deprecated */
							public getEmptyValue(): any;
							public constructor(arrayType0: com.fasterxml.jackson.databind.JavaType, elemDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, elemTypeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer);
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any[];
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any[];
							/** @deprecated */
							public getNullValue(): any;
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserializeFromBase64(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.Byte[];
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class PrimitiveArrayDeserializers<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>>;
							public _unwrapSingle: java.lang.Boolean;
							public _nuller: com.fasterxml.jackson.databind.deser.NullValueProvider;
							public constructor(vc: java.lang.Class<any>);
							public _concat(param0: any, param1: any): any;
							public _constructEmpty(): any;
							public constructor(cls: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public handleNonArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							/** @deprecated */
							public getEmptyValue(): any;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public static forType(rawType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _failOnNull(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
						export module PrimitiveArrayDeserializers {
							export class BooleanDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<boolean[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.BooleanDeser>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.BooleanDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): boolean[];
								public _concat(oldValue: boolean[], newValue: boolean[]): boolean[];
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public _constructEmpty(): boolean[];
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public _concat(param0: any, param1: any): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): boolean[];
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ByteDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ByteDeser>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public _constructEmpty(): number[];
								public constructor();
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public _concat(param0: any, param1: any): any;
								public _concat(oldValue: number[], newValue: number[]): number[];
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ByteDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class CharDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<string[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.CharDeser>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public _constructEmpty(): string[];
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): string[];
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): string[];
								public _concat(oldValue: string[], newValue: string[]): string[];
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.CharDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public _concat(param0: any, param1: any): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class DoubleDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.DoubleDeser>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public _constructEmpty(): number[];
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.DoubleDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public constructor();
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public _concat(param0: any, param1: any): any;
								public _concat(oldValue: number[], newValue: number[]): number[];
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class FloatDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.FloatDeser>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.FloatDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public _constructEmpty(): number[];
								public constructor();
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public _concat(param0: any, param1: any): any;
								public _concat(oldValue: number[], newValue: number[]): number[];
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class IntDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.IntDeser>;
								public static instance: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.IntDeser;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.IntDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public _constructEmpty(): number[];
								public constructor();
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public _concat(param0: any, param1: any): any;
								public _concat(oldValue: number[], newValue: number[]): number[];
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class LongDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.LongDeser>;
								public static instance: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.LongDeser;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public _constructEmpty(): number[];
								public constructor();
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.LongDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public _concat(param0: any, param1: any): any;
								public _concat(oldValue: number[], newValue: number[]): number[];
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
							export class ShortDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ShortDeser>;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.ShortDeser, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public withResolved(param0: com.fasterxml.jackson.databind.deser.NullValueProvider, param1: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public withResolved(nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, existing: any): any;
								public _constructEmpty(): number[];
								public constructor();
								public handleSingleElementUnwrapped(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number[];
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(cls: java.lang.Class<any>);
								public _concat(param0: any, param1: any): any;
								public _concat(oldValue: number[], newValue: number[]): number[];
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public _constructEmpty(): any;
								public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public handleSingleElementUnwrapped(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(base: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public getNullValue(): any;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class ReferenceTypeDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer<any>>;
							public _fullType: com.fasterxml.jackson.databind.JavaType;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _valueTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							/** @deprecated */
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public referenceValue(param0: any): any;
							public getValueType(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JavaType;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							/** @deprecated */
							public getEmptyValue(): any;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, reference: any): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public getReferenced(param0: any): any;
							public updateReference(param0: any, param1: any): any;
							public withResolved(param0: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param1: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer<any>;
							public getValueType(): com.fasterxml.jackson.databind.JavaType;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType, vi: com.fasterxml.jackson.databind.deser.ValueInstantiator, typeDeser: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StackTraceElementDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.lang.StackTraceElement> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							/** @deprecated */
							public constructValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext, className: string, methodName: string, fileName: string, lineNumber: number, moduleName: string, moduleVersion: string): java.lang.StackTraceElement;
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext, className: string, methodName: string, fileName: string, lineNumber: number, moduleName: string, moduleVersion: string, classLoaderName: string): java.lang.StackTraceElement;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.StackTraceElement;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StdDelegatingDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer<any>>;
							public _converter: com.fasterxml.jackson.databind.util.Converter<any,any>;
							public _delegateType: com.fasterxml.jackson.databind.JavaType;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public handledType(): java.lang.Class<any>;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(converter: com.fasterxml.jackson.databind.util.Converter<any,any>, delegateType: com.fasterxml.jackson.databind.JavaType, delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public withDelegate(converter: com.fasterxml.jackson.databind.util.Converter<any,any>, delegateType: com.fasterxml.jackson.databind.JavaType, delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer<any>;
							public getDelegatee(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(converter: com.fasterxml.jackson.databind.util.Converter<any,any>);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public convertValue(delegateValue: any): any;
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer<any>);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _handleIncompatibleUpdateValue(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class StdDeserializer<T>  extends com.fasterxml.jackson.databind.JsonDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>>;
							public static F_MASK_INT_COERCIONS: number;
							public static F_MASK_ACCEPT_ARRAYS: number;
							public _valueClass: java.lang.Class<any>;
							public _valueType: com.fasterxml.jackson.databind.JavaType;
							public handledType(): java.lang.Class<any>;
							public _checkDoubleSpecialValue(text: string): java.lang.Double;
							/** @deprecated */
							public _verifyNullForScalarCoercion(ctxt: com.fasterxml.jackson.databind.DeserializationContext, str: string): void;
							public constructor(vc: java.lang.Class<any>);
							public _parseDateFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public _parseString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): string;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public _parseLong(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: java.lang.Class<any>): java.lang.Long;
							public _shortOverflow(value: number): boolean;
							public _parseBytePrimitive(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number;
							public _findCoercionFromBlankString(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.cfg.CoercionAction;
							public _isFalse(text: string): boolean;
							public _parseBoolean(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: java.lang.Class<any>): java.lang.Boolean;
							public _parseIntPrimitive(ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): number;
							public _isIntNumber(text: string): boolean;
							public findContentNullStyle(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.annotation.Nulls;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _checkCoercionFail(ctxt: com.fasterxml.jackson.databind.DeserializationContext, act: com.fasterxml.jackson.databind.cfg.CoercionAction, targetType: java.lang.Class<any>, inputValue: any, inputDesc: string): com.fasterxml.jackson.databind.cfg.CoercionAction;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public static _parseDouble(numStr: string): number;
							public _checkFromStringCoercion(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: string): com.fasterxml.jackson.databind.cfg.CoercionAction;
							public _parseShortPrimitive(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number;
							public static _neitherNull(a: any, b: any): boolean;
							public _parseFloatPrimitive(ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): number;
							public _hasTextualNull(value: string): boolean;
							public _nonNullNumber(n: java.lang.Number): java.lang.Number;
							public isDefaultKeyDeserializer(keyDeser: com.fasterxml.jackson.databind.KeyDeserializer): boolean;
							public handleUnknownProperty(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, instanceOrClass: any, propName: string): void;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public findValueNullProvider(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.deser.SettableBeanProperty, propMetadata: com.fasterxml.jackson.databind.PropertyMetadata): com.fasterxml.jackson.databind.deser.NullValueProvider;
							/** @deprecated */
							public _verifyNumberForScalarCoercion(ctxt: com.fasterxml.jackson.databind.DeserializationContext, p: com.fasterxml.jackson.core.JsonParser): void;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _verifyNullForPrimitiveCoercion(ctxt: com.fasterxml.jackson.databind.DeserializationContext, str: string): void;
							public _isPosInf(text: string): boolean;
							public getValueType(): com.fasterxml.jackson.databind.JavaType;
							public _verifyNullForPrimitive(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							public _coercedTypeDesc(): string;
							public _isNegInf(text: string): boolean;
							public findFormatOverrides(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.BeanProperty, typeForDefaults: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public _deserializeFromString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _checkFromStringCoercion(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: string, logicalType: com.fasterxml.jackson.databind.type.LogicalType, rawTargetType: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.CoercionAction;
							public _isNaN(text: string): boolean;
							public _intOverflow(value: number): boolean;
							/** @deprecated */
							public _coerceEmptyString(ctxt: com.fasterxml.jackson.databind.DeserializationContext, isPrimitive: boolean): any;
							public findFormatFeature(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.BeanProperty, typeForDefaults: java.lang.Class<any>, feat: com.fasterxml.jackson.annotation.JsonFormat.Feature): java.lang.Boolean;
							/** @deprecated */
							public _verifyStringForScalarCoercion(ctxt: com.fasterxml.jackson.databind.DeserializationContext, str: string): void;
							public _parseDoublePrimitive(ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): number;
							public _coerceBooleanFromInt(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, rawTargetType: java.lang.Class<any>): java.lang.Boolean;
							/** @deprecated */
							public _parseBooleanFromInt(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): boolean;
							public _parseLongPrimitive(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number;
							public isDefaultDeserializer(deserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): boolean;
							public findConvertingContentDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.BeanProperty, existingDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _findCoercionFromEmptyString(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.cfg.CoercionAction;
							public getValueType(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JavaType;
							public _deserializeFromEmptyString(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, act: com.fasterxml.jackson.databind.cfg.CoercionAction, rawTargetType: java.lang.Class<any>, desc: string): any;
							public _checkFloatSpecialValue(text: string): java.lang.Float;
							/** @deprecated */
							public getValueClass(): java.lang.Class<any>;
							/** @deprecated */
							public _parseBooleanPrimitive(ctxt: com.fasterxml.jackson.databind.DeserializationContext, p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>): boolean;
							public _parseInteger(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, targetType: java.lang.Class<any>): java.lang.Integer;
							public constructor();
							public _parseDate(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
							public _parseDate(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Date;
							public _findCoercionFromEmptyArray(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.cfg.CoercionAction;
							public findDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _parseBooleanPrimitive(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): boolean;
							public _verifyEndArrayForSingle(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							public _deserializeWrappedValue(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _coerceIntegral(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public _deserializeFromEmpty(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _parseFloatPrimitive(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number;
							/** @deprecated */
							public _coerceNullToken(ctxt: com.fasterxml.jackson.databind.DeserializationContext, isPrimitive: boolean): any;
							public _checkTextualNull(ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): boolean;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public findContentNullProvider(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.BeanProperty, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.NullValueProvider;
							public _parseLongPrimitive(ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): number;
							public _parseLong(ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): java.lang.Long;
							/** @deprecated */
							public _failDoubleToIntCoercion(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: string): void;
							public _findNullProvider(ctxt: com.fasterxml.jackson.databind.DeserializationContext, prop: com.fasterxml.jackson.databind.BeanProperty, nulls: com.fasterxml.jackson.annotation.Nulls, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.deser.NullValueProvider;
							/** @deprecated */
							public getNullValue(): any;
							public _checkFloatToIntCoercion(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, rawTargetType: java.lang.Class<any>): com.fasterxml.jackson.databind.cfg.CoercionAction;
							/** @deprecated */
							public _coerceTextualNull(ctxt: com.fasterxml.jackson.databind.DeserializationContext, isPrimitive: boolean): any;
							/** @deprecated */
							public _isEmptyOrTextualNull(value: string): boolean;
							public handleMissingEndArrayForSingle(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							public _parseIntPrimitive(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number;
							public _reportFailedNullCoerce(ctxt: com.fasterxml.jackson.databind.DeserializationContext, state: boolean, feature: java.lang.Enum<any>, inputDesc: string): void;
							public _isTrue(text: string): boolean;
							public _parseInteger(ctxt: com.fasterxml.jackson.databind.DeserializationContext, text: string): java.lang.Integer;
							public _byteOverflow(value: number): boolean;
							public _parseDoublePrimitive(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): number;
							public static _isBlank(text: string): boolean;
							public _deserializeFromArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StdKeyDeserializer extends com.fasterxml.jackson.databind.KeyDeserializer implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer>;
							public static TYPE_BOOLEAN: number;
							public static TYPE_BYTE: number;
							public static TYPE_SHORT: number;
							public static TYPE_CHAR: number;
							public static TYPE_INT: number;
							public static TYPE_LONG: number;
							public static TYPE_FLOAT: number;
							public static TYPE_DOUBLE: number;
							public static TYPE_LOCALE: number;
							public static TYPE_DATE: number;
							public static TYPE_CALENDAR: number;
							public static TYPE_UUID: number;
							public static TYPE_URI: number;
							public static TYPE_URL: number;
							public static TYPE_CLASS: number;
							public static TYPE_CURRENCY: number;
							public static TYPE_BYTE_ARRAY: number;
							public _kind: number;
							public _keyClass: java.lang.Class<any>;
							public _deser: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>;
							public constructor();
							public constructor(kind: number, cls: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
							public getKeyClass(): java.lang.Class<any>;
							public constructor(kind: number, cls: java.lang.Class<any>);
							public _weirdKey(ctxt: com.fasterxml.jackson.databind.DeserializationContext, key: string, e: java.lang.Exception): any;
							public _parseInt(key: string): number;
							public _parseLong(key: string): number;
							public _parseDouble(key: string): number;
							public static forType(raw: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
							public deserializeKey(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeKey(key: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _parse(key: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
						export module StdKeyDeserializer {
							export class DelegatingKD extends com.fasterxml.jackson.databind.KeyDeserializer implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.DelegatingKD>;
								public _keyClass: java.lang.Class<any>;
								public _delegate: com.fasterxml.jackson.databind.JsonDeserializer<any>;
								public deserializeKey(key: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public deserializeKey(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public constructor(cls: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
								public getKeyClass(): java.lang.Class<any>;
							}
							export class EnumKD extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.EnumKD>;
								public _byNameResolver: com.fasterxml.jackson.databind.util.EnumResolver;
								public _factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
								public _byToStringResolver: com.fasterxml.jackson.databind.util.EnumResolver;
								public _enumDefaultValue: java.lang.Enum<any>;
								public _parse(key: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(kind: number, cls: java.lang.Class<any>);
								public constructor();
								public constructor(kind: number, cls: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
								public constructor(er: com.fasterxml.jackson.databind.util.EnumResolver, factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod);
							}
							export class StringCtorKeyDeserializer extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringCtorKeyDeserializer>;
								public _ctor: java.lang.reflect.Constructor<any>;
								public _parse(key: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(kind: number, cls: java.lang.Class<any>);
								public constructor();
								public constructor(ctor: java.lang.reflect.Constructor<any>);
								public constructor(kind: number, cls: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
							}
							export class StringFactoryKeyDeserializer extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringFactoryKeyDeserializer>;
								public _parse(key: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(fm: java.lang.reflect.Method);
								public constructor(kind: number, cls: java.lang.Class<any>);
								public constructor();
								public constructor(kind: number, cls: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any>);
							}
							export class StringKD extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringKD>;
								public static forType(nominalType: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.StringKD;
								public static forType(raw: java.lang.Class<any>): com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
								public deserializeKey(key: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StdKeyDeserializers extends java.lang.Object implements com.fasterxml.jackson.databind.deser.KeyDeserializers, java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers>;
							public constructor();
							public static constructEnumKeyDeserializer(enumResolver: com.fasterxml.jackson.databind.util.EnumResolver): com.fasterxml.jackson.databind.KeyDeserializer;
							public static findStringBasedKeyDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.KeyDeserializer;
							public static constructEnumKeyDeserializer(enumResolver: com.fasterxml.jackson.databind.util.EnumResolver, factory: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.KeyDeserializer;
							public static constructDelegatingKeyDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.KeyDeserializer;
							public findKeyDeserializer(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
							public findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class StdNodeBasedDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> implements com.fasterxml.jackson.databind.deser.ResolvableDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer<any>>;
							public _treeDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(vc: java.lang.Class<any>);
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(targetType: com.fasterxml.jackson.databind.JavaType);
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public convert(param0: com.fasterxml.jackson.databind.JsonNode, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public constructor(targetType: java.lang.Class<any>);
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeWithType(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, td: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer<any>);
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export abstract class StdScalarDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StdValueInstantiator extends com.fasterxml.jackson.databind.deser.ValueInstantiator implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator>;
							public _valueTypeDesc: string;
							public _valueClass: java.lang.Class<any>;
							public _defaultCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _withArgsCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _constructorArguments: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public _delegateType: com.fasterxml.jackson.databind.JavaType;
							public _delegateCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _delegateArguments: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public _arrayDelegateType: com.fasterxml.jackson.databind.JavaType;
							public _arrayDelegateCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _arrayDelegateArguments: com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public _fromStringCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromIntCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromLongCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromBigIntegerCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromDoubleCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromBigDecimalCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public _fromBooleanCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public getArrayDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public canCreateFromBoolean(): boolean;
							public getValueTypeDesc(): string;
							public createFromDouble(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
							public createUsingDelegate(ctxt: com.fasterxml.jackson.databind.DeserializationContext, delegate: any): any;
							public configureFromArraySettings(arrayDelegateCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, arrayDelegateType: com.fasterxml.jackson.databind.JavaType, arrayDelegateArgs: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]): void;
							/** @deprecated */
							public wrapException(t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public getFromObjectArguments(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.deser.SettableBeanProperty[];
							public createFromInt(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
							public canCreateFromDouble(): boolean;
							public getDefaultCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public configureFromLongCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public wrapAsJsonMappingException(ctxt: com.fasterxml.jackson.databind.DeserializationContext, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public canCreateFromString(): boolean;
							public constructor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: com.fasterxml.jackson.databind.JavaType);
							public configureFromDoubleCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public configureFromStringCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdValueInstantiator);
							public getValueClass(): java.lang.Class<any>;
							public canInstantiate(): boolean;
							public canCreateUsingDefault(): boolean;
							public createFromBigInteger(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: java.math.BigInteger): any;
							public getDelegateType(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
							public createFromBoolean(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: boolean): any;
							public canCreateUsingDelegate(): boolean;
							public configureFromBigIntegerCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, props: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], buffer: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer): any;
							public getArrayDelegateType(config: com.fasterxml.jackson.databind.DeserializationConfig): com.fasterxml.jackson.databind.JavaType;
							public canCreateFromBigDecimal(): boolean;
							public configureFromBigDecimalCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public canCreateFromInt(): boolean;
							public configureFromIntCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							/** @deprecated */
							public constructor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: java.lang.Class<any>);
							public canCreateFromLong(): boolean;
							public configureFromBooleanCreator(creator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams): void;
							public createFromBigDecimal(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: java.math.BigDecimal): any;
							public constructor();
							public createUsingArrayDelegate(ctxt: com.fasterxml.jackson.databind.DeserializationContext, delegate: any): any;
							public getDelegateCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							public createFromString(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: string): any;
							public canCreateFromObjectWith(): boolean;
							public createFromObjectWith(ctxt: com.fasterxml.jackson.databind.DeserializationContext, args: any[]): any;
							public getWithArgsCreator(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
							/** @deprecated */
							public unwrapAndWrapException(ctxt: com.fasterxml.jackson.databind.DeserializationContext, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public canCreateFromBigInteger(): boolean;
							public canCreateUsingArrayDelegate(): boolean;
							public createUsingDefault(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public createFromLong(ctxt: com.fasterxml.jackson.databind.DeserializationContext, value: number): any;
							public rewrapCtorProblem(ctxt: com.fasterxml.jackson.databind.DeserializationContext, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
							public configureFromObjectSettings(defaultCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, delegateCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, delegateType: com.fasterxml.jackson.databind.JavaType, delegateArgs: com.fasterxml.jackson.databind.deser.SettableBeanProperty[], withArgsCreator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, constructorArgs: com.fasterxml.jackson.databind.deser.SettableBeanProperty[]): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StringArrayDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<string[]> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer>;
							public static instance: com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
							public _elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<string>;
							public _nullProvider: com.fasterxml.jackson.databind.deser.NullValueProvider;
							public _unwrapSingle: java.lang.Boolean;
							public _skipNullValues: boolean;
							public _deserializeCustom(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, old: string[]): string[];
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getEmptyAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							/** @deprecated */
							public getEmptyValue(): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: string[]): string[];
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): string[];
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StringCollectionDeserializer extends com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<java.util.Collection<string>> implements com.fasterxml.jackson.databind.deser.ContextualDeserializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer>;
							public _valueDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<string>;
							public _valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _delegateDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor(collectionType: com.fasterxml.jackson.databind.JavaType, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator, delegateDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public isCachable(): boolean;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Collection<string>): java.util.Collection<string>;
							public constructor(collectionType: com.fasterxml.jackson.databind.JavaType, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator);
							public withResolved(delegateDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, valueDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer;
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public getContentDeserializer(): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Collection<string>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase<any>);
							/** @deprecated */
							public getNullValue(): any;
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType, nuller: com.fasterxml.jackson.databind.deser.NullValueProvider, unwrapSingle: java.lang.Boolean);
							public constructor(selfType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class StringDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<string> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.StringDeserializer>;
							public static instance: com.fasterxml.jackson.databind.deser.std.StringDeserializer;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							/** @deprecated */
							public getEmptyValue(): any;
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): string;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): string;
							public isCachable(): boolean;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class ThrowableDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer>;
							public static PROP_NAME_MESSAGE: string;
							public static PROP_NAME_SUPPRESSED: string;
							public constructor(baseDeserializer: com.fasterxml.jackson.databind.deser.BeanDeserializer);
							public constructor(vc: java.lang.Class<any>);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializer, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>, includableProps: java.util.Set<string>);
							public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.Set<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, props: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, oir: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader);
							/** @deprecated */
							public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.HashSet<string>, ignoreAllUnknown: boolean, hasViews: boolean);
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignorableProps: java.util.Set<string>);
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public unwrappingDeserializer(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeFromObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public constructor(builder: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, backRefs: java.util.Map<string,com.fasterxml.jackson.databind.deser.SettableBeanProperty>, ignorableProps: java.util.HashSet<string>, ignoreAllUnknown: boolean, includableProps: java.util.Set<string>, hasViews: boolean);
							public constructor(src: com.fasterxml.jackson.databind.deser.BeanDeserializerBase, ignoreAllUnknown: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
							public unwrappingDeserializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class TokenBufferDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<com.fasterxml.jackson.databind.util.TokenBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.util.TokenBuffer;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class UUIDDeserializer extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<java.util.UUID> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.UUIDDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserializeEmbedded(ob: any, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.UUID;
							public constructor(vc: java.lang.Class<any>);
							/** @deprecated */
							public getEmptyValue(): any;
							public _deserializeEmbedded(ob: any, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserialize(id: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.UUID;
							public getEmptyValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module deser {
					export module std {
						export class UntypedObjectDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer>;
							public static NO_OBJECTS: any[];
							public _mapDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _listDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _stringDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _numberDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _listType: com.fasterxml.jackson.databind.JavaType;
							public _mapType: com.fasterxml.jackson.databind.JavaType;
							public _nonMerging: boolean;
							public constructor(vc: java.lang.Class<any>);
							public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
							public _findCustomDeser(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
							public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
							public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
							public constructor(listType: com.fasterxml.jackson.databind.JavaType, mapType: com.fasterxml.jackson.databind.JavaType);
							public _clearIfStdImpl(deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public isCachable(): boolean;
							public _mapObjectWithDups(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map<string,any>, key: string, oldValue: any, newValue: any, nextKey: string): any;
							public mapArrayToArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any[];
							public createContextual(ctxt: com.fasterxml.jackson.databind.DeserializationContext, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public mapArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Collection<any>): any;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public mapObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer, nonMerging: boolean);
							public mapArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public resolve(param0: com.fasterxml.jackson.databind.DeserializationContext): void;
							public mapObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, m: java.util.Map<any,any>): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public constructor();
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(base: com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer, mapDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, listDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, stringDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>, numberDeser: com.fasterxml.jackson.databind.JsonDeserializer<any>);
							public resolve(ctxt: com.fasterxml.jackson.databind.DeserializationContext): void;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public createContextual(param0: com.fasterxml.jackson.databind.DeserializationContext, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
						export module UntypedObjectDeserializer {
							export class Vanilla extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla>;
								public static std: com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla;
								public _nonMerging: boolean;
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer): any;
								public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public static instance(nonMerging: boolean): com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla;
								/** @deprecated */
								public mapArrayToArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any[];
								public constructor(vc: java.lang.Class<any>);
								public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
								/** @deprecated */
								public mapObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
								public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public mapArrayToArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, depth: number): any[];
								/** @deprecated */
								public mapArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public mapObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, depth: number): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
								public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor();
								public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
								public constructor(nonMerging: boolean);
								public deserializeWithType(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, intoValue: any): any;
								public mapArray(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, depth: number): any;
								public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
								public supportsUpdate(config: com.fasterxml.jackson.databind.DeserializationConfig): java.lang.Boolean;
								public _mapObjectWithDups(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, result: java.util.Map<string,any>, initialKey: string, oldValue: any, newValue: any, nextKey: string): any;
								/** @deprecated */
								public getNullValue(): any;
								public logicalType(): com.fasterxml.jackson.databind.type.LogicalType;
								public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
								public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class IgnoredPropertyException extends com.fasterxml.jackson.databind.exc.PropertyBindingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.IgnoredPropertyException>;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: com.fasterxml.jackson.databind.JavaType);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: java.lang.Class<any>);
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation, referringClass: java.lang.Class<any>, propName: string, propertyIds: java.util.Collection<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, referringClass: java.lang.Class<any>, propName: string, propertyIds: java.util.Collection<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
						/** @deprecated */
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, fromObjectOrClass: any, propertyName: string, propertyIds: java.util.Collection<any>): com.fasterxml.jackson.databind.exc.IgnoredPropertyException;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class InvalidDefinitionException extends com.fasterxml.jackson.databind.JsonMappingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.InvalidDefinitionException>;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
						public _property: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public getProperty(): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, bean: com.fasterxml.jackson.databind.BeanDescription, prop: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition): com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, bean: com.fasterxml.jackson.databind.BeanDescription, prop: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, type: com.fasterxml.jackson.databind.JavaType);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, bean: com.fasterxml.jackson.databind.BeanDescription, prop: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition): com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, bean: com.fasterxml.jackson.databind.BeanDescription, prop: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public constructor(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, type: com.fasterxml.jackson.databind.JavaType);
						public getBeanDescription(): com.fasterxml.jackson.databind.BeanDescription;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class InvalidFormatException extends com.fasterxml.jackson.databind.exc.MismatchedInputException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.InvalidFormatException>;
						public _value: any;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public getValue(): any;
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, value: any, targetType: java.lang.Class<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: com.fasterxml.jackson.databind.JavaType);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: java.lang.Class<any>);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, value: any, targetType: java.lang.Class<any>): com.fasterxml.jackson.databind.exc.InvalidFormatException;
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, value: any, targetType: java.lang.Class<any>);
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, value: any, targetType: java.lang.Class<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
						/** @deprecated */
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class InvalidNullException extends com.fasterxml.jackson.databind.exc.MismatchedInputException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.InvalidNullException>;
						public _propertyName: com.fasterxml.jackson.databind.PropertyName;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, pname: com.fasterxml.jackson.databind.PropertyName);
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public getPropertyName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: com.fasterxml.jackson.databind.JavaType);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, name: com.fasterxml.jackson.databind.PropertyName, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.exc.InvalidNullException;
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: java.lang.Class<any>);
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
						/** @deprecated */
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class InvalidTypeIdException extends com.fasterxml.jackson.databind.exc.MismatchedInputException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.InvalidTypeIdException>;
						public _baseType: com.fasterxml.jackson.databind.JavaType;
						public _typeId: string;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public getTypeId(): string;
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, baseType: com.fasterxml.jackson.databind.JavaType, typeId: string);
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: com.fasterxml.jackson.databind.JavaType);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, baseType: com.fasterxml.jackson.databind.JavaType, typeId: string): com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: java.lang.Class<any>);
						public getBaseType(): com.fasterxml.jackson.databind.JavaType;
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
						/** @deprecated */
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class MismatchedInputException extends com.fasterxml.jackson.databind.JsonMappingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.MismatchedInputException>;
						public _targetType: java.lang.Class<any>;
						public constructor(processor: java.io.Closeable, msg: string);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: java.lang.Class<any>);
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public setTargetType(t: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: com.fasterxml.jackson.databind.JavaType);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
						/** @deprecated */
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public getTargetType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export abstract class PropertyBindingException extends com.fasterxml.jackson.databind.exc.MismatchedInputException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.PropertyBindingException>;
						public _referringClass: java.lang.Class<any>;
						public _propertyName: string;
						public _propertyIds: java.util.Collection<any>;
						public _propertiesAsString: string;
						public getReferringClass(): java.lang.Class<any>;
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: java.lang.Class<any>);
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public getMessageSuffix(): string;
						public getPropertyName(): string;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation, referringClass: java.lang.Class<any>, propName: string, propertyIds: java.util.Collection<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: com.fasterxml.jackson.databind.JavaType);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, referringClass: java.lang.Class<any>, propName: string, propertyIds: java.util.Collection<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public getKnownPropertyIds(): java.util.Collection<any>;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class UnrecognizedPropertyException extends com.fasterxml.jackson.databind.exc.PropertyBindingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException>;
						public static from(p: com.fasterxml.jackson.core.JsonParser, fromObjectOrClass: any, propertyName: string, propertyIds: java.util.Collection<any>): com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: com.fasterxml.jackson.databind.JavaType);
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public constructor(processor: java.io.Closeable, msg: string);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, targetType: java.lang.Class<any>);
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: java.lang.Class<any>, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, targetType: com.fasterxml.jackson.databind.JavaType, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation, referringClass: java.lang.Class<any>, propName: string, propertyIds: java.util.Collection<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string);
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, referringClass: java.lang.Class<any>, propName: string, propertyIds: java.util.Collection<any>);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
						/** @deprecated */
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.exc.MismatchedInputException;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module exc {
					export class ValueInstantiationException extends com.fasterxml.jackson.databind.JsonMappingException {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.exc.ValueInstantiationException>;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor(processor: java.io.Closeable, msg: string);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string);
						/** @deprecated */
						public constructor(msg: string, rootCause: java.lang.Throwable);
						public constructor(processor: java.io.Closeable, msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, type: com.fasterxml.jackson.databind.JavaType, cause: java.lang.Throwable): com.fasterxml.jackson.databind.exc.ValueInstantiationException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string, t: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(ctxt: com.fasterxml.jackson.databind.DeserializationContext, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.exc.ValueInstantiationException;
						public static from(ctxt: com.fasterxml.jackson.databind.SerializerProvider, msg: string, problem: java.lang.Throwable): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation);
						public constructor(processor: java.io.Closeable, msg: string, problem: java.lang.Throwable);
						public static from(p: com.fasterxml.jackson.core.JsonParser, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, type: com.fasterxml.jackson.databind.JavaType);
						public static from(g: com.fasterxml.jackson.core.JsonGenerator, msg: string): com.fasterxml.jackson.databind.JsonMappingException;
						/** @deprecated */
						public constructor(msg: string, loc: com.fasterxml.jackson.core.JsonLocation, rootCause: java.lang.Throwable);
						public constructor(p: com.fasterxml.jackson.core.JsonParser, msg: string, type: com.fasterxml.jackson.databind.JavaType, cause: java.lang.Throwable);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class CoreXMLDeserializers extends com.fasterxml.jackson.databind.deser.Deserializers.Base {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLDeserializers>;
						public static TYPE_DURATION: number;
						public static TYPE_G_CALENDAR: number;
						public static TYPE_QNAME: number;
						public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findArrayDeserializer(type: com.fasterxml.jackson.databind.type.ArrayType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findBeanDeserializer(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public hasDeserializerFor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: java.lang.Class<any>): boolean;
						public findEnumDeserializer(type: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapDeserializer(type: com.fasterxml.jackson.databind.type.MapType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionDeserializer(type: com.fasterxml.jackson.databind.type.CollectionType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findTreeNodeDeserializer(nodeType: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionLikeDeserializer(type: com.fasterxml.jackson.databind.type.CollectionLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapLikeDeserializer(type: com.fasterxml.jackson.databind.type.MapLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(refType: com.fasterxml.jackson.databind.type.ReferenceType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contentDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
					export module CoreXMLDeserializers {
						export class Std extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLDeserializers.Std>;
							public _kind: number;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(vc: java.lang.Class<any>);
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public constructor(raw: java.lang.Class<any>, kind: number);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public _deserialize(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public _gregorianFromDate(ctxt: com.fasterxml.jackson.databind.DeserializationContext, d: java.util.Date): javax.xml.datatype.XMLGregorianCalendar;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class CoreXMLSerializers extends com.fasterxml.jackson.databind.ser.Serializers.Base {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLSerializers>;
						public constructor();
						public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.MapLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.CollectionLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findReferenceSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.ReferenceType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, contentValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findArraySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.ArrayType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.CollectionType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.MapType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
					export module CoreXMLSerializers {
						export class XMLGregorianCalendarSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<javax.xml.datatype.XMLGregorianCalendar> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.CoreXMLSerializers.XMLGregorianCalendarSerializer>;
							public constructor();
							public serialize(value: javax.xml.datatype.XMLGregorianCalendar, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public _convert(input: javax.xml.datatype.XMLGregorianCalendar): java.util.Calendar;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getDelegatee(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: javax.xml.datatype.XMLGregorianCalendar): boolean;
							public constructor(del: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeWithType(value: javax.xml.datatype.XMLGregorianCalendar, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export abstract class DOMDeserializer<T>  extends com.fasterxml.jackson.databind.deser.std.FromStringDeserializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMDeserializer<any>>;
						public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
						public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						/** @deprecated */
						public getNullValue(): any;
						public constructor();
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public constructor(cls: java.lang.Class<any>);
						public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
						public documentBuilder(): javax.xml.parsers.DocumentBuilder;
						public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(vc: java.lang.Class<any>);
						public parse(value: string): org.w3c.dom.Document;
					}
					export module DOMDeserializer {
						export class DocumentDeserializer extends com.fasterxml.jackson.databind.ext.DOMDeserializer<org.w3c.dom.Document> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMDeserializer.DocumentDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserialize(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): org.w3c.dom.Document;
							public constructor(cls: java.lang.Class<any>);
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
						export class NodeDeserializer extends com.fasterxml.jackson.databind.ext.DOMDeserializer<org.w3c.dom.Node> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMDeserializer.NodeDeserializer>;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
							public constructor();
							public _deserialize(param0: string, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserialize(value: string, ctxt: com.fasterxml.jackson.databind.DeserializationContext): org.w3c.dom.Node;
							public constructor(cls: java.lang.Class<any>);
							public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
							public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
							/** @deprecated */
							public getNullValue(): any;
							public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
							public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
							public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class DOMSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<org.w3c.dom.Node> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.DOMSerializer>;
						public transformerFactory: javax.xml.transform.TransformerFactory;
						public constructor();
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public constructor(t: java.lang.Class<any>, dummy: boolean);
						public serialize(value: org.w3c.dom.Node, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(type: com.fasterxml.jackson.databind.JavaType);
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(t: java.lang.Class<any>);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export abstract class Java7Handlers extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.Java7Handlers>;
						public constructor();
						public getDeserializerForJavaNioFilePath(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public getSerializerForJavaNioFilePath(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public static instance(): com.fasterxml.jackson.databind.ext.Java7Handlers;
						public getClassJavaNioFilePath(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class Java7HandlersImpl extends com.fasterxml.jackson.databind.ext.Java7Handlers {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.Java7HandlersImpl>;
						public getDeserializerForJavaNioFilePath(rawType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public getSerializerForJavaNioFilePath(rawType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor();
						public getDeserializerForJavaNioFilePath(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public getSerializerForJavaNioFilePath(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public getClassJavaNioFilePath(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export abstract class Java7Support extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.Java7Support>;
						public constructor();
						public findTransient(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findConstructorName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): com.fasterxml.jackson.databind.PropertyName;
						public static instance(): com.fasterxml.jackson.databind.ext.Java7Support;
						public hasCreatorAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class Java7SupportImpl extends com.fasterxml.jackson.databind.ext.Java7Support {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.Java7SupportImpl>;
						public hasCreatorAnnotation(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public constructor();
						public findConstructorName(p: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): com.fasterxml.jackson.databind.PropertyName;
						public findTransient(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findConstructorName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): com.fasterxml.jackson.databind.PropertyName;
						public findTransient(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public hasCreatorAnnotation(param0: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class NioPathDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.nio.file.Path> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.NioPathDeserializer>;
						public constructor(valueType: com.fasterxml.jackson.databind.JavaType);
						public getNullValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getNullValue(param0: com.fasterxml.jackson.databind.DeserializationContext): any;
						/** @deprecated */
						public getNullValue(): any;
						public constructor();
						public getNullAccessPattern(): com.fasterxml.jackson.databind.util.AccessPattern;
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.nio.file.Path;
						public deserialize(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(src: com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<any>);
						public constructor(src: com.fasterxml.jackson.databind.deser.std.StdDeserializer<any>);
						public getValueInstantiator(): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public getAbsentValue(ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						public constructor(vc: java.lang.Class<any>);
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, intoValue: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class NioPathSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.nio.file.Path> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.NioPathSerializer>;
						public constructor();
						public serializeWithType(value: java.nio.file.Path, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
						public constructor(t: java.lang.Class<any>, dummy: boolean);
						public serialize(value: java.nio.file.Path, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(type: com.fasterxml.jackson.databind.JavaType);
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(t: java.lang.Class<any>);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class OptionalHandlerFactory extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory>;
						public static instance: com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;
						public constructor();
						public findDeserializer(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public hasDeserializerFor(valueType: java.lang.Class<any>): boolean;
						public findSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ext {
					export class SqlBlobSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.sql.Blob> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ext.SqlBlobSerializer>;
						public serialize(value: java.sql.Blob, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor();
						public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
						/** @deprecated */
						public isEmpty(value: any): boolean;
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: java.sql.Blob): boolean;
						public serializeWithType(value: java.sql.Blob, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
						public _writeValue(value: java.sql.Blob, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(t: java.lang.Class<any>, dummy: boolean);
						public constructor(type: com.fasterxml.jackson.databind.JavaType);
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(t: java.lang.Class<any>);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class AccessorNamingStrategy extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy>;
						public findNameForMutator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public constructor();
						public modifyFieldName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField, param1: string): string;
						public findNameForIsGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public findNameForRegularGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
					}
					export module AccessorNamingStrategy {
						export class Base extends com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Base>;
							public constructor();
							public modifyFieldName(field: com.fasterxml.jackson.databind.introspect.AnnotatedField, name: string): string;
							public findNameForRegularGetter(method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string): string;
							public findNameForMutator(method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string): string;
							public findNameForMutator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
							public findNameForIsGetter(method: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string): string;
							public findNameForRegularGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
							public findNameForIsGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
							public modifyFieldName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField, param1: string): string;
						}
						export abstract class Provider extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider>;
							public constructor();
							public forBuilder(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public forRecord(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public forPOJO(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class Annotated extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.Annotated>;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public isPublic(): boolean;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public hasAnnotation(param0: java.lang.Class<any>): boolean;
						public constructor();
						/** @deprecated */
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						public equals(obj: any): boolean;
						public getRawType(): java.lang.Class<any>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public hasOneOf(param0: java.lang.Class<any>[]): boolean;
						public getName(): string;
						public toString(): string;
						public getModifiers(): number;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedAndMetadata<A, M>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata<any,any>>;
						public annotated: A;
						public metadata: M;
						public static of(ann: com.fasterxml.jackson.databind.introspect.Annotated, md: any): com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata<any,any>;
						public constructor(ann: A, md: M);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedClass extends com.fasterxml.jackson.databind.introspect.Annotated implements com.fasterxml.jackson.databind.introspect.TypeResolutionContext {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedClass>;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _class: java.lang.Class<any>;
						public _bindings: com.fasterxml.jackson.databind.type.TypeBindings;
						public _superTypes: java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
						public _mixInResolver: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public _primaryMixIn: java.lang.Class<any>;
						public _collectAnnotations: boolean;
						public _classAnnotations: com.fasterxml.jackson.databind.util.Annotations;
						public _creators: com.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators;
						public _memberMethods: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap;
						public _fields: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public _nonStaticInnerClass: java.lang.Boolean;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public hasAnnotation(param0: java.lang.Class<any>): boolean;
						public findMethod(name: string, paramTypes: java.lang.Class<any>[]): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						/** @deprecated */
						public static constructWithoutSuperTypes(raw: java.lang.Class<any>, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, mir: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public getFactoryMethods(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public fields(): java.lang.Iterable<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						/** @deprecated */
						public static construct(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, mir: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public getFieldCount(): number;
						public getName(): string;
						public getConstructors(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
						public getDefaultConstructor(): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public resolveType(type: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public getStaticMethods(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public hasAnnotation(acls: java.lang.Class<any>): boolean;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public getAnnotated(): java.lang.Class<any>;
						public getAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public equals(o: any): boolean;
						/** @deprecated */
						public static construct(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public memberMethods(): java.lang.Iterable<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public isNonStaticInnerClass(): boolean;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						/** @deprecated */
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						/** @deprecated */
						public static constructWithoutSuperTypes(raw: java.lang.Class<any>, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public hasOneOf(param0: java.lang.Class<any>[]): boolean;
						public toString(): string;
						public getModifiers(): number;
						public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						public hasOneOf(annoClasses: java.lang.Class<any>[]): boolean;
						public hasAnnotations(): boolean;
						public getMemberMethodCount(): number;
					}
					export module AnnotatedClass {
						export class Creators extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators>;
							public defaultConstructor: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
							public constructors: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
							public creatorMethods: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
							public constructor(defCtor: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor, ctors: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>, ctorMethods: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedClassResolver extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver>;
						public static resolve(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forType: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public static resolveWithoutSuperTypes(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forType: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public static resolveWithoutSuperTypes(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forType: java.lang.Class<any>, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public static resolveWithoutSuperTypes(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forType: java.lang.Class<any>): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedConstructor extends com.fasterxml.jackson.databind.introspect.AnnotatedWithParams {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
						public _constructor: java.lang.reflect.Constructor<any>;
						public _serialization: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization;
						public constructor(ser: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization);
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public setValue(pojo: any, value: any): void;
						public call(param0: any[]): any;
						public setValue(param0: any, param1: any): void;
						public call1(param0: any): any;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public getParameterType(index: number): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getName(): string;
						public withAnnotations(ann: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public getRawParameterType(param0: number): java.lang.Class<any>;
						public call(): any;
						/** @deprecated */
						public getGenericParameterType(param0: number): java.lang.reflect.Type;
						public equals(o: any): boolean;
						public getMember(): java.lang.reflect.Member;
						public getRawParameterType(index: number): java.lang.Class<any>;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public constructor();
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, constructor: java.lang.reflect.Constructor<any>, classAnn: com.fasterxml.jackson.databind.introspect.AnnotationMap, paramAnn: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						public getParameterType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap, paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						public getAnnotated(): java.lang.reflect.Constructor<any>;
						public getParameterCount(): number;
						public call1(arg: any): any;
						public toString(): string;
						public getModifiers(): number;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						/** @deprecated */
						public getGenericParameterType(index: number): java.lang.reflect.Type;
						public call(args: any[]): any;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getValue(pojo: any): any;
						public getValue(param0: any): any;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap);
					}
					export module AnnotatedConstructor {
						export class Serialization extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization>;
							public clazz: java.lang.Class<any>;
							public args: java.lang.Class<any>[];
							public constructor(ctor: java.lang.reflect.Constructor<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedCreatorCollector extends com.fasterxml.jackson.databind.introspect.CollectorBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector>;
						public constructNonDefaultConstructor(ctor: com.fasterxml.jackson.databind.util.ClassUtil.Ctor, mixin: com.fasterxml.jackson.databind.util.ClassUtil.Ctor): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public constructDefaultConstructor(ctor: com.fasterxml.jackson.databind.util.ClassUtil.Ctor, mixin: com.fasterxml.jackson.databind.util.ClassUtil.Ctor): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public constructFactoryCreator(m: java.lang.reflect.Method, typeResCtxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, mixin: java.lang.reflect.Method): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public static collectCreators(intr: com.fasterxml.jackson.databind.AnnotationIntrospector, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory, tc: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, type: com.fasterxml.jackson.databind.JavaType, primaryMixIn: java.lang.Class<any>, collectAnnotations: boolean): com.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedField extends com.fasterxml.jackson.databind.introspect.AnnotatedMember implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public _field: java.lang.reflect.Field;
						public _serialization: com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public setValue(pojo: any, value: any): void;
						public setValue(param0: any, param1: any): void;
						public isTransient(): boolean;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getName(): string;
						public equals(o: any): boolean;
						public getMember(): java.lang.reflect.Member;
						public withAnnotations(ann: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public constructor(contextClass: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, field: java.lang.reflect.Field, annMap: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public constructor();
						public getAnnotated(): java.lang.reflect.Field;
						public toString(): string;
						public getModifiers(): number;
						public constructor(ser: com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization);
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getValue(pojo: any): any;
						public getValue(param0: any): any;
						public getAnnotationCount(): number;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap);
					}
					export module AnnotatedField {
						export class Serialization extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization>;
							public clazz: java.lang.Class<any>;
							public name: string;
							public constructor(f: java.lang.reflect.Field);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedFieldCollector extends com.fasterxml.jackson.databind.introspect.CollectorBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector>;
						public static collectFields(intr: com.fasterxml.jackson.databind.AnnotationIntrospector, tc: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, mixins: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, types: com.fasterxml.jackson.databind.type.TypeFactory, type: com.fasterxml.jackson.databind.JavaType, collectAnnotations: boolean): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
					}
					export module AnnotatedFieldCollector {
						export class FieldBuilder extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.FieldBuilder>;
							public typeContext: com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
							public field: java.lang.reflect.Field;
							public annotations: com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public constructor(tc: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, f: java.lang.reflect.Field);
							public build(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class AnnotatedMember extends com.fasterxml.jackson.databind.introspect.Annotated implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _typeContext: com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
						public _annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public getAllAnnotations(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public hasAnnotation(param0: java.lang.Class<any>): boolean;
						public constructor();
						/** @deprecated */
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						public getFullName(): string;
						/** @deprecated */
						public getTypeContext(): com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
						public setValue(param0: any, param1: any): void;
						public getDeclaringClass(): java.lang.Class<any>;
						public fixAccess(force: boolean): void;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public hasOneOf(param0: java.lang.Class<any>[]): boolean;
						public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public hasAnnotation(acls: java.lang.Class<any>): boolean;
						public hasOneOf(annoClasses: java.lang.Class<any>[]): boolean;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getMember(): java.lang.reflect.Member;
						public getValue(param0: any): any;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedMethod extends com.fasterxml.jackson.databind.introspect.AnnotatedWithParams implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _method: java.lang.reflect.Method;
						public _paramClasses: java.lang.Class<any>[];
						public _serialization: com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public setValue(pojo: any, value: any): void;
						public call(param0: any[]): any;
						public getFullName(): string;
						public setValue(param0: any, param1: any): void;
						public call1(param0: any): any;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, method: java.lang.reflect.Method, classAnn: com.fasterxml.jackson.databind.introspect.AnnotationMap, paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public getParameterType(index: number): com.fasterxml.jackson.databind.JavaType;
						public constructor(ser: com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization);
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getName(): string;
						public getRawParameterType(param0: number): java.lang.Class<any>;
						public getMember(): java.lang.reflect.Method;
						public withAnnotations(ann: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public call(): any;
						/** @deprecated */
						public getGenericParameterType(param0: number): java.lang.reflect.Type;
						public equals(o: any): boolean;
						public getMember(): java.lang.reflect.Member;
						/** @deprecated */
						public hasReturnType(): boolean;
						public getRawParameterType(index: number): java.lang.Class<any>;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public constructor();
						/** @deprecated */
						public getGenericParameterTypes(): java.lang.reflect.Type[];
						public getParameterType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap, paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						public getAnnotated(): java.lang.reflect.Method;
						public getRawParameterTypes(): java.lang.Class<any>[];
						public call1(arg: any): any;
						public getParameterCount(): number;
						public toString(): string;
						public getModifiers(): number;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						/** @deprecated */
						public getGenericParameterType(index: number): java.lang.reflect.Type;
						public call(args: any[]): any;
						public callOnWith(pojo: any, ...args: any[]): any;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getRawReturnType(): java.lang.Class<any>;
						public getValue(pojo: any): any;
						public callOn(pojo: any): any;
						public getValue(param0: any): any;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap);
					}
					export module AnnotatedMethod {
						export class Serialization extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization>;
							public clazz: java.lang.Class<any>;
							public name: string;
							public args: java.lang.Class<any>[];
							public constructor(setter: java.lang.reflect.Method);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedMethodCollector extends com.fasterxml.jackson.databind.introspect.CollectorBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector>;
						public static collectMethods(intr: com.fasterxml.jackson.databind.AnnotationIntrospector, tc: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, mixins: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, types: com.fasterxml.jackson.databind.type.TypeFactory, type: com.fasterxml.jackson.databind.JavaType, superTypes: java.util.List<com.fasterxml.jackson.databind.JavaType>, primaryMixIn: java.lang.Class<any>, collectAnnotations: boolean): com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap;
						public _addMethodMixIns(tc: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, targetClass: java.lang.Class<any>, methods: java.util.Map<com.fasterxml.jackson.databind.introspect.MemberKey,com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.MethodBuilder>, mixInCls: java.lang.Class<any>): void;
					}
					export module AnnotatedMethodCollector {
						export class MethodBuilder extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.MethodBuilder>;
							public typeContext: com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
							public method: java.lang.reflect.Method;
							public annotations: com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public constructor(tc: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, m: java.lang.reflect.Method, ann: com.fasterxml.jackson.databind.introspect.AnnotationCollector);
							public build(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedMethodMap extends java.lang.Iterable<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap>;
						public _methods: java.util.Map<com.fasterxml.jackson.databind.introspect.MemberKey,com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public constructor();
						public iterator(): java.util.Iterator<any>;
						public spliterator(): java.util.Spliterator<any>;
						public constructor(m: java.util.Map<com.fasterxml.jackson.databind.introspect.MemberKey,com.fasterxml.jackson.databind.introspect.AnnotatedMethod>);
						public find(m: java.lang.reflect.Method): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public size(): number;
						public find(name: string, paramTypes: java.lang.Class<any>[]): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotatedParameter extends com.fasterxml.jackson.databind.introspect.AnnotatedMember {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public _owner: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _index: number;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public setValue(pojo: any, value: any): void;
						public constructor();
						public setValue(param0: any, param1: any): void;
						public constructor(owner: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, type: com.fasterxml.jackson.databind.JavaType, typeContext: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap, index: number);
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDeclaringClass(): java.lang.Class<any>;
						public getOwner(): com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
						public getIndex(): number;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public getName(): string;
						public toString(): string;
						public getModifiers(): number;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getParameterType(): java.lang.reflect.Type;
						public equals(o: any): boolean;
						public getMember(): java.lang.reflect.Member;
						public getValue(pojo: any): any;
						public withAnnotations(ann: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getValue(param0: any): any;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class AnnotatedWithParams extends com.fasterxml.jackson.databind.introspect.AnnotatedMember {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams>;
						public _paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[];
						public constructor();
						public call(param0: any[]): any;
						public call1(param0: any): any;
						public getParameterType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public getParameterAnnotations(index: number): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap, paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						public getParameterCount(): number;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, paramAnnotations: com.fasterxml.jackson.databind.introspect.AnnotationMap[]);
						public replaceParameterAnnotations(index: number, ann: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getRawParameterType(param0: number): java.lang.Class<any>;
						public call(): any;
						public getParameter(index: number): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						/** @deprecated */
						public getGenericParameterType(param0: number): java.lang.reflect.Type;
						public getAnnotationCount(): number;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap);
						public addOrOverrideParam(paramIndex: number, a: java.lang.annotation.Annotation): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class AnnotationCollector extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationCollector>;
						public static NO_ANNOTATIONS: com.fasterxml.jackson.databind.util.Annotations;
						public _data: any;
						public static emptyCollector(): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
						public asAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public asAnnotationMap(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public isPresent(param0: java.lang.annotation.Annotation): boolean;
						public addOrOverride(param0: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
						public constructor(d: any);
						public static emptyCollector(data: any): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
						public static emptyAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public getData(): any;
					}
					export module AnnotationCollector {
						export class EmptyCollector extends com.fasterxml.jackson.databind.introspect.AnnotationCollector {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationCollector.EmptyCollector>;
							public static instance: com.fasterxml.jackson.databind.introspect.AnnotationCollector.EmptyCollector;
							public isPresent(ann: java.lang.annotation.Annotation): boolean;
							public isPresent(param0: java.lang.annotation.Annotation): boolean;
							public addOrOverride(param0: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public addOrOverride(ann: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public asAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
							public asAnnotationMap(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						}
						export class NCollector extends com.fasterxml.jackson.databind.introspect.AnnotationCollector {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationCollector.NCollector>;
							public _annotations: java.util.HashMap<java.lang.Class<any>,java.lang.annotation.Annotation>;
							public constructor(data: any, type1: java.lang.Class<any>, value1: java.lang.annotation.Annotation, type2: java.lang.Class<any>, value2: java.lang.annotation.Annotation);
							public isPresent(ann: java.lang.annotation.Annotation): boolean;
							public isPresent(param0: java.lang.annotation.Annotation): boolean;
							public addOrOverride(param0: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public addOrOverride(ann: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public constructor(d: any);
							public asAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
							public asAnnotationMap(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						}
						export class NoAnnotations extends java.lang.Object implements com.fasterxml.jackson.databind.util.Annotations, java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationCollector.NoAnnotations>;
							public get(cls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public hasOneOf(annoClasses: java.lang.Class<any>[]): boolean;
							public size(): number;
							public hasOneOf(param0: java.lang.Class<any>[]): boolean;
							public has(cls: java.lang.Class<any>): boolean;
							public has(param0: java.lang.Class<any>): boolean;
							public get(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
						export class OneAnnotation extends java.lang.Object implements com.fasterxml.jackson.databind.util.Annotations, java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationCollector.OneAnnotation>;
							public get(cls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public hasOneOf(annoClasses: java.lang.Class<any>[]): boolean;
							public size(): number;
							public constructor(type: java.lang.Class<any>, value: java.lang.annotation.Annotation);
							public hasOneOf(param0: java.lang.Class<any>[]): boolean;
							public has(cls: java.lang.Class<any>): boolean;
							public has(param0: java.lang.Class<any>): boolean;
							public get(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
						export class OneCollector extends com.fasterxml.jackson.databind.introspect.AnnotationCollector {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationCollector.OneCollector>;
							public isPresent(ann: java.lang.annotation.Annotation): boolean;
							public isPresent(param0: java.lang.annotation.Annotation): boolean;
							public addOrOverride(param0: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public addOrOverride(ann: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
							public constructor(d: any);
							public asAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
							public asAnnotationMap(): com.fasterxml.jackson.databind.introspect.AnnotationMap;
							public constructor(data: any, type: java.lang.Class<any>, value: java.lang.annotation.Annotation);
						}
						export class TwoAnnotations extends java.lang.Object implements com.fasterxml.jackson.databind.util.Annotations, java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationCollector.TwoAnnotations>;
							public get(cls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public hasOneOf(annoClasses: java.lang.Class<any>[]): boolean;
							public size(): number;
							public constructor(type1: java.lang.Class<any>, value1: java.lang.annotation.Annotation, type2: java.lang.Class<any>, value2: java.lang.annotation.Annotation);
							public hasOneOf(param0: java.lang.Class<any>[]): boolean;
							public has(cls: java.lang.Class<any>): boolean;
							public has(param0: java.lang.Class<any>): boolean;
							public get(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotationIntrospectorPair extends com.fasterxml.jackson.databind.AnnotationIntrospector implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair>;
						public _primary: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _secondary: com.fasterxml.jackson.databind.AnnotationIntrospector;
						/** @deprecated */
						public findDeserializationType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						/** @deprecated */
						public findPropertiesToIgnore(ac: com.fasterxml.jackson.databind.introspect.Annotated, forSerialization: boolean): string[];
						public hasAnySetter(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findDefaultEnumValue(enumCls: java.lang.Class<java.lang.Enum<any>>): java.lang.Enum<any>;
						public findSetterInfo(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public findNullSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						/** @deprecated */
						public findDeserializationType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyInclusionByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
						public findNameForDeserialization(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						/** @deprecated */
						public findIgnoreUnknownProperties(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
						/** @deprecated */
						public findPropertyIgnorals(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public static create(primary: com.fasterxml.jackson.databind.AnnotationIntrospector, secondary: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.AnnotationIntrospector;
						public findInjectableValue(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.annotation.JacksonInject.Value;
						/** @deprecated */
						public findSerializationInclusionForContent(a: com.fasterxml.jackson.databind.introspect.Annotated, defValue: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
						public findPropertyAliases(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor();
						/** @deprecated */
						public findSerializationKeyType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyInclusion(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public allIntrospectors(): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
						public isIgnorableType(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
						public findPOJOBuilder(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Class<any>;
						public findEnumValues(enumType: java.lang.Class<any>, enumValues: java.lang.Enum<any>[], names: string[]): string[];
						/** @deprecated */
						public findDeserializationContentType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseContentType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findMergeInfo(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findPOJOBuilderConfig(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public findTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public hasAnyGetter(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findValueInstantiator(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public findPropertyIndex(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Integer;
						public findObjectIdInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findFormat(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findCreatorAnnotation(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public hasAnySetter(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						/** @deprecated */
						public hasCreatorAnnotation(a: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						public findKeySerializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public resolveSetterConflict(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, setter1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, setter2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						/** @deprecated */
						public findCreatorBinding(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public findPropertyIgnoralByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						/** @deprecated */
						public findSerializationInclusion(a: com.fasterxml.jackson.databind.introspect.Annotated, defValue: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.annotation.JsonInclude.Include;
						/** @deprecated */
						public findDeserializationKeyType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseKeyType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						/** @deprecated */
						public findEnumValue(value: java.lang.Enum<any>): string;
						public findFilterId(ann: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findClassDescription(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public findContentSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findKeySerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findKeyDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						/** @deprecated */
						public findInjectableValueId(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public allIntrospectors(result: java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>): java.util.Collection<com.fasterxml.jackson.databind.AnnotationIntrospector>;
						public isAnnotationBundle(ann: java.lang.annotation.Annotation): boolean;
						public findSubtypes(a: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public findViews(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>[];
						public findSerializationTyping(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						public findMergeInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findPropertyDescription(ann: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public findObjectReferenceInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated, objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findPropertyTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						/** @deprecated */
						public findDeserializationKeyType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseKeyType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyContentTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, containerType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public constructor(p: com.fasterxml.jackson.databind.AnnotationIntrospector, s: com.fasterxml.jackson.databind.AnnotationIntrospector);
						public findDeserializationConverter(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findDeserializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializationContentConverter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						/** @deprecated */
						public findSerializationType(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>;
						public findSetterInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public findReferenceType(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public findRootName(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.PropertyName;
						public findNameForDeserialization(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public hasIgnoreMarker(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
						public isTypeId(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public findCreatorAnnotation(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public findSerializationSortAlphabetically(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findDeserializationContentConverter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public refineSerializationType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public hasAsKey(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						/** @deprecated */
						public hasCreatorAnnotation(ann: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						/** @deprecated */
						public findDeserializationContentType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseContentType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findKeyDeserializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						/** @deprecated */
						public findCreatorBinding(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						/** @deprecated */
						public hasAnySetterAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public findTypeName(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public findFormat(memberOrClass: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
						/** @deprecated */
						public findSerializationContentType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findRenameByField(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, f: com.fasterxml.jackson.databind.introspect.AnnotatedField, implName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.PropertyName;
						public findPropertyDefaultValue(ann: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public findEnumAliases(enumType: java.lang.Class<any>, enumValues: java.lang.Enum<any>[], aliases: string[][]): void;
						/** @deprecated */
						public hasAnyGetterAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public hasRequiredMarker(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public findSerializationPropertyOrder(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string[];
						/** @deprecated */
						public findPropertyIgnorals(ac: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public findContentDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findUnwrappingNameTransformer(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.NameTransformer;
						public findAndAddVirtualProperties(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, properties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
						public findNamingStrategy(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public isTypeId(am: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public hasAnyGetter(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public refineDeserializationType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public findImplicitPropertyName(ann: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
						public findPropertyInclusionByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
						public findDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNameForSerialization(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public _explicitClassOrOb(maybeCls: any, implicit: java.lang.Class<any>): any;
						public findPropertyAccess(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public version(): com.fasterxml.jackson.core.Version;
						public findWrapperName(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public findSerializationConverter(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findAutoDetectVisibility(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, checker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public findPropertyContentTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public findContentSerializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNullSerializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findImplicitPropertyName(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
						public hasAsValue(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public _isExplicitClassOrOb(maybeCls: any, implicit: java.lang.Class<any>): boolean;
						/** @deprecated */
						public hasAsValueAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class AnnotationMap extends java.lang.Object implements com.fasterxml.jackson.databind.util.Annotations {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.AnnotationMap>;
						public _annotations: java.util.HashMap<java.lang.Class<any>,java.lang.annotation.Annotation>;
						public constructor();
						public get(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public addIfNotPresent(ann: java.lang.annotation.Annotation): boolean;
						public hasOneOf(param0: java.lang.Class<any>[]): boolean;
						public has(cls: java.lang.Class<any>): boolean;
						public toString(): string;
						public annotations(): java.lang.Iterable<java.lang.annotation.Annotation>;
						public has(param0: java.lang.Class<any>): boolean;
						public get(cls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public static merge(primary: com.fasterxml.jackson.databind.introspect.AnnotationMap, secondary: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.AnnotationMap;
						public hasOneOf(annoClasses: java.lang.Class<any>[]): boolean;
						public add(ann: java.lang.annotation.Annotation): boolean;
						public size(): number;
						public _add(ann: java.lang.annotation.Annotation): boolean;
						public static of(type: java.lang.Class<any>, value: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationMap;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class BasicBeanDescription extends com.fasterxml.jackson.databind.BeanDescription {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.BasicBeanDescription>;
						public _propCollector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _classInfo: com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public _defaultViews: java.lang.Class<any>[];
						public _defaultViewsResolved: boolean;
						public _objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, classDef: com.fasterxml.jackson.databind.introspect.AnnotatedClass, props: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>);
						public getClassAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public findBackReferences(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public findMethod(name: string, paramTypes: java.lang.Class<any>[]): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findJsonValueAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						/** @deprecated */
						public bindingsForBeanType(): com.fasterxml.jackson.databind.type.TypeBindings;
						public getConstructors(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
						public addProperty(def: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition): boolean;
						public static forDeserialization(coll: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public hasKnownClassAnnotations(): boolean;
						public findDeserializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public constructor(type: com.fasterxml.jackson.databind.JavaType);
						/** @deprecated */
						public findFactoryMethod(...expArgTypes: java.lang.Class<any>[]): java.lang.reflect.Method;
						public static forSerialization(coll: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public findDefaultConstructor(): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						public findPOJOBuilder(): java.lang.Class<any>;
						public instantiateBean(param0: boolean): any;
						/** @deprecated */
						public findBackReferenceProperties(): java.util.Map<string,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						/** @deprecated */
						public findJsonValueMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getFactoryMethodsWithMode(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata<com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.annotation.JsonCreator.Mode>>;
						public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public _createConverter(converterDef: any): com.fasterxml.jackson.databind.util.Converter<any,any>;
						/** @deprecated */
						public findSingleArgConstructor(...param0: java.lang.Class<any>[]): java.lang.reflect.Constructor<any>;
						public findExpectedFormat(defValue: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.annotation.JsonFormat.Value;
						/** @deprecated */
						public findSingleArgConstructor(...argTypes: java.lang.Class<any>[]): java.lang.reflect.Constructor<any>;
						public findProperty(name: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public findDefaultViews(): java.lang.Class<any>[];
						public getConstructorsWithMode(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor,com.fasterxml.jackson.annotation.JsonCreator.Mode>>;
						public getFactoryMethods(): java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _properties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public hasProperty(name: com.fasterxml.jackson.databind.PropertyName): boolean;
						public findClassDescription(): string;
						public findInjectables(): java.util.Map<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public findSerializationConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public constructor(coll: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector);
						public isFactoryMethod(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						/** @deprecated */
						public findFactoryMethod(...param0: java.lang.Class<any>[]): java.lang.reflect.Method;
						public static forOtherUse(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public findMethod(param0: string, param1: java.lang.Class<any>[]): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						/** @deprecated */
						public _findCreatorPropertyName(param: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): com.fasterxml.jackson.databind.PropertyName;
						public findPOJOBuilderConfig(): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public findPropertyInclusion(param0: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
						/** @deprecated */
						public resolveType(jdkType: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						public findProperties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public getClassInfo(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public findFactoryMethodMetadata(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata<com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.annotation.JsonCreator.Mode>;
						/** @deprecated */
						public _findPropertyFields(ignoredProperties: java.util.Collection<string>, forSerialization: boolean): java.util.LinkedHashMap<string,com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						/** @deprecated */
						public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						public instantiateBean(fixAccess: boolean): any;
						public findAnySetterAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findExpectedFormat(param0: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findAnyGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findJsonKeyAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public removeProperty(propName: string): boolean;
						public getIgnoredPropertyNames(): java.util.Set<string>;
						public constructor(coll: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector, type: com.fasterxml.jackson.databind.JavaType, classDef: com.fasterxml.jackson.databind.introspect.AnnotatedClass);
						public findPropertyInclusion(defValue: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.annotation.JsonInclude.Value;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class BasicClassIntrospector extends com.fasterxml.jackson.databind.introspect.ClassIntrospector implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector>;
						public static STRING_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static BOOLEAN_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static INT_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static LONG_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public static OBJECT_DESC: com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public _resolveAnnotatedClass(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public forCreation(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forDeserialization(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public constructPropertyCollector(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, classDef: com.fasterxml.jackson.databind.introspect.AnnotatedClass, type: com.fasterxml.jackson.databind.JavaType, forSerialization: boolean, accNaming: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public _isStdJDKCollection(type: com.fasterxml.jackson.databind.JavaType): boolean;
						public forDirectClassAnnotations(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forSerialization(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forClassAnnotations(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						/** @deprecated */
						public collectPropertiesWithBuilder(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, forSerialization: boolean): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						/** @deprecated */
						public forDeserializationWithBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forDirectClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public collectProperties(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, forSerialization: boolean): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						/** @deprecated */
						public collectProperties(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, forSerialization: boolean, mutatorPrefix: string): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public forSerialization(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public forCreation(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public _resolveAnnotatedWithoutSuperTypes(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public constructor();
						public forDeserializationWithBuilder(config: com.fasterxml.jackson.databind.DeserializationConfig, builderType: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, valueTypeDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public collectPropertiesWithBuilder(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, valueTypeDesc: com.fasterxml.jackson.databind.BeanDescription, forSerialization: boolean): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
						public _findStdTypeDesc(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forDeserialization(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public _findStdJdkCollectionDesc(cfg: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						public forDeserializationWithBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, param3: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.BeanDescription;
						/** @deprecated */
						public forDeserializationWithBuilder(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType, r: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
						/** @deprecated */
						public constructPropertyCollector(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, type: com.fasterxml.jackson.databind.JavaType, forSerialization: boolean, mutatorPrefix: string): com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class BeanPropertyDefinition extends java.lang.Object implements com.fasterxml.jackson.databind.util.Named {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						public static EMPTY_INCLUDE: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public isRequired(): boolean;
						public findReferenceType(): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public getConstructorParameters(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public getInternalName(): string;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public findViews(): java.lang.Class<any>[];
						public getName(): string;
						public couldSerialize(): boolean;
						public isExplicitlyIncluded(): boolean;
						public hasField(): boolean;
						public getNonConstructorMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public hasName(name: com.fasterxml.jackson.databind.PropertyName): boolean;
						public isExplicitlyNamed(): boolean;
						public getSetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getRawPrimaryType(): java.lang.Class<any>;
						public hasConstructorParameter(): boolean;
						public getPrimaryMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public couldDeserialize(): boolean;
						public getAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor();
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public hasGetter(): boolean;
						public isTypeId(): boolean;
						public getConstructorParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public findReferenceName(): string;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public findObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getPrimaryType(): com.fasterxml.jackson.databind.JavaType;
						public getField(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public hasSetter(): boolean;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getMutator(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class ClassIntrospector extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ClassIntrospector>;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector;
						public forCreation(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public constructor();
						public forDeserialization(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forDeserializationWithBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, param3: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.BeanDescription;
						public forSerialization(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						/** @deprecated */
						public forDeserializationWithBuilder(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
						public forDirectClassAnnotations(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.BeanDescription;
					}
					export module ClassIntrospector {
						export class MixInResolver extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
								copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
							});
							public constructor();
							public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
							public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class CollectorBase extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.CollectorBase>;
						public static NO_ANNOTATION_MAPS: com.fasterxml.jackson.databind.introspect.AnnotationMap[];
						public static NO_ANNOTATIONS: java.lang.annotation.Annotation[];
						public _intr: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public collectDefaultAnnotations(c: com.fasterxml.jackson.databind.introspect.AnnotationCollector, anns: java.lang.annotation.Annotation[]): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
						public static _ignorableAnnotation(a: java.lang.annotation.Annotation): boolean;
						public collectAnnotations(anns: java.lang.annotation.Annotation[]): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
						public collectDefaultFromBundle(c: com.fasterxml.jackson.databind.introspect.AnnotationCollector, bundle: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
						public constructor(intr: com.fasterxml.jackson.databind.AnnotationIntrospector);
						public collectAnnotations(c: com.fasterxml.jackson.databind.introspect.AnnotationCollector, anns: java.lang.annotation.Annotation[]): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
						public collectFromBundle(c: com.fasterxml.jackson.databind.introspect.AnnotationCollector, bundle: java.lang.annotation.Annotation): com.fasterxml.jackson.databind.introspect.AnnotationCollector;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class ConcreteBeanPropertyBase extends java.lang.Object implements com.fasterxml.jackson.databind.BeanProperty, java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase>;
						public _metadata: com.fasterxml.jackson.databind.PropertyMetadata;
						public _aliases: java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public isRequired(): boolean;
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class DefaultAccessorNamingStrategy extends com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy>;
						public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _forClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public _baseNameValidator: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator;
						public _stdBeanNaming: boolean;
						public _getterPrefix: string;
						public _isGetterPrefix: string;
						public _mutatorPrefix: string;
						public constructor();
						public legacyManglePropertyName(basename: string, offset: number): string;
						public findNameForIsGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public modifyFieldName(field: com.fasterxml.jackson.databind.introspect.AnnotatedField, name: string): string;
						public findNameForRegularGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string): string;
						public findNameForMutator(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public _isCglibGetCallbacks(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public _isGroovyMetaClassGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public findNameForMutator(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string): string;
						public modifyFieldName(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField, param1: string): string;
						public stdManglePropertyName(basename: string, offset: number): string;
						public findNameForRegularGetter(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, param1: string): string;
						public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass, mutatorPrefix: string, getterPrefix: string, isGetterPrefix: string, baseNameValidator: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator);
						public findNameForIsGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string): string;
					}
					export module DefaultAccessorNamingStrategy {
						export class BaseNameValidator extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy$BaseNameValidator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								accept(param0: string, param1: string, param2: number): boolean;
							});
							public constructor();
							public accept(param0: string, param1: string, param2: number): boolean;
						}
						export class FirstCharBasedValidator extends java.lang.Object implements com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.FirstCharBasedValidator>;
							public constructor(allowLowerCaseFirstChar: boolean, allowNonLetterFirstChar: boolean);
							public static forFirstNameRule(allowLowerCaseFirstChar: boolean, allowNonLetterFirstChar: boolean): com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator;
							public accept(firstChar: string, basename: string, offset: number): boolean;
							public accept(param0: string, param1: string, param2: number): boolean;
						}
						export class Provider extends com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider>;
							public _setterPrefix: string;
							public _withPrefix: string;
							public _getterPrefix: string;
							public _isGetterPrefix: string;
							public _baseNameValidator: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator;
							public constructor();
							public withBaseNameValidator(vld: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator): com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider;
							public constructor(p: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider, setterPrefix: string, withPrefix: string, getterPrefix: string, isGetterPrefix: string);
							public forBuilder(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, builderClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass, valueTypeDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public withIsGetterPrefix(prefix: string): com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider;
							public constructor(p: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider, vld: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator);
							public forPOJO(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, targetClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public forPOJO(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public withFirstCharAcceptance(allowLowerCaseFirstChar: boolean, allowNonLetterFirstChar: boolean): com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider;
							public forRecord(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, recordClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public forBuilder(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public forRecord(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
							public withSetterPrefix(prefix: string): com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider;
							public constructor(setterPrefix: string, withPrefix: string, getterPrefix: string, isGetterPrefix: string, vld: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator);
							public withGetterPrefix(prefix: string): com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider;
							public withBuilderPrefix(prefix: string): com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.Provider;
						}
						export class RecordNaming extends com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.RecordNaming>;
							public _fieldNames: java.util.Set<string>;
							public constructor();
							public findNameForRegularGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string): string;
							public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass);
							public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass, mutatorPrefix: string, getterPrefix: string, isGetterPrefix: string, baseNameValidator: com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class JacksonAnnotationIntrospector extends com.fasterxml.jackson.databind.AnnotationIntrospector implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector>;
						public _annotationsInside: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<any>,java.lang.Boolean>;
						public _cfgConstructorPropertiesImpliesCreator: boolean;
						/** @deprecated */
						public findDeserializationType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findSerializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public hasAnySetter(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findContentDeserializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findDefaultEnumValue(enumCls: java.lang.Class<java.lang.Enum<any>>): java.lang.Enum<any>;
						public _constructStdTypeResolverBuilder(): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public findSetterInfo(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public findFilterId(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNullSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						/** @deprecated */
						public findDeserializationType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyInclusionByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
						public findNameForDeserialization(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						/** @deprecated */
						public findSerializationType(am: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>;
						public findEnumAliases(enumType: java.lang.Class<any>, enumValues: java.lang.Enum<any>[], aliasList: string[][]): void;
						public findInjectableValue(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.annotation.JacksonInject.Value;
						public findPropertyAliases(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor();
						/** @deprecated */
						public findSerializationKeyType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findPropertyInclusion(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _classIfExplicit(cls: java.lang.Class<any>): java.lang.Class<any>;
						public isIgnorableType(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Boolean;
						public findPOJOBuilder(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.lang.Class<any>;
						public findEnumValues(enumType: java.lang.Class<any>, enumValues: java.lang.Enum<any>[], names: string[]): string[];
						/** @deprecated */
						public findDeserializationContentType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseContentType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findMergeInfo(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findPOJOBuilderConfig(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value;
						public findTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public hasAnyGetter(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findValueInstantiator(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public findPropertyIndex(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Integer;
						public _propertyName(localName: string, namespace: string): com.fasterxml.jackson.databind.PropertyName;
						public findObjectIdInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findFormat(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public _findConstructorName(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public findCreatorAnnotation(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public hasAnySetter(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						/** @deprecated */
						public hasCreatorAnnotation(a: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						public findKeySerializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public resolveSetterConflict(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, setter1: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, setter2: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						/** @deprecated */
						public findCreatorBinding(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public findPropertyIgnoralByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public findPropertyAccess(m: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public readResolve(): any;
						/** @deprecated */
						public findDeserializationKeyType(ann: com.fasterxml.jackson.databind.introspect.Annotated, baseKeyType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						/** @deprecated */
						public findEnumValue(value: java.lang.Enum<any>): string;
						public findFilterId(ann: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findClassDescription(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public _constructVirtualProperty(prop: com.fasterxml.jackson.databind.annotation.JsonAppend.Prop, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public _findTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public findContentSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findKeySerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findKeyDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						/** @deprecated */
						public findInjectableValueId(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public _constructNoTypeResolverBuilder(): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
						public isAnnotationBundle(ann: java.lang.annotation.Annotation): boolean;
						public findSubtypes(a: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public findViews(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>[];
						public findSerializationTyping(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing;
						public findMergeInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public _isIgnorable(a: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						public findPropertyDescription(ann: com.fasterxml.jackson.databind.introspect.Annotated): string;
						public findPropertyAliases(m: com.fasterxml.jackson.databind.introspect.Annotated): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public findObjectReferenceInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated, objectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public findPropertyTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						/** @deprecated */
						public findDeserializationKeyType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseKeyType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public _constructVirtualProperty(attr: com.fasterxml.jackson.databind.annotation.JsonAppend.Attr, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public findPropertyContentTypeResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, containerType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>;
						public findDeserializationConverter(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findDeserializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findSerializationContentConverter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public findImplicitPropertyName(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
						/** @deprecated */
						public findSerializationType(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Class<any>;
						public findSetterInfo(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonSetter.Value;
						public findReferenceType(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public findRootName(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): com.fasterxml.jackson.databind.PropertyName;
						public findNameForDeserialization(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public hasIgnoreMarker(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
						public isTypeId(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public setConstructorPropertiesImpliesCreator(b: boolean): com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
						public findPropertyIgnoralByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public findCreatorAnnotation(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public findSerializationSortAlphabetically(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public findDeserializationContentConverter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMember): any;
						public refineSerializationType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public hasAsKey(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						/** @deprecated */
						public hasCreatorAnnotation(ann: com.fasterxml.jackson.databind.introspect.Annotated): boolean;
						/** @deprecated */
						public findDeserializationContentType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseContentType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findKeyDeserializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						/** @deprecated */
						public hasAnySetterAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						/** @deprecated */
						public findCreatorBinding(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonCreator.Mode;
						public findTypeName(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string;
						public findFormat(memberOrClass: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonFormat.Value;
						/** @deprecated */
						public findSerializationContentType(am: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public findRenameByField(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, f: com.fasterxml.jackson.databind.introspect.AnnotatedField, implName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.PropertyName;
						public findEnumAliases(enumType: java.lang.Class<any>, enumValues: java.lang.Enum<any>[], aliases: string[][]): void;
						public findPropertyDefaultValue(ann: com.fasterxml.jackson.databind.introspect.Annotated): string;
						/** @deprecated */
						public hasAnyGetterAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public hasRequiredMarker(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public _classIfExplicit(cls: java.lang.Class<any>, implicit: java.lang.Class<any>): java.lang.Class<any>;
						public findSerializationPropertyOrder(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): string[];
						/** @deprecated */
						public findPropertyIgnorals(ac: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value;
						public findContentDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findUnwrappingNameTransformer(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.NameTransformer;
						public findAndAddVirtualProperties(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, properties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
						public findNamingStrategy(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass): any;
						public isTypeId(am: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Boolean;
						public hasAnyGetter(ann: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						public refineDeserializationType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, a: com.fasterxml.jackson.databind.introspect.Annotated, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public findPropertyInclusionByName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonIncludeProperties.Value;
						public findDeserializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNameForSerialization(a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.PropertyName;
						public findPropertyAccess(ann: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public version(): com.fasterxml.jackson.core.Version;
						public findSerializationConverter(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findAutoDetectVisibility(ac: com.fasterxml.jackson.databind.introspect.AnnotatedClass, checker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>): com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public findContentSerializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findNullSerializer(a: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public findImplicitPropertyName(member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): string;
						public findSerializer(am: com.fasterxml.jackson.databind.introspect.Annotated): any;
						public hasAsValue(a: com.fasterxml.jackson.databind.introspect.Annotated): java.lang.Boolean;
						/** @deprecated */
						public hasAsValueAnnotation(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class MemberKey extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.MemberKey>;
						public constructor(ctor: java.lang.reflect.Constructor<any>);
						public constructor(name: string, argTypes: java.lang.Class<any>[]);
						public constructor(m: java.lang.reflect.Method);
						public equals(obj: any): boolean;
						public argCount(): number;
						public hashCode(): number;
						public equals(o: any): boolean;
						public getName(): string;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class MethodGenericTypeResolver extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver>;
						public static narrowMethodTypeParameters(candidate: java.lang.reflect.Method, requestedType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory, emptyTypeResCtxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext): com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export abstract class NopAnnotationIntrospector extends com.fasterxml.jackson.databind.AnnotationIntrospector implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector>;
						public static instance: com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;
						public constructor();
						public version(): com.fasterxml.jackson.core.Version;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class ObjectIdInfo extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.ObjectIdInfo>;
						public _propertyName: com.fasterxml.jackson.databind.PropertyName;
						public _generator: java.lang.Class<any>;
						public _resolver: java.lang.Class<any>;
						public _scope: java.lang.Class<any>;
						public _alwaysAsId: boolean;
						public constructor(prop: com.fasterxml.jackson.databind.PropertyName, scope: java.lang.Class<any>, gen: java.lang.Class<any>, alwaysAsId: boolean);
						public getGeneratorType(): java.lang.Class<any>;
						public withAlwaysAsId(state: boolean): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public getScope(): java.lang.Class<any>;
						public getAlwaysAsId(): boolean;
						public static empty(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public constructor(prop: com.fasterxml.jackson.databind.PropertyName, scope: java.lang.Class<any>, gen: java.lang.Class<any>, alwaysAsId: boolean, resolver: java.lang.Class<any>);
						public getResolverType(): java.lang.Class<any>;
						public getPropertyName(): com.fasterxml.jackson.databind.PropertyName;
						public toString(): string;
						public constructor(name: com.fasterxml.jackson.databind.PropertyName, scope: java.lang.Class<any>, gen: java.lang.Class<any>, resolver: java.lang.Class<any>);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class POJOPropertiesCollector extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector>;
						public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _accessorNaming: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
						public _forSerialization: boolean;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _classDef: com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public _visibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _useAnnotations: boolean;
						public _collected: boolean;
						public _properties: java.util.LinkedHashMap<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public _creatorProperties: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public _fieldRenameMappings: java.util.Map<com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.PropertyName>;
						public _anyGetters: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _anyGetterField: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _anySetters: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _anySetterField: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _jsonKeyAccessors: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _jsonValueAccessors: java.util.LinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _ignoredPropertyNames: java.util.HashSet<string>;
						public _injectables: java.util.LinkedHashMap<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public _stdBeanNaming: boolean;
						public _mutatorPrefix: string;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public getAnyGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public getAnyGetterMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public getPropertyMap(): java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public getJsonValueAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _addCreatorParam(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, param: com.fasterxml.jackson.databind.introspect.AnnotatedParameter): void;
						public _property(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, implName: string): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
						public getProperties(): java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>;
						/** @deprecated */
						public findPOJOBuilderClass(): java.lang.Class<any>;
						public _addInjectables(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _property(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, name: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
						public _removeUnwantedAccessor(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _replaceCreatorProperty(prop: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder, creatorProperties: java.util.List<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): boolean;
						public _removeUnwantedProperties(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _doAddInjectable(injectable: com.fasterxml.jackson.annotation.JacksonInject.Value, m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): void;
						public getInjectables(): java.util.Map<any,com.fasterxml.jackson.databind.introspect.AnnotatedMember>;
						public getClassDef(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public getConfig(): com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _renameUsing(propMap: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, naming: com.fasterxml.jackson.databind.PropertyNamingStrategy): void;
						public getJsonKeyAccessor(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public getAnySetterMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						/** @deprecated */
						public getJsonValueMethod(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forSerialization: boolean, type: com.fasterxml.jackson.databind.JavaType, classDef: com.fasterxml.jackson.databind.introspect.AnnotatedClass, accessorNaming: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy);
						public _addGetterMethod(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, m: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public _addCreators(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _collectIgnorals(name: string): void;
						public collectAll(): void;
						public getAnyGetterField(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						/** @deprecated */
						public _updateCreatorProperty(prop: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder, creatorProperties: java.util.List<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public getAnnotationIntrospector(): com.fasterxml.jackson.databind.AnnotationIntrospector;
						public getAnySetterField(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _renameProperties(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						/** @deprecated */
						public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, forSerialization: boolean, type: com.fasterxml.jackson.databind.JavaType, classDef: com.fasterxml.jackson.databind.introspect.AnnotatedClass, mutatorPrefix: string);
						public getObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public _addMethods(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _addFields(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _renameWithWrappers(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public _addSetterMethod(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>, m: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): void;
						public _sortProperties(props: java.util.Map<string,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>): void;
						public getIgnoredPropertyNames(): java.util.Set<string>;
						public reportProblem(msg: string, ...args: any[]): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class POJOPropertyBuilder extends com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition implements java.lang.Comparable<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public _forSerialization: boolean;
						public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _name: com.fasterxml.jackson.databind.PropertyName;
						public _internalName: com.fasterxml.jackson.databind.PropertyName;
						public _fields: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedField>;
						public _ctorParameters: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public _getters: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _setters: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>;
						public _metadata: com.fasterxml.jackson.databind.PropertyMetadata;
						public _referenceInfo: com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public _selectSetter(currM: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, nextM: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public anyVisible(): boolean;
						public getSetterUnchecked(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findReferenceType(): com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty;
						public getPrimaryMemberUnchecked(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public getConstructorParameters(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public getInternalName(): string;
						public _getSetterInfo(metadata: com.fasterxml.jackson.databind.PropertyMetadata, primary: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.PropertyMetadata;
						public fromMemberAnnotationsExcept(func: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember<any>, defaultValue: any): any;
						public couldSerialize(): boolean;
						public hasField(): boolean;
						public addSetter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: com.fasterxml.jackson.databind.PropertyName, explName: boolean, visible: boolean, ignored: boolean): void;
						public isExplicitlyNamed(): boolean;
						public hasConstructorParameter(): boolean;
						public getPrimaryMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public mergeAnnotations(forSerialization: boolean): void;
						public constructor();
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public removeNonVisible(inferMutators: boolean, parent: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public explode(newNames: java.util.Collection<com.fasterxml.jackson.databind.PropertyName>): java.util.Collection<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder>;
						public hasGetter(): boolean;
						public removeIgnored(): void;
						/** @deprecated */
						public removeNonVisible(inferMutators: boolean): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public toString(): string;
						public _selectSetterFromMultiple(curr: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>, next: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod>): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public findObjectIdInfo(): com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
						public addField(a: com.fasterxml.jackson.databind.introspect.AnnotatedField, name: com.fasterxml.jackson.databind.PropertyName, explName: boolean, visible: boolean, ignored: boolean): void;
						public findInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public findAccess(): com.fasterxml.jackson.annotation.JsonProperty.Access;
						public addCtor(a: com.fasterxml.jackson.databind.introspect.AnnotatedParameter, name: com.fasterxml.jackson.databind.PropertyName, explName: boolean, visible: boolean, ignored: boolean): void;
						public getPrimaryType(): com.fasterxml.jackson.databind.JavaType;
						public getField(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public _getterPriority(m: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): number;
						public withSimpleName(newSimpleName: string): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
						public addGetter(a: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: com.fasterxml.jackson.databind.PropertyName, explName: boolean, visible: boolean, ignored: boolean): void;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public compareTo(other: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder): number;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, forSerialization: boolean, internalName: com.fasterxml.jackson.databind.PropertyName);
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public findViews(): java.lang.Class<any>[];
						public _rawTypeOf(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): java.lang.Class<any>;
						public getName(): string;
						public trimByVisibility(): void;
						public isExplicitlyIncluded(): boolean;
						public hasName(name: com.fasterxml.jackson.databind.PropertyName): boolean;
						public getSetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getRawPrimaryType(): java.lang.Class<any>;
						public removeConstructors(): void;
						public findExplicitNames(): java.util.Set<com.fasterxml.jackson.databind.PropertyName>;
						public couldDeserialize(): boolean;
						public fromMemberAnnotations(func: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember<any>): any;
						public getGetterUnchecked(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public _setterPriority(m: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): number;
						public isTypeId(): boolean;
						public getConstructorParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public constructor(src: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder, newName: com.fasterxml.jackson.databind.PropertyName);
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, forSerialization: boolean, internalName: com.fasterxml.jackson.databind.PropertyName, name: com.fasterxml.jackson.databind.PropertyName);
						public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
						public anyIgnorals(): boolean;
						public getFieldUnchecked(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public hasSetter(): boolean;
						public addAll(src: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder): void;
					}
					export module POJOPropertyBuilder {
						export class Linked<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<any>>;
							public value: T;
							public next: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public name: com.fasterxml.jackson.databind.PropertyName;
							public isNameExplicit: boolean;
							public isVisible: boolean;
							public isMarkedIgnored: boolean;
							public append(appendable: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public constructor(v: T, n: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>, name: com.fasterxml.jackson.databind.PropertyName, explName: boolean, visible: boolean, ignored: boolean);
							public withValue(newValue: T): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public withoutIgnored(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public withoutNonVisible(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public withNext(newNext: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public toString(): string;
							public withoutNext(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
							public trimByVisibility(): com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>;
						}
						export class MemberIterator<T>  extends java.util.Iterator<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.MemberIterator<any>>;
							public constructor(first: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<any>);
							public hasNext(): boolean;
							public remove(): void;
							public next(): any;
						}
						export class WithMember<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember<any>>;
							/**
							 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$WithMember interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
							});
							public constructor();
							public withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class SimpleMixInResolver extends java.lang.Object implements com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver>;
						public _overrides: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public _localMixIns: java.util.Map<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<any>>;
						public hasMixIns(): boolean;
						public localSize(): number;
						public findMixInClassFor(cls: java.lang.Class<any>): java.lang.Class<any>;
						public constructor(overrides: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, mixins: java.util.Map<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<any>>);
						public addLocalDefinition(target: java.lang.Class<any>, mixinSource: java.lang.Class<any>): void;
						public copy(): com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;
						public copy(): com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public withOverrides(overrides: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver): com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public setLocalDefinitions(sourceMixins: java.util.Map<java.lang.Class<any>,java.lang.Class<any>>): void;
						public constructor(overrides: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver);
						public withoutLocalDefinitions(): com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
						public findMixInClassFor(param0: java.lang.Class<any>): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class TypeResolutionContext extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.TypeResolutionContext>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.TypeResolutionContext interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						});
						public constructor();
						public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
					}
					export module TypeResolutionContext {
						export class Basic extends java.lang.Object implements com.fasterxml.jackson.databind.introspect.TypeResolutionContext {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.TypeResolutionContext.Basic>;
							public constructor(tf: com.fasterxml.jackson.databind.type.TypeFactory, b: com.fasterxml.jackson.databind.type.TypeBindings);
							public resolveType(type: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
							public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						}
						export class Empty extends java.lang.Object implements com.fasterxml.jackson.databind.introspect.TypeResolutionContext {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.TypeResolutionContext.Empty>;
							public resolveType(type: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
							public constructor(tf: com.fasterxml.jackson.databind.type.TypeFactory);
							public resolveType(param0: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class VirtualAnnotatedMember extends com.fasterxml.jackson.databind.introspect.AnnotatedMember implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember>;
						public _declaringClass: java.lang.Class<any>;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _name: string;
						public getAnnotated(): java.lang.reflect.AnnotatedElement;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public setValue(pojo: any, value: any): void;
						public constructor();
						public getAnnotated(): java.lang.reflect.Field;
						public setValue(param0: any, param1: any): void;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(typeContext: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, declaringClass: java.lang.Class<any>, name: string, type: com.fasterxml.jackson.databind.JavaType);
						public getDeclaringClass(): java.lang.Class<any>;
						public constructor(base: com.fasterxml.jackson.databind.introspect.AnnotatedMember);
						public withAnnotations(fallback: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public getName(): string;
						public toString(): string;
						public getModifiers(): number;
						public withAnnotations(param0: com.fasterxml.jackson.databind.introspect.AnnotationMap): com.fasterxml.jackson.databind.introspect.Annotated;
						public equals(o: any): boolean;
						public getMember(): java.lang.reflect.Member;
						public getValue(pojo: any): any;
						public getValue(param0: any): any;
						public getAnnotationCount(): number;
						public constructor(ctxt: com.fasterxml.jackson.databind.introspect.TypeResolutionContext, annotations: com.fasterxml.jackson.databind.introspect.AnnotationMap);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class VisibilityChecker<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.VisibilityChecker<any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.VisibilityChecker<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect): T;
							withOverrides(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Value): T;
							with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withIsGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withSetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withCreatorVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							withFieldVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
							isGetterVisible(param0: java.lang.reflect.Method): boolean;
							isGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							isIsGetterVisible(param0: java.lang.reflect.Method): boolean;
							isIsGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							isSetterVisible(param0: java.lang.reflect.Method): boolean;
							isSetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							isCreatorVisible(param0: java.lang.reflect.Member): boolean;
							isCreatorVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
							isFieldVisible(param0: java.lang.reflect.Field): boolean;
							isFieldVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField): boolean;
						});
						public constructor();
						public isCreatorVisible(param0: java.lang.reflect.Member): boolean;
						public isCreatorVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
						public isFieldVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField): boolean;
						public isGetterVisible(param0: java.lang.reflect.Method): boolean;
						public withSetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isSetterVisible(param0: java.lang.reflect.Method): boolean;
						public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isFieldVisible(param0: java.lang.reflect.Field): boolean;
						public withFieldVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public withCreatorVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isIsGetterVisible(param0: java.lang.reflect.Method): boolean;
						public isIsGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public withOverrides(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Value): T;
						public withIsGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
						public isGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public isSetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect): T;
						public withGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): T;
					}
					export module VisibilityChecker {
						export class Std extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std>;
							public static DEFAULT: com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public static ALL_PUBLIC: com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public _getterMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _isGetterMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _setterMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _creatorMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _fieldMinLevel: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
							public _with(g: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, isG: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, s: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, cr: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, f: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public withOverrides(vis: com.fasterxml.jackson.annotation.JsonAutoDetect.Value): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public withIsGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public withFieldVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public isSetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public constructor(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility);
							public isCreatorVisible(m: java.lang.reflect.Member): boolean;
							public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect): any;
							public withVisibility(param0: com.fasterxml.jackson.annotation.PropertyAccessor, param1: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public toString(): string;
							public isIsGetterVisible(param0: java.lang.reflect.Method): boolean;
							public constructor(getter: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, isGetter: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, setter: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, creator: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility, field: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility);
							public with(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isFieldVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedField): boolean;
							public withFieldVisibility(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isFieldVisible(param0: java.lang.reflect.Field): boolean;
							public isFieldVisible(f: java.lang.reflect.Field): boolean;
							public isGetterVisible(m: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public with(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public with(ann: com.fasterxml.jackson.annotation.JsonAutoDetect): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public withGetterVisibility(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public withCreatorVisibility(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isIsGetterVisible(m: java.lang.reflect.Method): boolean;
							public isFieldVisible(f: com.fasterxml.jackson.databind.introspect.AnnotatedField): boolean;
							public static defaultInstance(): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isCreatorVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
							public isCreatorVisible(param0: java.lang.reflect.Member): boolean;
							public withIsGetterVisibility(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isSetterVisible(m: java.lang.reflect.Method): boolean;
							public isIsGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public constructor(ann: com.fasterxml.jackson.annotation.JsonAutoDetect);
							public isGetterVisible(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public isGetterVisible(param0: java.lang.reflect.Method): boolean;
							public withSetterVisibility(v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public withOverrides(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Value): any;
							public isSetterVisible(m: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public isCreatorVisible(m: com.fasterxml.jackson.databind.introspect.AnnotatedMember): boolean;
							public static allPublicInstance(): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isGetterVisible(m: java.lang.reflect.Method): boolean;
							public withCreatorVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public withSetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
							public isIsGetterVisible(m: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
							public static construct(vis: com.fasterxml.jackson.annotation.JsonAutoDetect.Value): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public withVisibility(method: com.fasterxml.jackson.annotation.PropertyAccessor, v: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std;
							public isSetterVisible(param0: java.lang.reflect.Method): boolean;
							public withGetterVisibility(param0: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module introspect {
					export class WithMember<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.introspect.WithMember<any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.introspect.WithMember<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
						});
						public constructor();
						public withMember(param0: com.fasterxml.jackson.databind.introspect.AnnotatedMember): T;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jdk14 {
					export class JDK14Util extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jdk14.JDK14Util>;
						public constructor();
						public static getRecordFieldNames(recordType: java.lang.Class<any>): string[];
						public static findRecordConstructor(ctxt: com.fasterxml.jackson.databind.DeserializationContext, beanDesc: com.fasterxml.jackson.databind.BeanDescription, names: java.util.List<string>): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
					}
					export module JDK14Util {
						export class CreatorLocator extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jdk14.JDK14Util.CreatorLocator>;
							public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
							public _config: com.fasterxml.jackson.databind.DeserializationConfig;
							public _intr: com.fasterxml.jackson.databind.AnnotationIntrospector;
							public _constructors: java.util.List<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor>;
							public _primaryConstructor: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
							public _recordFields: com.fasterxml.jackson.databind.jdk14.JDK14Util.RawTypeName[];
							public locate(names: java.util.List<string>): com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
						}
						export class RawTypeName extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jdk14.JDK14Util.RawTypeName>;
							public rawType: java.lang.Class<any>;
							public name: string;
							public constructor(rt: java.lang.Class<any>, n: string);
						}
						export class RecordAccessor extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jdk14.JDK14Util.RecordAccessor>;
							public static instance(): com.fasterxml.jackson.databind.jdk14.JDK14Util.RecordAccessor;
							public getRecordFields(recordType: java.lang.Class<any>): com.fasterxml.jackson.databind.jdk14.JDK14Util.RawTypeName[];
							public getRecordFieldNames(recordType: java.lang.Class<any>): string[];
							public recordComponents(recordType: java.lang.Class<any>): any[];
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module json {
					export class JsonMapper extends com.fasterxml.jackson.databind.ObjectMapper {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.json.JsonMapper>;
						public copy(): com.fasterxml.jackson.databind.ObjectMapper;
						public isEnabled(f: com.fasterxml.jackson.databind.MapperFeature): boolean;
						public constructor();
						public copy(): com.fasterxml.jackson.databind.json.JsonMapper;
						public version(): com.fasterxml.jackson.core.Version;
						public getFactory(): com.fasterxml.jackson.core.JsonFactory;
						public isEnabled(f: com.fasterxml.jackson.core.JsonFactory.Feature): boolean;
						public isEnabled(f: com.fasterxml.jackson.core.json.JsonWriteFeature): boolean;
						public constructor(f: com.fasterxml.jackson.core.JsonFactory);
						public isEnabled(f: com.fasterxml.jackson.databind.DeserializationFeature): boolean;
						public isEnabled(f: com.fasterxml.jackson.core.StreamReadFeature): boolean;
						public static builder(streamFactory: com.fasterxml.jackson.core.JsonFactory): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
						public isEnabled(f: com.fasterxml.jackson.core.json.JsonReadFeature): boolean;
						public isEnabled(f: com.fasterxml.jackson.databind.SerializationFeature): boolean;
						public isEnabled(f: com.fasterxml.jackson.core.StreamWriteFeature): boolean;
						public constructor(jf: com.fasterxml.jackson.core.JsonFactory);
						public constructor(src: com.fasterxml.jackson.databind.ObjectMapper);
						public static builder(): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
						public constructor(jf: com.fasterxml.jackson.core.JsonFactory, sp: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, dc: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext);
						public rebuild(): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
						public isEnabled(f: com.fasterxml.jackson.core.JsonParser.Feature): boolean;
						public isEnabled(f: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public constructor(src: com.fasterxml.jackson.databind.json.JsonMapper);
					}
					export module JsonMapper {
						export class Builder extends com.fasterxml.jackson.databind.cfg.MapperBuilder<com.fasterxml.jackson.databind.json.JsonMapper,com.fasterxml.jackson.databind.json.JsonMapper.Builder> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.json.JsonMapper.Builder>;
							public enable(...features: com.fasterxml.jackson.core.StreamWriteFeature[]): any;
							public enable(...features: com.fasterxml.jackson.core.json.JsonReadFeature[]): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
							public configure(f: com.fasterxml.jackson.core.json.JsonWriteFeature, state: boolean): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
							public enable(...features: com.fasterxml.jackson.core.StreamReadFeature[]): any;
							public enable(...features: com.fasterxml.jackson.core.json.JsonWriteFeature[]): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
							public configure(feature: com.fasterxml.jackson.databind.SerializationFeature, state: boolean): any;
							public constructor(m: com.fasterxml.jackson.databind.json.JsonMapper);
							public enable(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): any;
							public configure(f: com.fasterxml.jackson.core.json.JsonReadFeature, state: boolean): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
							public enable(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): any;
							public configure(feature: com.fasterxml.jackson.core.JsonGenerator.Feature, state: boolean): any;
							public disable(...features: com.fasterxml.jackson.core.json.JsonWriteFeature[]): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
							public disable(...features: com.fasterxml.jackson.databind.SerializationFeature[]): any;
							public configure(feature: com.fasterxml.jackson.core.StreamWriteFeature, state: boolean): any;
							public enable(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): any;
							public constructor(mapper: any);
							public disable(...features: com.fasterxml.jackson.databind.DeserializationFeature[]): any;
							public disable(...features: com.fasterxml.jackson.core.StreamReadFeature[]): any;
							public configure(feature: com.fasterxml.jackson.databind.DeserializationFeature, state: boolean): any;
							public enable(...features: com.fasterxml.jackson.databind.SerializationFeature[]): any;
							public disable(...features: com.fasterxml.jackson.core.StreamWriteFeature[]): any;
							public configure(feature: com.fasterxml.jackson.databind.MapperFeature, state: boolean): any;
							public configure(feature: com.fasterxml.jackson.core.JsonParser.Feature, state: boolean): any;
							public configure(feature: com.fasterxml.jackson.core.StreamReadFeature, state: boolean): any;
							public disable(...features: com.fasterxml.jackson.core.JsonGenerator.Feature[]): any;
							public disable(...features: com.fasterxml.jackson.core.json.JsonReadFeature[]): com.fasterxml.jackson.databind.json.JsonMapper.Builder;
							public enable(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
							public disable(...features: com.fasterxml.jackson.databind.MapperFeature[]): any;
							public disable(...features: com.fasterxml.jackson.core.JsonParser.Feature[]): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonAnyFormatVisitor extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
					export module JsonAnyFormatVisitor {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor.Base>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonArrayFormatVisitor extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export module JsonArrayFormatVisitor {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public constructor(p: com.fasterxml.jackson.databind.SerializerProvider);
							public itemsFormat(handler: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, elementType: com.fasterxml.jackson.databind.JavaType): void;
							public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public setProvider(p: com.fasterxml.jackson.databind.SerializerProvider): void;
							public itemsFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							public itemsFormat(format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonBooleanFormatVisitor extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
					}
					export module JsonBooleanFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public enumTypes(enums: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public format(format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonFormatTypes {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes>;
						public static STRING: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static NUMBER: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static INTEGER: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static BOOLEAN: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static OBJECT: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static ARRAY: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static NULL: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static ANY: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static values(): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes[];
						public value(): string;
						public static valueOf(name: string): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static forValue(s: string): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonFormatVisitable extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						});
						public constructor();
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonFormatVisitorWithSerializerProvider extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonFormatVisitorWrapper extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							expectObjectFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
							expectArrayFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
							expectStringFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
							expectNumberFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;
							expectIntegerFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;
							expectBooleanFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor;
							expectNullFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor;
							expectAnyFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
							expectMapFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public expectArrayFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
						public expectStringFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
						public expectObjectFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
						public expectIntegerFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public expectAnyFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
						public expectNumberFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;
						public expectNullFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor;
						public expectBooleanFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor;
						public expectMapFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export module JsonFormatVisitorWrapper {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public expectObjectFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
							public expectMapFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
							public expectIntegerFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;
							public expectNullFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor;
							public expectMapFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
							public expectBooleanFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor;
							public expectObjectFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
							public expectNullFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor;
							public expectAnyFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
							public expectAnyFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
							public constructor(p: com.fasterxml.jackson.databind.SerializerProvider);
							public expectNumberFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;
							public expectIntegerFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public expectNumberFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;
							public expectArrayFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
							public expectBooleanFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor;
							public setProvider(p: com.fasterxml.jackson.databind.SerializerProvider): void;
							public expectStringFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
							public expectArrayFormat(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
							public expectStringFormat(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonIntegerFormatVisitor extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
					}
					export module JsonIntegerFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public enumTypes(enums: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public numberType(type: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public format(format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonMapFormatVisitor extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							keyFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							valueFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public keyFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public valueFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export module JsonMapFormatVisitor {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public valueFormat(handler: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, valueType: com.fasterxml.jackson.databind.JavaType): void;
							public keyFormat(handler: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, keyType: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(p: com.fasterxml.jackson.databind.SerializerProvider);
							public valueFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public setProvider(p: com.fasterxml.jackson.databind.SerializerProvider): void;
							public keyFormat(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param1: com.fasterxml.jackson.databind.JavaType): void;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonNullFormatVisitor extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
					export module JsonNullFormatVisitor {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor.Base>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonNumberFormatVisitor extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
					}
					export module JsonNumberFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public enumTypes(enums: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public numberType(param0: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public numberType(type: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public format(format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonObjectFormatVisitor extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							property(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							property(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							optionalProperty(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							optionalProperty(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public property(param0: com.fasterxml.jackson.databind.BeanProperty): void;
						public optionalProperty(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
						public optionalProperty(param0: com.fasterxml.jackson.databind.BeanProperty): void;
						public property(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
						public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
					}
					export module JsonObjectFormatVisitor {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor.Base>;
							public _provider: com.fasterxml.jackson.databind.SerializerProvider;
							public constructor();
							public property(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(p: com.fasterxml.jackson.databind.SerializerProvider);
							public optionalProperty(name: string, handler: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, propertyTypeHint: com.fasterxml.jackson.databind.JavaType): void;
							public optionalProperty(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							public getProvider(): com.fasterxml.jackson.databind.SerializerProvider;
							public setProvider(p: com.fasterxml.jackson.databind.SerializerProvider): void;
							public property(param0: com.fasterxml.jackson.databind.BeanProperty): void;
							public optionalProperty(param0: string, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, param2: com.fasterxml.jackson.databind.JavaType): void;
							public optionalProperty(prop: com.fasterxml.jackson.databind.BeanProperty): void;
							public property(prop: com.fasterxml.jackson.databind.BeanProperty): void;
							public property(name: string, handler: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, propertyTypeHint: com.fasterxml.jackson.databind.JavaType): void;
							public setProvider(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonStringFormatVisitor extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
					}
					export module JsonStringFormatVisitor {
						export class Base extends com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public enumTypes(enums: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public format(format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonValueFormat {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat>;
						public static COLOR: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static DATE: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static DATE_TIME: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static EMAIL: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static HOST_NAME: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static IP_ADDRESS: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static IPV6: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static PHONE: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static REGEX: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static STYLE: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static TIME: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static URI: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static UTC_MILLISEC: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static UUID: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static valueOf(name: string): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat[];
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonFormatVisitors {
					export class JsonValueFormatVisitor extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							enumTypes(param0: java.util.Set<string>): void;
						});
						public constructor();
						public enumTypes(param0: java.util.Set<string>): void;
						public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
					}
					export module JsonValueFormatVisitor {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base>;
							public constructor();
							public enumTypes(param0: java.util.Set<string>): void;
							public enumTypes(enums: java.util.Set<string>): void;
							public format(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public format(format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonschema {
					export class JsonSchema extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonschema.JsonSchema>;
						public equals(obj: any): boolean;
						public constructor(schema: com.fasterxml.jackson.databind.node.ObjectNode);
						public getSchemaNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public hashCode(): number;
						public static getDefaultSchemaNode(): com.fasterxml.jackson.databind.JsonNode;
						public equals(o: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonschema {
					export class JsonSerializableSchema extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							id(): string;
							schemaType(): string;
							schemaObjectPropertiesDefinition(): string;
							schemaItemDefinition(): string;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public static NO_VALUE: string;
						public equals(obj: any): boolean;
						public schemaType(): string;
						public equals(param0: any): boolean;
						public hashCode(): number;
						/** @deprecated */
						public schemaItemDefinition(): string;
						public id(): string;
						/** @deprecated */
						public schemaObjectPropertiesDefinition(): string;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsonschema {
					export class SchemaAware extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsonschema.SchemaAware>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsonschema.SchemaAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						});
						public constructor();
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export class BasicPolymorphicTypeValidator extends com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator>;
						public _invalidBaseTypes: java.util.Set<java.lang.Class<any>>;
						public _baseTypeMatchers: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher[];
						public _subTypeNameMatchers: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher[];
						public _subClassMatchers: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher[];
						public validateBaseType(ctxt: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public constructor();
						public validateSubClassName(ctxt: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subClassName: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateSubType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public static builder(): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
						public validateSubType(ctxt: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateBaseType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateSubClassName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subClassName: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public constructor(invalidBaseTypes: java.util.Set<java.lang.Class<any>>, baseTypeMatchers: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher[], subTypeNameMatchers: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher[], subClassMatchers: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher[]);
					}
					export module BasicPolymorphicTypeValidator {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder>;
							public _invalidBaseTypes: java.util.Set<java.lang.Class<any>>;
							public _baseTypeMatchers: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher>;
							public _subTypeNameMatchers: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher>;
							public _subTypeClassMatchers: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher>;
							public constructor();
							public _appendSubNameMatcher(matcher: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfBaseType(patternForBase: java.util.regex.Pattern): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public denyForExactBaseType(baseTypeToDeny: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfSubType(subTypeBase: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfBaseType(baseOfBase: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfSubType(prefixForSubType: string): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfSubType(patternForSubType: java.util.regex.Pattern): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfBaseType(prefixForBase: string): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfSubType(matcher: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public _appendSubClassMatcher(matcher: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public _appendBaseMatcher(matcher: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public build(): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
							public allowIfSubTypeIsArray(): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
							public allowIfBaseType(matcher: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher): com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder;
						}
						export abstract class NameMatcher extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher>;
							public constructor();
							public match(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: string): boolean;
						}
						export abstract class TypeMatcher extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher>;
							public constructor();
							public match(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export class DefaultBaseTypeLimitingValidator extends com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator>;
						public constructor();
						public validateSubClassName(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateSubType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public isSafeSubType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subType: com.fasterxml.jackson.databind.JavaType): boolean;
						public validateSubType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateBaseType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public isUnsafeBaseType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): boolean;
						public validateSubClassName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subClassName: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateBaseType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
					}
					export module DefaultBaseTypeLimitingValidator {
						export class UnsafeBaseTypes extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.UnsafeBaseTypes>;
							public static instance: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.UnsafeBaseTypes;
							public isUnsafeBaseType(rawBaseType: java.lang.Class<any>): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export class NamedType extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public _class: java.lang.Class<any>;
						public _hashCode: number;
						public _name: string;
						public equals(obj: any): boolean;
						public getType(): java.lang.Class<any>;
						public constructor(c: java.lang.Class<any>);
						public hashCode(): number;
						public constructor(c: java.lang.Class<any>, name: string);
						public equals(o: any): boolean;
						public getName(): string;
						public hasName(): boolean;
						public toString(): string;
						public setName(name: string): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export abstract class PolymorphicTypeValidator extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator>;
						public constructor();
						public validateSubClassName(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateSubType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						public validateBaseType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
					}
					export module PolymorphicTypeValidator {
						export abstract class Base extends com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base>;
							public constructor();
							public validateSubClassName(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateSubType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateBaseType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateBaseType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateSubClassName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subClassName: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateSubType(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						}
						export class Validity {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity>;
							public static ALLOWED: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public static DENIED: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public static INDETERMINATE: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(name: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public static values(): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity[];
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export abstract class SubtypeResolver extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.SubtypeResolver>;
						/** @deprecated */
						public collectAndResolveSubtypes(property: com.fasterxml.jackson.databind.introspect.AnnotatedMember, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, baseType: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public constructor();
						/** @deprecated */
						public collectAndResolveSubtypes(baseType: com.fasterxml.jackson.databind.introspect.AnnotatedClass, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public collectAndResolveSubtypesByTypeId(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, property: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public copy(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
						public collectAndResolveSubtypesByClass(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public collectAndResolveSubtypesByTypeId(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public registerSubtypes(...param0: java.lang.Class<any>[]): void;
						public registerSubtypes(...param0: com.fasterxml.jackson.databind.jsontype.NamedType[]): void;
						public collectAndResolveSubtypesByClass(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, property: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public registerSubtypes(param0: java.util.Collection<java.lang.Class<any>>): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export abstract class TypeDeserializer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeDeserializer>;
						public constructor();
						public static deserializeIfNatural(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, base: java.lang.Class<any>): any;
						public deserializeTypedFromScalar(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						public getPropertyName(): string;
						public deserializeTypedFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public deserializeTypedFromAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public static deserializeIfNatural(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, baseType: com.fasterxml.jackson.databind.JavaType): any;
						public deserializeTypedFromArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
						public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public getDefaultImpl(): java.lang.Class<any>;
						public hasDefaultImpl(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export class TypeIdResolver extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeIdResolver>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsontype.TypeIdResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							init(param0: com.fasterxml.jackson.databind.JavaType): void;
							idFromValue(param0: any): string;
							idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							idFromBaseType(): string;
							typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							getDescForKnownTypeIds(): string;
							getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						});
						public constructor();
						public init(param0: com.fasterxml.jackson.databind.JavaType): void;
						public getDescForKnownTypeIds(): string;
						public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
						public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
						public idFromValue(param0: any): string;
						public idFromBaseType(): string;
						public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export class TypeResolverBuilder<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getDefaultImpl(): java.lang.Class<any>;
							buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): T;
							inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): T;
							typeProperty(param0: string): T;
							defaultImpl(param0: java.lang.Class<any>): T;
							typeIdVisibility(param0: boolean): T;
							withDefaultImpl(defaultImpl: java.lang.Class<any>): T;
						});
						public constructor();
						public defaultImpl(param0: java.lang.Class<any>): T;
						public buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): T;
						public withDefaultImpl(defaultImpl: java.lang.Class<any>): T;
						public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): T;
						public typeProperty(param0: string): T;
						public typeIdVisibility(param0: boolean): T;
						public getDefaultImpl(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export abstract class TypeSerializer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.TypeSerializer>;
						public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						/** @deprecated */
						public writeTypePrefixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
						public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						/** @deprecated */
						public writeTypeSuffixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
						/** @deprecated */
						public writeTypePrefixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
						/** @deprecated */
						public writeTypePrefixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
						public typeId(value: any, valueShape: com.fasterxml.jackson.core.JsonToken, id: any): com.fasterxml.jackson.core.type.WritableTypeId;
						/** @deprecated */
						public writeCustomTypePrefixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
						public writeTypeSuffix(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
						/** @deprecated */
						public writeTypeSuffixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
						/** @deprecated */
						public writeTypeSuffixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
						/** @deprecated */
						public writeCustomTypePrefixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
						public writeTypePrefix(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
						/** @deprecated */
						public writeTypePrefixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor();
						/** @deprecated */
						public writeTypePrefixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
						public _writeLegacySuffix(g: com.fasterxml.jackson.core.JsonGenerator, typeId: com.fasterxml.jackson.core.type.WritableTypeId): void;
						/** @deprecated */
						public writeCustomTypePrefixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
						public getPropertyName(): string;
						/** @deprecated */
						public writeTypePrefixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
						/** @deprecated */
						public writeCustomTypeSuffixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
						public typeId(value: any, valueShape: com.fasterxml.jackson.core.JsonToken): com.fasterxml.jackson.core.type.WritableTypeId;
						/** @deprecated */
						public writeCustomTypeSuffixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
						/** @deprecated */
						public writeCustomTypeSuffixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
						public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						public typeId(value: any, typeForId: java.lang.Class<any>, valueShape: com.fasterxml.jackson.core.JsonToken): com.fasterxml.jackson.core.type.WritableTypeId;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsArrayTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer>;
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, property: com.fasterxml.jackson.databind.BeanProperty);
							public _locateTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): string;
							public deserializeTypedFromArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public deserializeTypedFromAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromScalar(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromArray(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public deserializeTypedFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromObject(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _usesExternalId(): boolean;
							public deserializeTypedFromScalar(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromAny(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsArrayTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer>;
							public constructor();
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty);
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsDeductionTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer>;
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType, inclusion: com.fasterxml.jackson.annotation.JsonTypeInfo.As);
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, property: com.fasterxml.jackson.databind.BeanProperty);
							public deserializeTypedFromObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public buildFingerprints(config: com.fasterxml.jackson.databind.DeserializationConfig, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): java.util.Map<java.util.BitSet,string>;
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, defaultImpl: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>);
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsExistingPropertyTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer>;
							public constructor();
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty);
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty, propName: string);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsExternalTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer>;
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public _usesExternalId(): boolean;
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsExternalTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer>;
							public _typePropertyName: string;
							public constructor();
							public _writeScalarPrefix(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
							public _writeObjectSuffix(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
							public _writeArrayPrefix(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public getPropertyName(): string;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty, propName: string);
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty);
							public _writeScalarSuffix(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
							public _writeObjectPrefix(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
							public _writeArraySuffix(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsPropertyTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer>;
							public _inclusion: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public _msgForMissingId: string;
							public constructor();
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType, inclusion: com.fasterxml.jackson.annotation.JsonTypeInfo.As);
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, property: com.fasterxml.jackson.databind.BeanProperty);
							public deserializeTypedFromObject(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromAny(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							/** @deprecated */
							public _deserializeTypedUsingDefaultImpl(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, tb: com.fasterxml.jackson.databind.util.TokenBuffer): any;
							public _deserializeTypedForId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, tb: com.fasterxml.jackson.databind.util.TokenBuffer, typeId: string): any;
							public _deserializeTypedUsingDefaultImpl(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, tb: com.fasterxml.jackson.databind.util.TokenBuffer, priorFailureMsg: string): any;
							public deserializeTypedFromObject(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromAny(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsPropertyTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer>;
							public _typePropertyName: string;
							public constructor();
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty);
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public getPropertyName(): string;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty, propName: string);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsWrapperTypeDeserializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer>;
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, property: com.fasterxml.jackson.databind.BeanProperty);
							public deserializeTypedFromArray(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public _deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(bt: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public deserializeTypedFromAny(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromScalar(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromArray(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public deserializeTypedFromObject(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromObject(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromScalar(param0: com.fasterxml.jackson.core.JsonParser, param1: com.fasterxml.jackson.databind.DeserializationContext): any;
							public deserializeTypedFromAny(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class AsWrapperTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer>;
							public constructor();
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty);
							public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
							public _validTypeId(typeId: string): string;
							public _writeTypeId(g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class ClassNameIdResolver extends com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver>;
							public _subTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
							public constructor();
							public _idFrom(value: any, cls: java.lang.Class<any>, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory): string;
							public registerSubtype(type: java.lang.Class<any>, name: string): void;
							public init(bt: com.fasterxml.jackson.databind.JavaType): void;
							public idFromValue(param0: any): string;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory);
							public static construct(baseType: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
							public getDescForKnownTypeIds(): string;
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public idFromValue(value: any): string;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator);
							public idFromValueAndType(value: any, type: java.lang.Class<any>): string;
							public _typeFromId(id: string, ctxt: com.fasterxml.jackson.databind.DatabindContext): com.fasterxml.jackson.databind.JavaType;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public typeFromId(context: com.fasterxml.jackson.databind.DatabindContext, id: string): com.fasterxml.jackson.databind.JavaType;
							/** @deprecated */
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory);
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class LaissezFaireSubTypeValidator extends com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator>;
							public static instance: com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
							public constructor();
							public validateSubType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateBaseType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateBaseType(ctxt: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateSubClassName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subClassName: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateSubClassName(ctxt: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subClassName: string): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
							public validateSubType(ctxt: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class MinimalClassNameIdResolver extends com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver>;
							public _basePackageName: string;
							public _basePackagePrefix: string;
							public constructor();
							public init(bt: com.fasterxml.jackson.databind.JavaType): void;
							public idFromValue(param0: any): string;
							public static construct(baseType: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public static construct(baseType: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
							public getDescForKnownTypeIds(): string;
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public idFromValue(value: any): string;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator);
							public idFromValueAndType(value: any, type: java.lang.Class<any>): string;
							public _typeFromId(id: string, ctxt: com.fasterxml.jackson.databind.DatabindContext): com.fasterxml.jackson.databind.JavaType;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public typeFromId(context: com.fasterxml.jackson.databind.DatabindContext, id: string): com.fasterxml.jackson.databind.JavaType;
							/** @deprecated */
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory);
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class StdSubtypeResolver extends com.fasterxml.jackson.databind.jsontype.SubtypeResolver implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver>;
							public _registeredSubtypes: java.util.LinkedHashSet<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public constructor();
							public _combineNamedAndUnnamed(rawBase: java.lang.Class<any>, typesHandled: java.util.Set<java.lang.Class<any>>, byName: java.util.Map<string,com.fasterxml.jackson.databind.jsontype.NamedType>): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public _collectAndResolveByTypeId(annotatedType: com.fasterxml.jackson.databind.introspect.AnnotatedClass, namedType: com.fasterxml.jackson.databind.jsontype.NamedType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, typesHandled: java.util.Set<java.lang.Class<any>>, byName: java.util.Map<string,com.fasterxml.jackson.databind.jsontype.NamedType>): void;
							public collectAndResolveSubtypesByClass(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, type: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public registerSubtypes(subtypes: java.util.Collection<java.lang.Class<any>>): void;
							public collectAndResolveSubtypesByClass(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, property: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public collectAndResolveSubtypesByTypeId(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public registerSubtypes(...classes: java.lang.Class<any>[]): void;
							public collectAndResolveSubtypesByTypeId(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, property: com.fasterxml.jackson.databind.introspect.AnnotatedMember, baseType: com.fasterxml.jackson.databind.JavaType): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver);
							public copy(): com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
							public registerSubtypes(...param0: com.fasterxml.jackson.databind.jsontype.NamedType[]): void;
							public _collectAndResolve(annotatedType: com.fasterxml.jackson.databind.introspect.AnnotatedClass, namedType: com.fasterxml.jackson.databind.jsontype.NamedType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, collectedSubtypes: java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType,com.fasterxml.jackson.databind.jsontype.NamedType>): void;
							public registerSubtypes(param0: java.util.Collection<java.lang.Class<any>>): void;
							public collectAndResolveSubtypesByClass(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.introspect.AnnotatedClass): java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>;
							public registerSubtypes(...types: com.fasterxml.jackson.databind.jsontype.NamedType[]): void;
							public registerSubtypes(...param0: java.lang.Class<any>[]): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class StdTypeResolverBuilder extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder>;
							public _idType: com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public _includeAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public _typeProperty: string;
							public _typeIdVisible: boolean;
							public _defaultImpl: java.lang.Class<any>;
							public _customIdResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public allowPrimitiveTypes(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): boolean;
							public defaultImpl(defaultImpl: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public buildTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public buildTypeDeserializer(config: com.fasterxml.jackson.databind.DeserializationConfig, baseType: com.fasterxml.jackson.databind.JavaType, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public static noTypeInfoBuilder(): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public getTypeProperty(): string;
							public buildTypeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, baseType: com.fasterxml.jackson.databind.JavaType, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public inclusion(includeAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public defineDefaultImpl(config: com.fasterxml.jackson.databind.DeserializationConfig, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
							public constructor(idType: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, idAs: com.fasterxml.jackson.annotation.JsonTypeInfo.As, propName: string);
							public inclusion(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.As): any;
							public typeProperty(typeIdPropName: string): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public withDefaultImpl(defaultImpl: java.lang.Class<any>): any;
							public buildTypeDeserializer(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public init(param0: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, param1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): any;
							public typeProperty(param0: string): any;
							public constructor();
							public isTypeIdVisible(): boolean;
							public typeIdVisibility(param0: boolean): any;
							public init(idType: com.fasterxml.jackson.annotation.JsonTypeInfo.Id, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public reportInvalidBaseType(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, ptv: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
							public verifyBaseTypeValidity(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
							public withDefaultImpl(defaultImpl: java.lang.Class<any>): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public getDefaultImpl(): java.lang.Class<any>;
							public subTypeValidator(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
							public defaultImpl(param0: java.lang.Class<any>): any;
							public typeIdVisibility(isVisible: boolean): com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
							public constructor(base: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder, defaultImpl: java.lang.Class<any>);
							public idResolver(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subtypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>, forSer: boolean, forDeser: boolean): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class SubTypeValidator extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator>;
							public static PREFIX_SPRING: string;
							public static PREFIX_C3P0: string;
							public static DEFAULT_NO_DESER_CLASS_NAMES: java.util.Set<string>;
							public _cfgIllegalClassNames: java.util.Set<string>;
							public constructor();
							public validateSubType(ctxt: com.fasterxml.jackson.databind.DeserializationContext, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): void;
							public static instance(): com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export abstract class TypeDeserializerBase extends com.fasterxml.jackson.databind.jsontype.TypeDeserializer implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase>;
							public _idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public _baseType: com.fasterxml.jackson.databind.JavaType;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _defaultImpl: com.fasterxml.jackson.databind.JavaType;
							public _typePropertyName: string;
							public _typeIdVisible: boolean;
							public _deserializers: java.util.Map<string,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
							public _defaultImplDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, property: com.fasterxml.jackson.databind.BeanProperty);
							public _findDefaultImplDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public _handleUnknownTypeId(ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeId: string): com.fasterxml.jackson.databind.JavaType;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, typePropertyName: string, typeIdVisible: boolean, defaultImpl: com.fasterxml.jackson.databind.JavaType);
							public toString(): string;
							public _findDeserializer(ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeId: string): com.fasterxml.jackson.databind.JsonDeserializer<any>;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							/** @deprecated */
							public _deserializeWithNativeTypeId(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): any;
							public getPropertyName(): string;
							public baseTypeName(): string;
							public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
							public _handleMissingTypeId(ctxt: com.fasterxml.jackson.databind.DeserializationContext, extraDesc: string): com.fasterxml.jackson.databind.JavaType;
							public _deserializeWithNativeTypeId(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext, typeId: any): any;
							public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public getDefaultImpl(): java.lang.Class<any>;
							public hasDefaultImpl(): boolean;
							public baseType(): com.fasterxml.jackson.databind.JavaType;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export abstract class TypeIdResolverBase extends java.lang.Object implements com.fasterxml.jackson.databind.jsontype.TypeIdResolver {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase>;
							public _typeFactory: com.fasterxml.jackson.databind.type.TypeFactory;
							public _baseType: com.fasterxml.jackson.databind.JavaType;
							public constructor();
							public getDescForKnownTypeIds(): string;
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public init(bt: com.fasterxml.jackson.databind.JavaType): void;
							public typeFromId(context: com.fasterxml.jackson.databind.DatabindContext, id: string): com.fasterxml.jackson.databind.JavaType;
							public idFromValue(param0: any): string;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory);
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export class TypeNameIdResolver extends com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver>;
							public _config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>;
							public _typeToId: java.util.concurrent.ConcurrentHashMap<string,string>;
							public _idToType: java.util.Map<string,com.fasterxml.jackson.databind.JavaType>;
							public _caseInsensitive: boolean;
							public constructor();
							public init(bt: com.fasterxml.jackson.databind.JavaType): void;
							public idFromValue(param0: any): string;
							public toString(): string;
							public _typeFromId(id: string): com.fasterxml.jackson.databind.JavaType;
							public getMechanism(): com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
							public typeFromId(param0: com.fasterxml.jackson.databind.DatabindContext, param1: string): com.fasterxml.jackson.databind.JavaType;
							public constructor(baseType: com.fasterxml.jackson.databind.JavaType, typeFactory: com.fasterxml.jackson.databind.type.TypeFactory);
							public getDescForKnownTypeIds(): string;
							public constructor(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, typeToId: java.util.concurrent.ConcurrentHashMap<string,string>, idToType: java.util.HashMap<string,com.fasterxml.jackson.databind.JavaType>);
							public init(param0: com.fasterxml.jackson.databind.JavaType): void;
							public idFromValue(value: any): string;
							public idFromValueAndType(value: any, type: java.lang.Class<any>): string;
							public static _defaultTypeId(cls: java.lang.Class<any>): string;
							public idFromValueAndType(param0: any, param1: java.lang.Class<any>): string;
							public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: com.fasterxml.jackson.databind.JavaType, subtypes: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>, forSer: boolean, forDeser: boolean): com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
							public typeFromId(context: com.fasterxml.jackson.databind.DatabindContext, id: string): com.fasterxml.jackson.databind.JavaType;
							public idFromClass(clazz: java.lang.Class<any>): string;
							public idFromBaseType(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module jsontype {
					export module impl {
						export abstract class TypeSerializerBase extends com.fasterxml.jackson.databind.jsontype.TypeSerializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase>;
							public _idResolver: com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public constructor();
							public handleMissingId(value: any): void;
							public writeTypePrefix(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
							public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
							public getPropertyName(): string;
							public writeTypeSuffix(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
							public constructor(idRes: com.fasterxml.jackson.databind.jsontype.TypeIdResolver, property: com.fasterxml.jackson.databind.BeanProperty);
							public writeTypeSuffix(g: com.fasterxml.jackson.core.JsonGenerator, idMetadata: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
							public idFromValue(value: any): string;
							public idFromValueAndType(value: any, type: java.lang.Class<any>): string;
							public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
							public _generateTypeId(idMetadata: com.fasterxml.jackson.core.type.WritableTypeId): void;
							public writeTypePrefix(g: com.fasterxml.jackson.core.JsonGenerator, idMetadata: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module module {
					export class SimpleAbstractTypeResolver extends com.fasterxml.jackson.databind.AbstractTypeResolver implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver>;
						public _mappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<any>>;
						public addMapping(superType: java.lang.Class<any>, subType: java.lang.Class<any>): com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
						public constructor();
						public findTypeMapping(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public resolveAbstractType(config: com.fasterxml.jackson.databind.DeserializationConfig, typeDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public resolveAbstractType(config: com.fasterxml.jackson.databind.DeserializationConfig, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module module {
					export class SimpleDeserializers extends com.fasterxml.jackson.databind.deser.Deserializers.Base implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.module.SimpleDeserializers>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonDeserializer<any>>;
						public _hasEnumDeserializer: boolean;
						public findTreeNodeDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addDeserializer(forClass: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): void;
						public findArrayDeserializer(type: com.fasterxml.jackson.databind.type.ArrayType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor();
						public findEnumDeserializer(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public addDeserializers(desers: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>): void;
						public findBeanDeserializer(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapDeserializer(param0: com.fasterxml.jackson.databind.type.MapType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findEnumDeserializer(type: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public hasDeserializerFor(config: com.fasterxml.jackson.databind.DeserializationConfig, valueType: java.lang.Class<any>): boolean;
						public findMapDeserializer(type: com.fasterxml.jackson.databind.type.MapType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionDeserializer(type: com.fasterxml.jackson.databind.type.CollectionType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapLikeDeserializer(param0: com.fasterxml.jackson.databind.type.MapLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.KeyDeserializer, param4: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param5: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findTreeNodeDeserializer(nodeType: java.lang.Class<any>, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(param0: com.fasterxml.jackson.databind.type.ReferenceType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public constructor(desers: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>);
						public findCollectionLikeDeserializer(param0: com.fasterxml.jackson.databind.type.CollectionLikeType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findCollectionLikeDeserializer(type: com.fasterxml.jackson.databind.type.CollectionLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findMapLikeDeserializer(type: com.fasterxml.jackson.databind.type.MapLikeType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keyDeserializer: com.fasterxml.jackson.databind.KeyDeserializer, elementTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, elementDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findArrayDeserializer(param0: com.fasterxml.jackson.databind.type.ArrayType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, param4: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findBeanDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonDeserializer<any>;
						public findReferenceDeserializer(refType: com.fasterxml.jackson.databind.type.ReferenceType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentTypeDeserializer: com.fasterxml.jackson.databind.jsontype.TypeDeserializer, contentDeserializer: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.JsonDeserializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module module {
					export class SimpleKeyDeserializers extends java.lang.Object implements com.fasterxml.jackson.databind.deser.KeyDeserializers, java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.module.SimpleKeyDeserializers>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.KeyDeserializer>;
						public constructor();
						public findKeyDeserializer(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
						public findKeyDeserializer(param0: com.fasterxml.jackson.databind.JavaType, param1: com.fasterxml.jackson.databind.DeserializationConfig, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.KeyDeserializer;
						public addDeserializer(forClass: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.KeyDeserializer): com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module module {
					export class SimpleModule extends com.fasterxml.jackson.databind.Module implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.module.SimpleModule>;
						public _name: string;
						public _version: com.fasterxml.jackson.core.Version;
						public _hasExplicitName: boolean;
						public _serializers: com.fasterxml.jackson.databind.module.SimpleSerializers;
						public _deserializers: com.fasterxml.jackson.databind.module.SimpleDeserializers;
						public _keySerializers: com.fasterxml.jackson.databind.module.SimpleSerializers;
						public _keyDeserializers: com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
						public _abstractTypes: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
						public _valueInstantiators: com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
						public _deserializerModifier: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
						public _serializerModifier: com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
						public _mixins: java.util.HashMap<java.lang.Class<any>,java.lang.Class<any>>;
						public _subtypes: java.util.LinkedHashSet<com.fasterxml.jackson.databind.jsontype.NamedType>;
						public _namingStrategy: com.fasterxml.jackson.databind.PropertyNamingStrategy;
						public setMixInAnnotation(targetType: java.lang.Class<any>, mixinClass: java.lang.Class<any>): com.fasterxml.jackson.databind.module.SimpleModule;
						public registerSubtypes(...subtypes: com.fasterxml.jackson.databind.jsontype.NamedType[]): com.fasterxml.jackson.databind.module.SimpleModule;
						public setSerializerModifier(mod: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.module.SimpleModule;
						public addSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.module.SimpleModule;
						public _checkNotNull(thingy: any, type: string): void;
						public addKeySerializer(type: java.lang.Class<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.module.SimpleModule;
						public registerSubtypes(subtypes: java.util.Collection<java.lang.Class<any>>): com.fasterxml.jackson.databind.module.SimpleModule;
						public getTypeId(): any;
						public addSerializer(type: java.lang.Class<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.module.SimpleModule;
						public addAbstractTypeMapping(superType: java.lang.Class<any>, subType: java.lang.Class<any>): com.fasterxml.jackson.databind.module.SimpleModule;
						public addDeserializer(type: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.JsonDeserializer<any>): com.fasterxml.jackson.databind.module.SimpleModule;
						public constructor(name: string, version: com.fasterxml.jackson.core.Version);
						public setNamingStrategy(naming: com.fasterxml.jackson.databind.PropertyNamingStrategy): com.fasterxml.jackson.databind.module.SimpleModule;
						public registerSubtypes(...subtypes: java.lang.Class<any>[]): com.fasterxml.jackson.databind.module.SimpleModule;
						public setupModule(context: com.fasterxml.jackson.databind.Module.SetupContext): void;
						public setDeserializers(d: com.fasterxml.jackson.databind.module.SimpleDeserializers): void;
						public constructor();
						public addKeyDeserializer(type: java.lang.Class<any>, deser: com.fasterxml.jackson.databind.KeyDeserializer): com.fasterxml.jackson.databind.module.SimpleModule;
						public getModuleName(): string;
						public version(): com.fasterxml.jackson.core.Version;
						public setKeySerializers(ks: com.fasterxml.jackson.databind.module.SimpleSerializers): void;
						public constructor(name: string, version: com.fasterxml.jackson.core.Version, serializers: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>);
						public addValueInstantiator(beanType: java.lang.Class<any>, inst: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.module.SimpleModule;
						public setValueInstantiators(svi: com.fasterxml.jackson.databind.module.SimpleValueInstantiators): void;
						public constructor(version: com.fasterxml.jackson.core.Version);
						public constructor(name: string);
						public constructor(name: string, version: com.fasterxml.jackson.core.Version, deserializers: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>);
						public setKeyDeserializers(kd: com.fasterxml.jackson.databind.module.SimpleKeyDeserializers): void;
						public setDeserializerModifier(mod: com.fasterxml.jackson.databind.deser.BeanDeserializerModifier): com.fasterxml.jackson.databind.module.SimpleModule;
						public constructor(name: string, version: com.fasterxml.jackson.core.Version, deserializers: java.util.Map<java.lang.Class<any>,com.fasterxml.jackson.databind.JsonDeserializer<any>>, serializers: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>);
						public setSerializers(s: com.fasterxml.jackson.databind.module.SimpleSerializers): void;
						public setAbstractTypes(atr: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver): void;
						public setupModule(param0: com.fasterxml.jackson.databind.Module.SetupContext): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module module {
					export class SimpleSerializers extends com.fasterxml.jackson.databind.ser.Serializers.Base implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.module.SimpleSerializers>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonSerializer<any>>;
						public _interfaceMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.JsonSerializer<any>>;
						public _hasEnumSerializer: boolean;
						public constructor();
						public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public addSerializers(sers: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>): void;
						public findMapLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.MapLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _findInterfaceMapping(cls: java.lang.Class<any>, key: com.fasterxml.jackson.databind.type.ClassKey): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.CollectionLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findReferenceSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.ReferenceType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, contentValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findArraySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.ArrayType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.CollectionType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.MapType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(sers: java.util.List<com.fasterxml.jackson.databind.JsonSerializer<any>>);
						public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public addSerializer(type: java.lang.Class<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public findSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public addSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public _addSerializer(cls: java.lang.Class<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module module {
					export class SimpleValueInstantiators extends com.fasterxml.jackson.databind.deser.ValueInstantiators.Base implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.module.SimpleValueInstantiators>;
						public _classMappings: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.deser.ValueInstantiator>;
						public addValueInstantiator(forType: java.lang.Class<any>, inst: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
						public constructor();
						public findValueInstantiator(config: com.fasterxml.jackson.databind.DeserializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, defaultInstantiator: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
						public findValueInstantiator(param0: com.fasterxml.jackson.databind.DeserializationConfig, param1: com.fasterxml.jackson.databind.BeanDescription, param2: com.fasterxml.jackson.databind.deser.ValueInstantiator): com.fasterxml.jackson.databind.deser.ValueInstantiator;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class ArrayNode extends com.fasterxml.jackson.databind.node.ContainerNode<com.fasterxml.jackson.databind.node.ArrayNode> implements java.io.Serializable  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ArrayNode>;
						public insert(index: number, value: java.lang.Boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public set(index: number, v: java.lang.Integer): com.fasterxml.jackson.databind.node.ArrayNode;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, o: com.fasterxml.jackson.databind.JsonNode): boolean;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public _add(node: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public _set(index: number, node: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public set(index: number, v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ArrayNode;
						public findValue(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public setNull(index: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public constructor(nf: com.fasterxml.jackson.databind.node.JsonNodeFactory, children: java.util.List<com.fasterxml.jackson.databind.JsonNode>);
						public set(index: number, v: java.lang.Boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public equals(o: any): boolean;
						public constructor(nf: com.fasterxml.jackson.databind.node.JsonNodeFactory, capacity: number);
						public size(): number;
						public insert(index: number, value: java.lang.Short): com.fasterxml.jackson.databind.node.ArrayNode;
						public constructor();
						public add(v: java.lang.Long): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(index: number, v: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public set(index: number, value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public insert(index: number, v: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public add(v: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public add(v: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public removeAll(): any;
						public insertNull(index: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(index: number, v: java.lang.Integer): com.fasterxml.jackson.databind.node.ArrayNode;
						public required(index: number): com.fasterxml.jackson.databind.JsonNode;
						public set(index: number, v: boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public set(index: number, v: java.lang.Short): com.fasterxml.jackson.databind.node.ArrayNode;
						public removeAll(): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public insert(index: number, v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ArrayNode;
						public add(v: boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(v: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public path(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public iterator(): java.util.Iterator<any>;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public addArray(): com.fasterxml.jackson.databind.node.ArrayNode;
						public constructor(nf: com.fasterxml.jackson.databind.node.JsonNodeFactory);
						public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public deepCopy(): com.fasterxml.jackson.databind.node.ArrayNode;
						public setRawValue(index: number, raw: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ArrayNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public set(index: number, v: number[]): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public add(v: java.lang.Boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public spliterator(): java.util.Spliterator<any>;
						public numberNode(v: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: number): com.fasterxml.jackson.databind.node.NumericNode;
						public isEmpty(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public remove(index: number): com.fasterxml.jackson.databind.JsonNode;
						public insertArray(index: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public pojoNode(pojo: any): com.fasterxml.jackson.databind.node.ValueNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public get(index: number): com.fasterxml.jackson.databind.JsonNode;
						public elements(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public add(v: number[]): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(index: number, v: java.lang.Double): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(v: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public equals(param0: any): boolean;
						public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
						public isEmpty(serializers: com.fasterxml.jackson.databind.SerializerProvider): boolean;
						public findParents(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public insert(index: number, v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ArrayNode;
						public set(index: number, v: java.lang.Long): com.fasterxml.jackson.databind.node.ArrayNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public insertObject(index: number): com.fasterxml.jackson.databind.node.ObjectNode;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public get(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public textNode(text: string): com.fasterxml.jackson.databind.node.TextNode;
						public set(index: number, v: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public set(index: number, v: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(v: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public findValues(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public add(v: java.lang.Float): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(index: number, v: boolean): com.fasterxml.jackson.databind.node.ArrayNode;
						public booleanNode(v: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(data: number[]): com.fasterxml.jackson.databind.node.BinaryNode;
						public setPOJO(index: number, pojo: any): com.fasterxml.jackson.databind.node.ArrayNode;
						public _at(ptr: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public required(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public findParents(fieldName: string, foundSoFar: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public forEach(action: any /* any*/): void;
						public add(value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public add(v: java.lang.Double): com.fasterxml.jackson.databind.node.ArrayNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public addPOJO(pojo: any): com.fasterxml.jackson.databind.node.ArrayNode;
						public add(v: java.lang.Short): com.fasterxml.jackson.databind.node.ArrayNode;
						public serialize(f: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public isArray(): boolean;
						public addRawValue(raw: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ArrayNode;
						public findValues(fieldName: string, foundSoFar: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public hashCode(): number;
						public binaryNode(param0: number[], param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public insert(index: number, v: number[]): com.fasterxml.jackson.databind.node.ArrayNode;
						public constructor(nc: com.fasterxml.jackson.databind.node.JsonNodeFactory);
						public add(v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ArrayNode;
						public path(index: number): com.fasterxml.jackson.databind.JsonNode;
						public binaryNode(param0: number[]): com.fasterxml.jackson.databind.node.ValueNode;
						public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public set(index: number, v: java.lang.Float): com.fasterxml.jackson.databind.node.ArrayNode;
						public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public set(index: number, v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ArrayNode;
						public _insert(index: number, node: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public binaryNode(data: number[], offset: number, length: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public add(v: java.lang.Integer): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(index: number, value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public insert(index: number, v: java.lang.Long): com.fasterxml.jackson.databind.node.ArrayNode;
						public findValuesAsText(fieldName: string, foundSoFar: java.util.List<string>): java.util.List<string>;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public addAll(other: com.fasterxml.jackson.databind.node.ArrayNode): com.fasterxml.jackson.databind.node.ArrayNode;
						public add(v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ArrayNode;
						public insert(index: number, v: java.lang.Float): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public numberNode(v: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public addAll(nodes: java.util.Collection<any>): com.fasterxml.jackson.databind.node.ArrayNode;
						public insertPOJO(index: number, pojo: any): com.fasterxml.jackson.databind.node.ArrayNode;
						public addObject(): com.fasterxml.jackson.databind.node.ObjectNode;
						public arrayNode(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public findValuesAsText(fieldName: string): java.util.List<string>;
						public findParent(fieldName: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public insertRawValue(index: number, raw: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ArrayNode;
						public rawValueNode(value: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public set(index: number, v: java.lang.Double): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public _childrenEqual(other: com.fasterxml.jackson.databind.node.ArrayNode): boolean;
						public arrayNode(capacity: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public addNull(): com.fasterxml.jackson.databind.node.ArrayNode;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export abstract class BaseJsonNode extends com.fasterxml.jackson.databind.JsonNode implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BaseJsonNode>;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public iterator(): java.util.Iterator<any>;
						public hashCode(): number;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findPath(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public toString(): string;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public traverse(): com.fasterxml.jackson.core.JsonParser;
						public spliterator(): java.util.Spliterator<any>;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public required(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public traverse(codec: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public required(index: number): com.fasterxml.jackson.databind.JsonNode;
						public findPath(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public forEach(action: any /* any*/): void;
						public required(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public toPrettyString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class BigIntegerNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BigIntegerNode>;
						public _value: java.math.BigInteger;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public asBoolean(defaultValue: boolean): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public isBigInteger(): boolean;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public equals(o: any): boolean;
						public asBoolean(): boolean;
						public longValue(): number;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public static valueOf(v: java.math.BigInteger): com.fasterxml.jackson.databind.node.BigIntegerNode;
						public constructor(v: java.math.BigInteger);
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class BinaryNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BinaryNode>;
						public _data: number[];
						public constructor();
						public static valueOf(data: number[], offset: number, length: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public iterator(): java.util.Iterator<any>;
						public serialize(jg: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(data: number[]);
						public asText(): string;
						public asText(defaultValue: string): string;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(data: number[], offset: number, length: number);
						public spliterator(): java.util.Spliterator<any>;
						public static valueOf(data: number[]): com.fasterxml.jackson.databind.node.BinaryNode;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public binaryValue(): number[];
						public equals(o: any): boolean;
						public forEach(action: any /* any*/): void;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class BooleanNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.BooleanNode>;
						public static TRUE: com.fasterxml.jackson.databind.node.BooleanNode;
						public static FALSE: com.fasterxml.jackson.databind.node.BooleanNode;
						public constructor(v: boolean);
						public iterator(): java.util.Iterator<any>;
						public static getTrue(): com.fasterxml.jackson.databind.node.BooleanNode;
						public asBoolean(defaultValue: boolean): boolean;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public asText(): string;
						public asText(defaultValue: string): string;
						public readResolve(): any;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public booleanValue(): boolean;
						public asDouble(defaultValue: number): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public static getFalse(): com.fasterxml.jackson.databind.node.BooleanNode;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public asInt(): number;
						public asInt(defaultValue: number): number;
						public equals(o: any): boolean;
						public asBoolean(): boolean;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public static valueOf(b: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public asLong(defaultValue: number): number;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public asDouble(): number;
						public asLong(): number;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export abstract class ContainerNode<T>  extends com.fasterxml.jackson.databind.node.BaseJsonNode implements com.fasterxml.jackson.databind.node.JsonNodeCreator  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ContainerNode<any>>;
						public _nodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory;
						public numberNode(v: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public numberNode(v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public size(): number;
						public get(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public textNode(text: string): com.fasterxml.jackson.databind.node.TextNode;
						public constructor();
						public numberNode(v: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public booleanNode(v: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(data: number[]): com.fasterxml.jackson.databind.node.BinaryNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public removeAll(): any;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public forEach(action: any /* any*/): void;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public iterator(): java.util.Iterator<any>;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public binaryNode(param0: number[], param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public asText(): string;
						public constructor(nc: com.fasterxml.jackson.databind.node.JsonNodeFactory);
						public asText(defaultValue: string): string;
						public binaryNode(param0: number[]): com.fasterxml.jackson.databind.node.ValueNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public spliterator(): java.util.Spliterator<any>;
						public numberNode(v: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: number): com.fasterxml.jackson.databind.node.NumericNode;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public binaryNode(data: number[], offset: number, length: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public missingNode(): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(v: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public pojoNode(pojo: any): com.fasterxml.jackson.databind.node.ValueNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public arrayNode(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public rawValueNode(value: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public arrayNode(capacity: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class DecimalNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.DecimalNode>;
						public static ZERO: com.fasterxml.jackson.databind.node.DecimalNode;
						public _value: java.math.BigDecimal;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public constructor(v: java.math.BigDecimal);
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public canConvertToExactIntegral(): boolean;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public isFloatingPointNumber(): boolean;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public isBigDecimal(): boolean;
						public equals(o: any): boolean;
						public longValue(): number;
						public serialize(jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public static valueOf(d: java.math.BigDecimal): com.fasterxml.jackson.databind.node.DecimalNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class DoubleNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.DoubleNode>;
						public _value: number;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public canConvertToExactIntegral(): boolean;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public constructor(v: number);
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public isFloatingPointNumber(): boolean;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public equals(o: any): boolean;
						public longValue(): number;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public static valueOf(v: number): com.fasterxml.jackson.databind.node.DoubleNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isNaN(): boolean;
						public forEach(action: any /* any*/): void;
						public isDouble(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class FloatNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.FloatNode>;
						public _value: number;
						public isFloat(): boolean;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public canConvertToExactIntegral(): boolean;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public constructor(v: number);
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public isFloatingPointNumber(): boolean;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public static valueOf(v: number): com.fasterxml.jackson.databind.node.FloatNode;
						public shortValue(): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public equals(o: any): boolean;
						public longValue(): number;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isNaN(): boolean;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class IntNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.IntNode>;
						public _value: number;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public asBoolean(defaultValue: boolean): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public constructor(v: number);
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public isInt(): boolean;
						public equals(o: any): boolean;
						public asBoolean(): boolean;
						public longValue(): number;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public static valueOf(i: number): com.fasterxml.jackson.databind.node.IntNode;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class InternalNodeMapper extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.InternalNodeMapper>;
						public static valueToBytes(value: any): number[];
						public static nodeToPrettyString(n: com.fasterxml.jackson.databind.JsonNode): string;
						public static nodeToString(n: com.fasterxml.jackson.databind.JsonNode): string;
						public static bytesToNode(json: number[]): com.fasterxml.jackson.databind.JsonNode;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class JsonNodeCreator extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.JsonNodeCreator>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.node.JsonNodeCreator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
							nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
							numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
							textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
							binaryNode(param0: number[]): com.fasterxml.jackson.databind.node.ValueNode;
							binaryNode(param0: number[], param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
							pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
							rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
							arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
							arrayNode(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
							objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						});
						public constructor();
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public binaryNode(param0: number[], param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(param0: number[]): com.fasterxml.jackson.databind.node.ValueNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public arrayNode(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class JsonNodeFactory extends java.lang.Object implements java.io.Serializable, com.fasterxml.jackson.databind.node.JsonNodeCreator {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.JsonNodeFactory>;
						public static instance: com.fasterxml.jackson.databind.node.JsonNodeFactory;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(value: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public static withExactBigDecimals(bigDecimalExact: boolean): com.fasterxml.jackson.databind.node.JsonNodeFactory;
						public numberNode(value: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(param0: number[], param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public numberNode(v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(param0: number[]): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: number): com.fasterxml.jackson.databind.node.NumericNode;
						public binaryNode(data: number[], offset: number, length: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public missingNode(): com.fasterxml.jackson.databind.JsonNode;
						public textNode(text: string): com.fasterxml.jackson.databind.node.TextNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public constructor();
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(value: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public pojoNode(pojo: any): com.fasterxml.jackson.databind.node.ValueNode;
						public constructor(bigDecimalExact: boolean);
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public booleanNode(v: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public numberNode(v: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(data: number[]): com.fasterxml.jackson.databind.node.BinaryNode;
						public _inIntRange(l: number): boolean;
						public arrayNode(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public rawValueNode(value: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(value: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public arrayNode(capacity: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(value: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class JsonNodeType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.JsonNodeType>;
						public static ARRAY: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static BINARY: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static BOOLEAN: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static MISSING: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static NULL: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static NUMBER: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static OBJECT: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static POJO: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static STRING: com.fasterxml.jackson.databind.node.JsonNodeType;
						public static valueOf(name: string): com.fasterxml.jackson.databind.node.JsonNodeType;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): com.fasterxml.jackson.databind.node.JsonNodeType[];
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class LongNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.LongNode>;
						public _value: number;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public asBoolean(defaultValue: boolean): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public constructor(v: number);
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public equals(o: any): boolean;
						public asBoolean(): boolean;
						public longValue(): number;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public isLong(): boolean;
						public static valueOf(l: number): com.fasterxml.jackson.databind.node.LongNode;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class MissingNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.MissingNode>;
						public iterator(): java.util.Iterator<any>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public asText(): string;
						public asText(defaultValue: string): string;
						public readResolve(): any;
						public require(): com.fasterxml.jackson.databind.JsonNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public requireNonNull(): com.fasterxml.jackson.databind.JsonNode;
						public equals(o: any): boolean;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public toPrettyString(): string;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public toString(): string;
						public isMissingNode(): boolean;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public static getInstance(): com.fasterxml.jackson.databind.node.MissingNode;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export abstract class NodeCursor {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor>;
						public _parent: com.fasterxml.jackson.databind.node.NodeCursor;
						public _currentName: string;
						public _currentValue: any;
						public getParent(): com.fasterxml.jackson.databind.node.NodeCursor;
						public getCurrentValue(): any;
						public constructor(contextType: number, p: com.fasterxml.jackson.databind.node.NodeCursor);
						public currentNode(): com.fasterxml.jackson.databind.JsonNode;
						public startArray(): com.fasterxml.jackson.databind.node.NodeCursor;
						public iterateChildren(): com.fasterxml.jackson.databind.node.NodeCursor;
						public overrideCurrentName(name: string): void;
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public getCurrentName(): string;
						public startObject(): com.fasterxml.jackson.databind.node.NodeCursor;
						public setCurrentValue(v: any): void;
					}
					export module NodeCursor {
						export class ArrayCursor extends com.fasterxml.jackson.databind.node.NodeCursor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor.ArrayCursor>;
							public _contents: java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
							public _currentElement: com.fasterxml.jackson.databind.JsonNode;
							public constructor(contextType: number, p: com.fasterxml.jackson.databind.node.NodeCursor);
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public startObject(): com.fasterxml.jackson.databind.node.NodeCursor;
							public currentNode(): com.fasterxml.jackson.databind.JsonNode;
							public startArray(): com.fasterxml.jackson.databind.node.NodeCursor;
							public constructor(n: com.fasterxml.jackson.databind.JsonNode, p: com.fasterxml.jackson.databind.node.NodeCursor);
						}
						export class ObjectCursor extends com.fasterxml.jackson.databind.node.NodeCursor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor.ObjectCursor>;
							public _contents: java.util.Iterator<java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>>;
							public _current: java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>;
							public _needEntry: boolean;
							public constructor(contextType: number, p: com.fasterxml.jackson.databind.node.NodeCursor);
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public startObject(): com.fasterxml.jackson.databind.node.NodeCursor;
							public currentNode(): com.fasterxml.jackson.databind.JsonNode;
							public startArray(): com.fasterxml.jackson.databind.node.NodeCursor;
							public constructor(n: com.fasterxml.jackson.databind.JsonNode, p: com.fasterxml.jackson.databind.node.NodeCursor);
						}
						export class RootCursor extends com.fasterxml.jackson.databind.node.NodeCursor {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeCursor.RootCursor>;
							public _node: com.fasterxml.jackson.databind.JsonNode;
							public _done: boolean;
							public constructor(contextType: number, p: com.fasterxml.jackson.databind.node.NodeCursor);
							public overrideCurrentName(name: string): void;
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public startObject(): com.fasterxml.jackson.databind.node.NodeCursor;
							public currentNode(): com.fasterxml.jackson.databind.JsonNode;
							public startArray(): com.fasterxml.jackson.databind.node.NodeCursor;
							public constructor(n: com.fasterxml.jackson.databind.JsonNode, p: com.fasterxml.jackson.databind.node.NodeCursor);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class NodeSerialization extends java.lang.Object implements java.io.Serializable, java.io.Externalizable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NodeSerialization>;
						public static LONGEST_EAGER_ALLOC: number;
						public json: number[];
						public constructor();
						public constructor(b: number[]);
						public writeExternal(out: java.io.ObjectOutput): void;
						public readExternal(param0: java.io.ObjectInput): void;
						public writeExternal(param0: java.io.ObjectOutput): void;
						public readExternal(_in_: java.io.ObjectInput): void;
						public static from(o: any): com.fasterxml.jackson.databind.node.NodeSerialization;
						public readResolve(): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class NullNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NullNode>;
						public static instance: com.fasterxml.jackson.databind.node.NullNode;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public iterator(): java.util.Iterator<any>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public asText(): string;
						public asText(defaultValue: string): string;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public readResolve(): any;
						public static getInstance(): com.fasterxml.jackson.databind.node.NullNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public requireNonNull(): com.fasterxml.jackson.databind.JsonNode;
						public equals(o: any): boolean;
						public forEach(action: any /* any*/): void;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export abstract class NumericNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.NumericNode>;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public asDouble(defaultValue: number): number;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public asInt(): number;
						public asInt(defaultValue: number): number;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public longValue(): number;
						public constructor();
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public asLong(defaultValue: number): number;
						public isNaN(): boolean;
						public asDouble(): number;
						public asLong(): number;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class ObjectNode extends com.fasterxml.jackson.databind.node.ContainerNode<com.fasterxml.jackson.databind.node.ObjectNode> implements java.io.Serializable  {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ObjectNode>;
						public _children: java.util.Map<string,com.fasterxml.jackson.databind.JsonNode>;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, o: com.fasterxml.jackson.databind.JsonNode): boolean;
						public put(fieldName: string, v: java.lang.Integer): com.fasterxml.jackson.databind.node.ObjectNode;
						/** @deprecated */
						public put(propertyName: string, value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public without(propertyNames: java.util.Collection<any>): com.fasterxml.jackson.databind.JsonNode;
						public nullNode(): com.fasterxml.jackson.databind.node.NullNode;
						public numberNode(v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public without(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public equals(o: any): boolean;
						public size(): number;
						public _childrenEqual(other: com.fasterxml.jackson.databind.node.ObjectNode): boolean;
						public fields(): java.util.Iterator<java.util.Map.Entry<string,com.fasterxml.jackson.databind.JsonNode>>;
						public constructor();
						public withArray(propertyName: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public findParent(propertyName: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public get(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public with(propertyName: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public put(fieldName: string, v: java.lang.Boolean): com.fasterxml.jackson.databind.node.ObjectNode;
						public put(propertyName: string, v: number): com.fasterxml.jackson.databind.node.ObjectNode;
						public putPOJO(propertyName: string, pojo: any): com.fasterxml.jackson.databind.node.ObjectNode;
						public removeAll(): any;
						public required(index: number): com.fasterxml.jackson.databind.JsonNode;
						public setAll(other: com.fasterxml.jackson.databind.node.ObjectNode): com.fasterxml.jackson.databind.JsonNode;
						public required(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(param0: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(param0: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ValueNode;
						public iterator(): java.util.Iterator<any>;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public put(fieldName: string, v: number[]): com.fasterxml.jackson.databind.node.ObjectNode;
						public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public findParents(propertyName: string, foundSoFar: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public putRawValue(propertyName: string, raw: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ObjectNode;
						public putNull(propertyName: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public numberNode(param0: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public spliterator(): java.util.Spliterator<any>;
						public numberNode(v: java.lang.Integer): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: number): com.fasterxml.jackson.databind.node.NumericNode;
						public isEmpty(): boolean;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public remove(propertyNames: java.util.Collection<string>): com.fasterxml.jackson.databind.node.ObjectNode;
						public with(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public pojoNode(pojo: any): com.fasterxml.jackson.databind.node.ValueNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public numberNode(param0: number): com.fasterxml.jackson.databind.node.ValueNode;
						public withArray(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public get(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public findValuesAsText(propertyName: string, foundSoFar: java.util.List<string>): java.util.List<string>;
						public numberNode(param0: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public retain(propertyNames: java.util.Collection<string>): com.fasterxml.jackson.databind.node.ObjectNode;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public get(index: number): com.fasterxml.jackson.databind.JsonNode;
						public isObject(): boolean;
						public removeAll(): com.fasterxml.jackson.databind.node.ObjectNode;
						public deepCopy(): com.fasterxml.jackson.databind.node.ObjectNode;
						public elements(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public put(fieldName: string, v: java.lang.Long): com.fasterxml.jackson.databind.node.ObjectNode;
						public put(fieldName: string, v: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(v: java.lang.Double): com.fasterxml.jackson.databind.node.ValueNode;
						public equals(param0: any): boolean;
						public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
						public isEmpty(serializers: com.fasterxml.jackson.databind.SerializerProvider): boolean;
						public path(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public findParents(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public putArray(propertyName: string): com.fasterxml.jackson.databind.node.ArrayNode;
						public pojoNode(param0: any): com.fasterxml.jackson.databind.node.ValueNode;
						public put(fieldName: string, v: boolean): com.fasterxml.jackson.databind.node.ObjectNode;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public textNode(text: string): com.fasterxml.jackson.databind.node.TextNode;
						public put(fieldName: string, v: java.lang.Float): com.fasterxml.jackson.databind.node.ObjectNode;
						public numberNode(v: java.lang.Float): com.fasterxml.jackson.databind.node.ValueNode;
						public findValues(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public retain(...propertyNames: string[]): com.fasterxml.jackson.databind.node.ObjectNode;
						public booleanNode(v: boolean): com.fasterxml.jackson.databind.node.BooleanNode;
						public nullNode(): com.fasterxml.jackson.databind.node.ValueNode;
						public binaryNode(data: number[]): com.fasterxml.jackson.databind.node.BinaryNode;
						public _at(ptr: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public rawValueNode(param0: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public remove(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public numberNode(v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public required(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public replace(propertyName: string, value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public textNode(param0: string): com.fasterxml.jackson.databind.node.ValueNode;
						public forEach(action: any /* any*/): void;
						public put(fieldName: string, v: java.math.BigInteger): com.fasterxml.jackson.databind.node.ObjectNode;
						/** @deprecated */
						public putAll(other: com.fasterxml.jackson.databind.node.ObjectNode): com.fasterxml.jackson.databind.JsonNode;
						public objectNode(): com.fasterxml.jackson.databind.node.ObjectNode;
						public set(propertyName: string, value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public put(fieldName: string, v: java.lang.Double): com.fasterxml.jackson.databind.node.ObjectNode;
						public setAll(properties: java.util.Map<any,any>): com.fasterxml.jackson.databind.JsonNode;
						public hashCode(): number;
						public binaryNode(param0: number[], param1: number, param2: number): com.fasterxml.jackson.databind.node.ValueNode;
						public constructor(nc: com.fasterxml.jackson.databind.node.JsonNodeFactory);
						public path(index: number): com.fasterxml.jackson.databind.JsonNode;
						public put(fieldName: string, v: number): com.fasterxml.jackson.databind.node.ObjectNode;
						public binaryNode(param0: number[]): com.fasterxml.jackson.databind.node.ValueNode;
						public putIfAbsent(propertyName: string, value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.JsonNode;
						public _put(fieldName: string, value: com.fasterxml.jackson.databind.JsonNode): com.fasterxml.jackson.databind.node.ObjectNode;
						public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public put(fieldName: string, v: java.math.BigDecimal): com.fasterxml.jackson.databind.node.ObjectNode;
						public constructor(nc: com.fasterxml.jackson.databind.node.JsonNodeFactory, kids: java.util.Map<string,com.fasterxml.jackson.databind.JsonNode>);
						public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public findValue(propertyName: string): com.fasterxml.jackson.databind.JsonNode;
						public binaryNode(data: number[], offset: number, length: number): com.fasterxml.jackson.databind.node.BinaryNode;
						public numberNode(param0: java.lang.Short): com.fasterxml.jackson.databind.node.ValueNode;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public booleanNode(param0: boolean): com.fasterxml.jackson.databind.node.ValueNode;
						public numberNode(v: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public arrayNode(): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Byte): com.fasterxml.jackson.databind.node.ValueNode;
						public putObject(propertyName: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public numberNode(v: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
						public arrayNode(param0: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public findValues(propertyName: string, foundSoFar: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public findValuesAsText(fieldName: string): java.util.List<string>;
						public rawValueNode(value: com.fasterxml.jackson.databind.util.RawValue): com.fasterxml.jackson.databind.node.ValueNode;
						public put(fieldName: string, v: java.lang.Short): com.fasterxml.jackson.databind.node.ObjectNode;
						public fieldNames(): java.util.Iterator<string>;
						public numberNode(param0: java.math.BigInteger): com.fasterxml.jackson.databind.node.ValueNode;
						/** @deprecated */
						public putAll(properties: java.util.Map<string,any>): com.fasterxml.jackson.databind.JsonNode;
						public arrayNode(capacity: number): com.fasterxml.jackson.databind.node.ArrayNode;
						public numberNode(param0: java.lang.Long): com.fasterxml.jackson.databind.node.ValueNode;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class POJONode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.POJONode>;
						public _value: any;
						public iterator(): java.util.Iterator<any>;
						public asBoolean(defaultValue: boolean): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public asText(defaultValue: string): string;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public _pojoEquals(other: com.fasterxml.jackson.databind.node.POJONode): boolean;
						public asDouble(defaultValue: number): number;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public binaryValue(): number[];
						public asInt(): number;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
						public asInt(defaultValue: number): number;
						public equals(o: any): boolean;
						public asBoolean(): boolean;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public getPojo(): any;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public constructor(v: any);
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public asLong(defaultValue: number): number;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public asDouble(): number;
						public asLong(): number;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class ShortNode extends com.fasterxml.jackson.databind.node.NumericNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ShortNode>;
						public _value: number;
						public decimalValue(): java.math.BigDecimal;
						public iterator(): java.util.Iterator<any>;
						public asBoolean(defaultValue: boolean): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public numberValue(): java.lang.Number;
						public bigIntegerValue(): java.math.BigInteger;
						public constructor(v: number);
						public asText(defaultValue: string): string;
						public intValue(): number;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public canConvertToInt(): boolean;
						public canConvertToLong(): boolean;
						public shortValue(): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public doubleValue(): number;
						public equals(o: any): boolean;
						public isShort(): boolean;
						public asBoolean(): boolean;
						public longValue(): number;
						public floatValue(): number;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public numberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public isIntegralNumber(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public static valueOf(l: number): com.fasterxml.jackson.databind.node.ShortNode;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class TextNode extends com.fasterxml.jackson.databind.node.ValueNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.TextNode>;
						public _value: string;
						public iterator(): java.util.Iterator<any>;
						public asBoolean(defaultValue: boolean): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public asText(): string;
						public asText(defaultValue: string): string;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public getBinaryValue(b64variant: com.fasterxml.jackson.core.Base64Variant): number[];
						public asDouble(defaultValue: number): number;
						public serialize(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public spliterator(): java.util.Spliterator<any>;
						public textValue(): string;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(v: string);
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public binaryValue(): number[];
						public asInt(): number;
						public asInt(defaultValue: number): number;
						public equals(o: any): boolean;
						public asBoolean(): boolean;
						public getNodeType(): com.fasterxml.jackson.databind.node.JsonNodeType;
						public constructor();
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public static valueOf(v: string): com.fasterxml.jackson.databind.node.TextNode;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						/** @deprecated */
						public static appendQuoted(sb: java.lang.StringBuilder, content: string): void;
						public asLong(defaultValue: number): number;
						public equals(comparator: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>, other: com.fasterxml.jackson.databind.JsonNode): boolean;
						public asDouble(): number;
						public asLong(): number;
						public forEach(action: any /* any*/): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export class TreeTraversingParser {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.TreeTraversingParser>;
						public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
						public _nodeCursor: com.fasterxml.jackson.databind.node.NodeCursor;
						public _closed: boolean;
						public constructor(n: com.fasterxml.jackson.databind.JsonNode, codec: com.fasterxml.jackson.core.ObjectCodec);
						public getBigIntegerValue(): java.math.BigInteger;
						public getNumberValue(): java.lang.Number;
						public currentNumericNode(): com.fasterxml.jackson.databind.JsonNode;
						public close(): void;
						public getTextLength(): number;
						public getText(): string;
						public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getTextOffset(): number;
						public getDoubleValue(): number;
						public isClosed(): boolean;
						public currentNode(): com.fasterxml.jackson.databind.JsonNode;
						public getBinaryValue(b64variant: com.fasterxml.jackson.core.Base64Variant): number[];
						public _handleEOF(): void;
						public getTextCharacters(): string[];
						public getCurrentName(): string;
						public setCodec(c: com.fasterxml.jackson.core.ObjectCodec): void;
						public getEmbeddedObject(): any;
						public constructor(n: com.fasterxml.jackson.databind.JsonNode);
						public getReadCapabilities(): com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>;
						public nextToken(): com.fasterxml.jackson.core.JsonToken;
						public overrideCurrentName(name: string): void;
						public version(): com.fasterxml.jackson.core.Version;
						public hasTextCharacters(): boolean;
						public getFloatValue(): number;
						public getIntValue(): number;
						public readBinaryValue(b64variant: com.fasterxml.jackson.core.Base64Variant, out: java.io.OutputStream): number;
						public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
						public getLongValue(): number;
						public isNaN(): boolean;
						public skipChildren(): com.fasterxml.jackson.core.JsonParser;
						public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
						public getDecimalValue(): java.math.BigDecimal;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module node {
					export abstract class ValueNode extends com.fasterxml.jackson.databind.node.BaseJsonNode {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.node.ValueNode>;
						public path(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public iterator(): java.util.Iterator<any>;
						public get(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public findValues(fieldName: string, foundSoFar: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public _at(param0: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public findValuesAsText(param0: string, param1: java.util.List<string>): java.util.List<string>;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public path(index: number): com.fasterxml.jackson.databind.JsonNode;
						public isEmpty(serializers: com.fasterxml.jackson.databind.SerializerProvider): boolean;
						public findParent(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public findParents(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public spliterator(): java.util.Spliterator<any>;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public findParents(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public iterator(): java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>;
						public isEmpty(): boolean;
						public findValue(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public path(param0: number): com.fasterxml.jackson.databind.JsonNode;
						public get(fieldName: string): com.fasterxml.jackson.databind.JsonNode;
						public path(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public constructor();
						public findValuesAsText(fieldName: string, foundSoFar: java.util.List<string>): java.util.List<string>;
						public asToken(): com.fasterxml.jackson.core.JsonToken;
						public findValues(fieldName: string): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public hasNonNull(fieldName: string): boolean;
						public hasNonNull(index: number): boolean;
						public findValues(param0: string, param1: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public findParent(fieldName: string): com.fasterxml.jackson.databind.node.ObjectNode;
						public findValuesAsText(fieldName: string): java.util.List<string>;
						public _at(ptr: com.fasterxml.jackson.core.JsonPointer): com.fasterxml.jackson.databind.JsonNode;
						public deepCopy(): com.fasterxml.jackson.databind.JsonNode;
						public get(index: number): com.fasterxml.jackson.databind.JsonNode;
						public findValue(param0: string): com.fasterxml.jackson.databind.JsonNode;
						public has(index: number): boolean;
						public findParents(fieldName: string, foundSoFar: java.util.List<com.fasterxml.jackson.databind.JsonNode>): java.util.List<com.fasterxml.jackson.databind.JsonNode>;
						public forEach(action: any /* any*/): void;
						public has(fieldName: string): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class AnyGetterWriter extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.AnyGetterWriter>;
						public _property: com.fasterxml.jackson.databind.BeanProperty;
						public _accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _mapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer;
						public getAndFilter(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, filter: com.fasterxml.jackson.databind.ser.PropertyFilter): void;
						public getAndSerialize(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public fixAccess(config: com.fasterxml.jackson.databind.SerializationConfig): void;
						public resolve(provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(property: com.fasterxml.jackson.databind.BeanProperty, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class BasicSerializerFactory extends com.fasterxml.jackson.databind.ser.SerializerFactory implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BasicSerializerFactory>;
						public static _concrete: java.util.HashMap<string,com.fasterxml.jackson.databind.JsonSerializer<any>>;
						public static _concreteLazy: java.util.HashMap<string,java.lang.Class<any>>;
						public _factoryConfig: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public withAdditionalKeySerializers(additional: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public findSerializerByAddonType(config: com.fasterxml.jackson.databind.SerializationConfig, javaType: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public withAdditionalSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public findConverter(prov: com.fasterxml.jackson.databind.SerializerProvider, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.util.Converter<any,any>;
						public buildIndexedListSerializer(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public usesStaticTyping(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): boolean;
						public buildIteratorSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean, valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildArraySerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.type.ArrayType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withSerializerModifier(modifier: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public findConvertingSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, a: com.fasterxml.jackson.databind.introspect.Annotated, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildAtomicReferenceSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, refType: com.fasterxml.jackson.databind.type.ReferenceType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean, contentTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, contentSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public createKeySerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, defaultImpl: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public isIndexedList(cls: java.lang.Class<any>): boolean;
						public findReferenceSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, refType: com.fasterxml.jackson.databind.type.ReferenceType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildIterableSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean, valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializerByAnnotations(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(config: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig);
						public constructor();
						public buildCollectionSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.type.CollectionType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildCollectionSerializer(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public createTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public findSerializerByLookup(type: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializerByPrimaryType(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildEnumSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public createKeySerializer(ctxt: com.fasterxml.jackson.databind.SerializerProvider, keyType: com.fasterxml.jackson.databind.JavaType, defaultImpl: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public customSerializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
						public buildContainerSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _findKeySerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializerFromAnnotation(prov: com.fasterxml.jackson.databind.SerializerProvider, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildMapSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.type.MapType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findOptionalStdSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public buildMapEntrySerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean, keyType: com.fasterxml.jackson.databind.JavaType, valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _findContentSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, a: com.fasterxml.jackson.databind.introspect.Annotated): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _findInclusionWithContent(prov: com.fasterxml.jackson.databind.SerializerProvider, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentType: com.fasterxml.jackson.databind.JavaType, configType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public withAdditionalKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public _checkMapContentInclusion(prov: com.fasterxml.jackson.databind.SerializerProvider, beanDesc: com.fasterxml.jackson.databind.BeanDescription, mapSer: com.fasterxml.jackson.databind.ser.std.MapSerializer): com.fasterxml.jackson.databind.ser.std.MapSerializer;
						/** @deprecated */
						public createKeySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, keyType: com.fasterxml.jackson.databind.JavaType, defaultImpl: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public createTypeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, baseType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public getFactoryConfig(): com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
						public createSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withAdditionalSerializers(additional: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public buildEnumSetSerializer(enumType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findFilterId(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): any;
						/** @deprecated */
						public createKeySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig): com.fasterxml.jackson.databind.ser.SerializerFactory;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class BeanPropertyFilter extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanPropertyFilter>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.BeanPropertyFilter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
						/** @deprecated */
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class BeanPropertyWriter extends com.fasterxml.jackson.databind.ser.PropertyWriter implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public static MARKER_FOR_EMPTY: any;
						public _name: com.fasterxml.jackson.core.io.SerializedString;
						public _wrapperName: com.fasterxml.jackson.databind.PropertyName;
						public _declaredType: com.fasterxml.jackson.databind.JavaType;
						public _cfgSerializationType: com.fasterxml.jackson.databind.JavaType;
						public _nonTrivialBaseType: com.fasterxml.jackson.databind.JavaType;
						public _contextAnnotations: com.fasterxml.jackson.databind.util.Annotations;
						public _member: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _accessorMethod: java.lang.reflect.Method;
						public _field: java.lang.reflect.Field;
						public _serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _nullSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
						public _suppressNulls: boolean;
						public _suppressableValue: any;
						public _includeInViews: java.lang.Class<any>[];
						public _internalSettings: java.util.HashMap<any,any>;
						public get(bean: any): any;
						public isRequired(): boolean;
						public willSuppressNulls(): boolean;
						/** @deprecated */
						public getGenericPropertyType(): java.lang.reflect.Type;
						public assignTypeSerializer(typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public getTypeSerializer(): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						/** @deprecated */
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any);
						public getSerializedName(): com.fasterxml.jackson.core.SerializableString;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public assignSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
						public _handleSelfReference(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
						public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
						public rename(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getSerializationType(): com.fasterxml.jackson.databind.JavaType;
						public getInternalSetting(key: any): any;
						public serializeAsElement(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
						/** @deprecated */
						public getPropertyType(): java.lang.Class<any>;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						/** @deprecated */
						public depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor();
						/** @deprecated */
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public isUnwrapping(): boolean;
						public wouldConflictWithName(name: com.fasterxml.jackson.databind.PropertyName): boolean;
						/** @deprecated */
						public getRawSerializationType(): java.lang.Class<any>;
						public toString(): string;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public assignNullSerializer(nullSer: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.core.io.SerializedString);
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public serializeAsOmittedField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any, includeInViews: java.lang.Class<any>[]);
						public _new(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public serializeAsPlaceholder(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getViews(): java.lang.Class<any>[];
						public getSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public hasSerializer(): boolean;
						public removeInternalSetting(key: any): any;
						public setInternalSetting(key: any, value: any): any;
						public fixAccess(config: com.fasterxml.jackson.databind.SerializationConfig): void;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public _depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, schemaNode: com.fasterxml.jackson.databind.JsonNode): void;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public hasNullSerializer(): boolean;
						public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
						public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public serializeAsField(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeAsPlaceholder(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
						public depositSchemaProperty(v: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
						public unwrappingWriter(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public serializeAsOmittedField(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public setNonTrivialBaseType(t: com.fasterxml.jackson.databind.JavaType): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class BeanSerializer extends com.fasterxml.jackson.databind.ser.std.BeanSerializerBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializer>;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
						public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						/** @deprecated */
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: string[]);
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
						/** @deprecated */
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>);
						/** @deprecated */
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public withFilterId(filterId: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withProperties(properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public unwrappingSerializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public constructor(type: com.fasterxml.jackson.databind.JavaType);
						public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static createDummy(forType: com.fasterxml.jackson.databind.JavaType, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder): com.fasterxml.jackson.databind.ser.BeanSerializer;
						public constructor(type: com.fasterxml.jackson.databind.JavaType, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
						public constructor();
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, filterId: any);
						public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public resolve(provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
						public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public withProperties(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], param1: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
						public toString(): string;
						/** @deprecated */
						public static createDummy(forType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.BeanSerializer;
						public withObjectIdWriter(objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public withByNameInclusion(toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public constructor(t: java.lang.Class<any>, dummy: boolean);
						public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>);
						public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public withFilterId(filterId: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public constructor(t: java.lang.Class<any>);
						public serialize(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class BeanSerializerBuilder extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder>;
						public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
						public _config: com.fasterxml.jackson.databind.SerializationConfig;
						public _properties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public _filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[];
						public _anyGetter: com.fasterxml.jackson.databind.ser.AnyGetterWriter;
						public _filterId: any;
						public _typeId: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						public getClassInfo(): com.fasterxml.jackson.databind.introspect.AnnotatedClass;
						public getAnyGetter(): com.fasterxml.jackson.databind.ser.AnyGetterWriter;
						public setObjectIdWriter(w: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): void;
						public setTypeId(idProp: com.fasterxml.jackson.databind.introspect.AnnotatedMember): void;
						public createDummy(): com.fasterxml.jackson.databind.ser.BeanSerializer;
						public build(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(src: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder);
						public constructor(beanDesc: com.fasterxml.jackson.databind.BeanDescription);
						public getTypeId(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public getProperties(): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public setConfig(config: com.fasterxml.jackson.databind.SerializationConfig): void;
						public getBeanDescription(): com.fasterxml.jackson.databind.BeanDescription;
						public setAnyGetter(anyGetter: com.fasterxml.jackson.databind.ser.AnyGetterWriter): void;
						public setProperties(properties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): void;
						public getFilteredProperties(): com.fasterxml.jackson.databind.ser.BeanPropertyWriter[];
						public setFilterId(filterId: any): void;
						public getObjectIdWriter(): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						public getFilterId(): any;
						public setFilteredProperties(properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): void;
						public hasProperties(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class BeanSerializerFactory extends com.fasterxml.jackson.databind.ser.BasicSerializerFactory implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializerFactory>;
						public static instance: com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
						public withConfig(config: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public findPropertyContentTypeSerializer(containerType: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.SerializationConfig, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public constructObjectIdHandler(prov: com.fasterxml.jackson.databind.SerializerProvider, beanDesc: com.fasterxml.jackson.databind.BeanDescription, props: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						public removeIgnorableTypes(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>): void;
						public removeOverlappingTypeIds(prov: com.fasterxml.jackson.databind.SerializerProvider, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, props: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public constructFilteredBeanWriter(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, inViews: java.lang.Class<any>[]): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public _constructWriter(prov: com.fasterxml.jackson.databind.SerializerProvider, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, pb: com.fasterxml.jackson.databind.ser.PropertyBuilder, staticTyping: boolean, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						public createSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, origType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public removeSetterlessGetters(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, properties: java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>): void;
						/** @deprecated */
						public constructBeanSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructBeanOrAddOnSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructBeanSerializerBuilder(beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
						public constructor(config: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig);
						public constructor();
						public _findUnsupportedTypeSerializer(ctxt: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _createSerializer2(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						/** @deprecated */
						public findBeanSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public _isUnserializableJacksonType(ctxt: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType): boolean;
						public findBeanProperties(prov: com.fasterxml.jackson.databind.SerializerProvider, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public findBeanOrAddOnSerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, staticTyping: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public customSerializers(): java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>;
						public filterUnwantedJDKProperties(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, props: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public constructPropertyBuilder(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.ser.PropertyBuilder;
						public isPotentialBeanType(type: java.lang.Class<any>): boolean;
						public processViews(config: com.fasterxml.jackson.databind.SerializationConfig, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder): void;
						public createSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public filterBeanProperties(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, props: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public findPropertyTypeSerializer(baseType: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.SerializationConfig, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig): com.fasterxml.jackson.databind.ser.SerializerFactory;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class BeanSerializerModifier extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.BeanSerializerModifier>;
						public orderProperties(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, beanProperties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public modifyCollectionSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, valueType: com.fasterxml.jackson.databind.type.CollectionType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor();
						public modifyEnumSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, valueType: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifyCollectionLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, valueType: com.fasterxml.jackson.databind.type.CollectionLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public updateBuilder(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder): com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
						public modifyArraySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, valueType: com.fasterxml.jackson.databind.type.ArrayType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifyKeySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, valueType: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public changeProperties(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, beanProperties: java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>): java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter>;
						public modifyMapSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, valueType: com.fasterxml.jackson.databind.type.MapType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public modifyMapLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, valueType: com.fasterxml.jackson.databind.type.MapLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class ContainerSerializer<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.ContainerSerializer<any>>;
						public constructor();
						public hasSingleElement(param0: any): boolean;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
						public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
						public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
						public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public constructor(t: java.lang.Class<any>, dummy: boolean);
						public withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
						public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
						public constructor(type: com.fasterxml.jackson.databind.JavaType);
						/** @deprecated */
						public hasContentTypeAnnotation(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): boolean;
						public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
						public constructor(t: java.lang.Class<any>);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class ContextualSerializer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.ContextualSerializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.ContextualSerializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
						});
						public constructor();
						public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class DefaultSerializerProvider extends com.fasterxml.jackson.databind.SerializerProvider implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider>;
						public _seenObjectIds: java.util.Map<any,com.fasterxml.jackson.databind.ser.impl.WritableObjectId>;
						public _objectIdGenerators: java.util.ArrayList<com.fasterxml.jackson.annotation.ObjectIdGenerator<any>>;
						public _generator: com.fasterxml.jackson.core.JsonGenerator;
						public findObjectId(forPojo: any, generatorType: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
						public includeFilterInstance(forProperty: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, filterClass: java.lang.Class<any>): any;
						public constructor(src: com.fasterxml.jackson.databind.SerializerProvider, config: com.fasterxml.jackson.databind.SerializationConfig, f: com.fasterxml.jackson.databind.ser.SerializerFactory);
						public includeFilterInstance(param0: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param1: java.lang.Class<any>): any;
						public cachedSerializersCount(): number;
						public constructor(src: com.fasterxml.jackson.databind.SerializerProvider);
						public constructor(src: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider);
						public serializeValue(gen: com.fasterxml.jackson.core.JsonGenerator, value: any, rootType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public copy(): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
						public includeFilterSuppressNulls(param0: any): boolean;
						public flushCachedSerializers(): void;
						public getGenerator(): com.fasterxml.jackson.core.JsonGenerator;
						public _createObjectIdMap(): java.util.Map<any,com.fasterxml.jackson.databind.ser.impl.WritableObjectId>;
						public constructor();
						public serializePolymorphic(gen: com.fasterxml.jackson.core.JsonGenerator, value: any, rootType: com.fasterxml.jackson.databind.JavaType, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public serializerInstance(param0: com.fasterxml.jackson.databind.introspect.Annotated, param1: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public createInstance(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
						public serializeValue(gen: com.fasterxml.jackson.core.JsonGenerator, value: any, rootType: com.fasterxml.jackson.databind.JavaType): void;
						public serializerInstance(annotated: com.fasterxml.jackson.databind.introspect.Annotated, serDef: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public includeFilterSuppressNulls(filter: any): boolean;
						/** @deprecated */
						public generateJsonSchema(type: java.lang.Class<any>): com.fasterxml.jackson.databind.jsonschema.JsonSchema;
						public findObjectId(param0: any, param1: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
						public acceptJsonFormatVisitor(javaType: com.fasterxml.jackson.databind.JavaType, visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper): void;
						public hasSerializerFor(cls: java.lang.Class<any>, cause: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>): boolean;
						public serializeValue(gen: com.fasterxml.jackson.core.JsonGenerator, value: any): void;
						public _serializeNull(gen: com.fasterxml.jackson.core.JsonGenerator): void;
					}
					export module DefaultSerializerProvider {
						export class Impl extends com.fasterxml.jackson.databind.ser.DefaultSerializerProvider {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl>;
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.SerializerProvider);
							public copy(): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
							public createInstance(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
							public createInstance(config: com.fasterxml.jackson.databind.SerializationConfig, jsf: com.fasterxml.jackson.databind.ser.SerializerFactory): com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl;
							public constructor(src: com.fasterxml.jackson.databind.SerializerProvider, config: com.fasterxml.jackson.databind.SerializationConfig, f: com.fasterxml.jackson.databind.ser.SerializerFactory);
							public constructor(src: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl);
							public constructor(src: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class FilterProvider extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.FilterProvider>;
						public constructor();
						/** @deprecated */
						public findFilter(param0: any): com.fasterxml.jackson.databind.ser.BeanPropertyFilter;
						public findPropertyFilter(filterId: any, valueToFilter: any): com.fasterxml.jackson.databind.ser.PropertyFilter;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class PropertyBuilder extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.PropertyBuilder>;
						public _config: com.fasterxml.jackson.databind.SerializationConfig;
						public _beanDesc: com.fasterxml.jackson.databind.BeanDescription;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _defaultBean: any;
						public _defaultInclusion: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public _useRealPropertyDefaults: boolean;
						public getDefaultBean(): any;
						public getClassAnnotations(): com.fasterxml.jackson.databind.util.Annotations;
						public _constructPropertyWriter(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any, includeInViews: java.lang.Class<any>[]): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						/** @deprecated */
						public getDefaultValue(type: com.fasterxml.jackson.databind.JavaType): any;
						public _throwWrapped(e: java.lang.Exception, propName: string, defaultBean: any): any;
						public buildWriter(prov: com.fasterxml.jackson.databind.SerializerProvider, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, contentTypeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, am: com.fasterxml.jackson.databind.introspect.AnnotatedMember, defaultUseStaticTyping: boolean): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						/** @deprecated */
						public getPropertyDefaultValue(name: string, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, type: com.fasterxml.jackson.databind.JavaType): any;
						public findSerializationType(a: com.fasterxml.jackson.databind.introspect.Annotated, useStaticTyping: boolean, declaredType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public constructor(config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class PropertyFilter extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.PropertyFilter>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.PropertyFilter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
						/** @deprecated */
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class PropertyWriter extends com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.PropertyWriter>;
						public serializeAsOmittedField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public isRequired(): boolean;
						public serializeAsPlaceholder(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public findAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
						public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						/** @deprecated */
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public isVirtual(): boolean;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class ResolvableSerializer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.ResolvableSerializer>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.ResolvableSerializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						});
						public constructor();
						public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class SerializerCache extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.SerializerCache>;
						public addTypedSerializer(type: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public addAndResolveNonTypedSerializer(rawType: java.lang.Class<any>, fullType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor();
						public typedValueSerializer(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public addAndResolveNonTypedSerializer(type: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public addTypedSerializer(cls: java.lang.Class<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
						public untypedValueSerializer(type: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public flush(): void;
						public addAndResolveNonTypedSerializer(type: java.lang.Class<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getReadOnlyLookupMap(): com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
						public typedValueSerializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public size(): number;
						public untypedValueSerializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class SerializerFactory extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.SerializerFactory>;
						public constructor();
						public withAdditionalKeySerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public createTypeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
						public createKeySerializer(prov: com.fasterxml.jackson.databind.SerializerProvider, type: com.fasterxml.jackson.databind.JavaType, defaultImpl: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withSerializerModifier(param0: com.fasterxml.jackson.databind.ser.BeanSerializerModifier): com.fasterxml.jackson.databind.ser.SerializerFactory;
						public createSerializer(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public withAdditionalSerializers(param0: com.fasterxml.jackson.databind.ser.Serializers): com.fasterxml.jackson.databind.ser.SerializerFactory;
						/** @deprecated */
						public createKeySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export class Serializers extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.Serializers>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.ser.Serializers interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						});
						public constructor();
						public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
					}
					export module Serializers {
						export class Base extends java.lang.Object implements com.fasterxml.jackson.databind.ser.Serializers {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.Serializers.Base>;
							public constructor();
							public findSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.JavaType, beanDesc: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findMapLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.MapLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.JavaType, param2: com.fasterxml.jackson.databind.BeanDescription): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findArraySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.ArrayType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findCollectionLikeSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.CollectionLikeType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findMapSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.MapType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findMapSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findMapLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.MapLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.JsonSerializer<any>, param4: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param5: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findArraySerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ArrayType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findCollectionSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.CollectionType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, elementTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findReferenceSerializer(config: com.fasterxml.jackson.databind.SerializationConfig, type: com.fasterxml.jackson.databind.type.ReferenceType, beanDesc: com.fasterxml.jackson.databind.BeanDescription, contentTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, contentValueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findCollectionLikeSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionLikeType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findCollectionSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.CollectionType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public findReferenceSerializer(param0: com.fasterxml.jackson.databind.SerializationConfig, param1: com.fasterxml.jackson.databind.type.ReferenceType, param2: com.fasterxml.jackson.databind.BeanDescription, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param4: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export abstract class VirtualBeanPropertyWriter extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter>;
						public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.core.io.SerializedString);
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any, includeInViews: java.lang.Class<any>[]);
						public isRequired(): boolean;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						/** @deprecated */
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any);
						/** @deprecated */
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value);
						public getName(): string;
						public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						/** @deprecated */
						public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType);
						public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
						public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
						public withConfig(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
						public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value, includeInViews: java.lang.Class<any>[]);
						public static _suppressableValue(inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value): any;
						public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
						public serializeAsElement(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(base: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter);
						public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
						public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						/** @deprecated */
						public depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor();
						/** @deprecated */
						public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public serializeAsField(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(base: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
						public static _suppressNulls(inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value): boolean;
						public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
						public depositSchemaProperty(v: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public isVirtual(): boolean;
						public value(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): any;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
						public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
						public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
						public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class AttributePropertyWriter extends com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter>;
							public _attrName: string;
							public constructor(base: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter);
							/** @deprecated */
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any);
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public value(bean: any, jgen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): any;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public depositSchemaProperty(v: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(attrName: string, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType);
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public withConfig(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: com.fasterxml.jackson.databind.introspect.AnnotatedClass, param2: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, param3: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public constructor(attrName: string, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value);
							public constructor(base: com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType);
							public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.core.io.SerializedString);
							public constructor();
							/** @deprecated */
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value);
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
							public value(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): any;
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value, includeInViews: java.lang.Class<any>[]);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any, includeInViews: java.lang.Class<any>[]);
							public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
							public constructor(base: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public static construct(attrName: string, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;
							public withConfig(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, declaringClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass, propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class BeanAsArraySerializer extends com.fasterxml.jackson.databind.ser.std.BeanSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer>;
							public _defaultSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
							public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public serializeWithType(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: string[]);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, oiw: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, filterId: any);
							public withObjectIdWriter(objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public toString(): string;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>);
							public unwrappingSerializer(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public isUnwrappingSerializer(): boolean;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public withByNameInclusion(toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>): com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer;
							public resolve(provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public withProperties(properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public unwrappingSerializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public serializeAsArray(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withProperties(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], param1: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>);
							public withFilterId(filterId: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>);
							public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public serialize(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withFilterId(filterId: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, filterId: any);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class FailingSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FailingSerializer>;
							public _msg: string;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(msg: string);
							public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export abstract class FilteredBeanPropertyWriter extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter>;
							public constructor();
							public static constructViewBased(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, viewsToIncludeIn: java.lang.Class<any>[]): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
						}
						export module FilteredBeanPropertyWriter {
							export class MultiView extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.MultiView>;
								public _delegate: com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public _views: java.lang.Class<any>[];
								public isRequired(): boolean;
								public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
								public assignNullSerializer(nullSer: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
								public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
								public getType(): com.fasterxml.jackson.databind.JavaType;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
								public rename(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public serializeAsField(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
								public rename(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.MultiView;
								public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
								public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
								public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
								public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
								public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
								public isVirtual(): boolean;
								public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
								public getName(): string;
								public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
								public getFullName(): com.fasterxml.jackson.databind.PropertyName;
								public constructor();
								public serializeAsElement(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
								public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any, includeInViews: java.lang.Class<any>[]);
								public assignSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								/** @deprecated */
								public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any);
								public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
								public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
								public depositSchemaProperty(v: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
								/** @deprecated */
								public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
								/** @deprecated */
								public depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.core.io.SerializedString);
								public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
								public constructor(delegate: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, views: java.lang.Class<any>[]);
								public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							}
							export class SingleView extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.SingleView>;
								public _delegate: com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public _view: java.lang.Class<any>;
								public isRequired(): boolean;
								public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
								public assignNullSerializer(nullSer: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
								public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
								public getType(): com.fasterxml.jackson.databind.JavaType;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
								public rename(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
								public serializeAsField(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
								public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
								public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
								public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
								public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
								public constructor(delegate: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, view: java.lang.Class<any>);
								public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
								public isVirtual(): boolean;
								public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
								public getName(): string;
								public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
								public getFullName(): com.fasterxml.jackson.databind.PropertyName;
								public constructor();
								public serializeAsElement(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
								public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any, includeInViews: java.lang.Class<any>[]);
								public assignSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
								public rename(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter.SingleView;
								/** @deprecated */
								public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any);
								public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
								public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
								public depositSchemaProperty(v: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
								/** @deprecated */
								public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
								/** @deprecated */
								public depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
								public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.core.io.SerializedString);
								public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
								public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class IndexedListSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.List<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer>;
							public serializeTypedContents(value: java.util.List<any>, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serialize(value: java.util.List<any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(t: java.lang.Class<any>);
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: java.util.List<any>): boolean;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeContentsUsing(value: java.util.List<any>, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor();
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public hasSingleElement(value: java.util.List<any>): boolean;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public serializeContents(value: java.util.List<any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							/** @deprecated */
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public constructor(cls: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class IndexedStringListSerializer extends com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<java.util.List<string>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>, unwrapSingle: java.lang.Boolean);
							public constructor(cls: java.lang.Class<any>);
							public contentSchema(): com.fasterxml.jackson.databind.JsonNode;
							public acceptContentVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
							public serialize(value: java.util.List<string>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serializeWithType(value: java.util.List<string>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer, unwrapSingle: java.lang.Boolean);
							public acceptContentVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class IteratorSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.Iterator<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer>;
							public serialize(value: java.util.Iterator<any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeContents(value: java.util.Iterator<any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: java.util.Iterator<any>): boolean;
							public constructor(t: java.lang.Class<any>);
							public _serializeDynamicContents(value: java.util.Iterator<any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public hasSingleElement(value: java.util.Iterator<any>): boolean;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor();
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public constructor(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer);
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							/** @deprecated */
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.IteratorSerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public constructor(cls: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class MapEntrySerializer extends com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map.Entry<any,any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer>;
							public static MARKER_FOR_EMPTY: any;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _valueTypeIsStatic: boolean;
							public _entryType: com.fasterxml.jackson.databind.JavaType;
							public _keyType: com.fasterxml.jackson.databind.JavaType;
							public _valueType: com.fasterxml.jackson.databind.JavaType;
							public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _dynamicValueSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public _suppressableValue: any;
							public _suppressNulls: boolean;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeDynamic(value: java.util.Map.Entry<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, suppressableValue: any, suppressNulls: boolean): com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer;
							public hasSingleElement(value: java.util.Map.Entry<any,any>): boolean;
							public constructor(t: java.lang.Class<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, keySer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>, suppressableValue: any, suppressNulls: boolean);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, entry: java.util.Map.Entry<any,any>): boolean;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, keySer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor();
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public serializeWithType(value: java.util.Map.Entry<any,any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType, keyType: com.fasterxml.jackson.databind.JavaType, valueType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty);
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public withContentInclusion(suppressableValue: any, suppressNulls: boolean): com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer;
							public serialize(value: java.util.Map.Entry<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: com.fasterxml.jackson.databind.JavaType, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public hasSingleElement(param0: any): boolean;
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class ObjectIdWriter extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter>;
							public idType: com.fasterxml.jackson.databind.JavaType;
							public propertyName: com.fasterxml.jackson.core.SerializableString;
							public generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public alwaysAsId: boolean;
							public withSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
							public static construct(idType: com.fasterxml.jackson.databind.JavaType, propName: com.fasterxml.jackson.databind.PropertyName, generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, alwaysAsId: boolean): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
							public constructor(t: com.fasterxml.jackson.databind.JavaType, propName: com.fasterxml.jackson.core.SerializableString, gen: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, alwaysAsId: boolean);
							public withAlwaysAsId(newState: boolean): com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class PropertyBasedObjectIdGenerator {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator>;
							public _property: com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
							public generateId(forPojo: any): any;
							public canUseFor(gen: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>): boolean;
							public constructor(oid: com.fasterxml.jackson.databind.introspect.ObjectIdInfo, prop: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
							public forScope(scope: java.lang.Class<any>): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public newForSerialization(context: any): com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public constructor(scope: java.lang.Class<any>, prop: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
							public key(key: any): com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export abstract class PropertySerializerMap extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap>;
							public _resetWhenFull: boolean;
							public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							public static emptyForRootValues(): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public findAndAddPrimarySerializer(type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public addSerializer(type: com.fasterxml.jackson.databind.JavaType, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddSecondarySerializer(type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public constructor(resetWhenFull: boolean);
							public addSerializer(type: java.lang.Class<any>, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddKeySerializer(type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddPrimarySerializer(type: com.fasterxml.jackson.databind.JavaType, provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public static emptyForProperties(): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public findAndAddSecondarySerializer(type: com.fasterxml.jackson.databind.JavaType, provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddRootValueSerializer(type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public findAndAddRootValueSerializer(type: com.fasterxml.jackson.databind.JavaType, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult;
							public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
						export module PropertySerializerMap {
							export class Double extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Double>;
								public newWith(type: java.lang.Class<any>, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type1: java.lang.Class<any>, serializer1: com.fasterxml.jackson.databind.JsonSerializer<any>, type2: java.lang.Class<any>, serializer2: com.fasterxml.jackson.databind.JsonSerializer<any>);
								public serializerFor(type: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(resetWhenFull: boolean);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							}
							export class Empty extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Empty>;
								public static FOR_PROPERTIES: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Empty;
								public static FOR_ROOT_VALUES: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Empty;
								public newWith(type: java.lang.Class<any>, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public serializerFor(type: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(resetWhenFull: boolean);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							}
							export class Multi extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Multi>;
								public newWith(type: java.lang.Class<any>, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public serializerFor(type: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(resetWhenFull: boolean);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, entries: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.TypeAndSerializer[]);
								public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							}
							export class SerializerAndMapResult extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult>;
								public serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
								public map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(serializer: com.fasterxml.jackson.databind.JsonSerializer<any>, map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							}
							export class Single extends com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.Single>;
								public newWith(type: java.lang.Class<any>, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
								public serializerFor(type: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(resetWhenFull: boolean);
								public serializerFor(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public newWith(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public constructor(base: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap);
							}
							export class TypeAndSerializer extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.TypeAndSerializer>;
								public type: java.lang.Class<any>;
								public serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: java.lang.Class<any>, serializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class ReadOnlyClassToSerializerMap extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap>;
							public untypedValueSerializer(type: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public size(): number;
							public constructor(serializers: java.util.Map<com.fasterxml.jackson.databind.util.TypeKey,com.fasterxml.jackson.databind.JsonSerializer<any>>);
							public static from(src: java.util.HashMap<com.fasterxml.jackson.databind.util.TypeKey,com.fasterxml.jackson.databind.JsonSerializer<any>>): com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
							public typedValueSerializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public typedValueSerializer(type: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public untypedValueSerializer(type: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
						export module ReadOnlyClassToSerializerMap {
							export class Bucket extends java.lang.Object {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap.Bucket>;
								public value: com.fasterxml.jackson.databind.JsonSerializer<any>;
								public next: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap.Bucket;
								public _class: java.lang.Class<any>;
								public _type: com.fasterxml.jackson.databind.JavaType;
								public _isTyped: boolean;
								public constructor(next: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap.Bucket, key: com.fasterxml.jackson.databind.util.TypeKey, value: com.fasterxml.jackson.databind.JsonSerializer<any>);
								public matchesTyped(key: java.lang.Class<any>): boolean;
								public matchesUntyped(key: com.fasterxml.jackson.databind.JavaType): boolean;
								public matchesTyped(key: com.fasterxml.jackson.databind.JavaType): boolean;
								public matchesUntyped(key: java.lang.Class<any>): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class SimpleBeanPropertyFilter extends java.lang.Object implements com.fasterxml.jackson.databind.ser.BeanPropertyFilter, com.fasterxml.jackson.databind.ser.PropertyFilter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter>;
							public include(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): boolean;
							public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.PropertyWriter, objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public static serializeAll(): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public include(writer: com.fasterxml.jackson.databind.ser.PropertyWriter): boolean;
							/** @deprecated */
							public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.PropertyWriter, propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeAsElement(elementValue: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							/** @deprecated */
							public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public static serializeAllExcept(properties: java.util.Set<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							/** @deprecated */
							public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public static serializeAllExcept(...propertyArray: string[]): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public static filterOutAllExcept(properties: java.util.Set<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							public constructor();
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public static from(src: com.fasterxml.jackson.databind.ser.BeanPropertyFilter): com.fasterxml.jackson.databind.ser.PropertyFilter;
							/** @deprecated */
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public includeElement(elementValue: any): boolean;
							public static filterOutAllExcept(...propertyArray: string[]): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							/** @deprecated */
							public static serializeAll(properties: java.util.Set<string>): com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
							public serializeAsField(pojo: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							/** @deprecated */
							public serializeAsField(bean: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
							public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
						}
						export module SimpleBeanPropertyFilter {
							export class FilterExceptFilter extends com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.FilterExceptFilter>;
								public _propertiesToInclude: java.util.Set<string>;
								public constructor(properties: java.util.Set<string>);
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.PropertyWriter, objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.PropertyWriter, propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor();
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								/** @deprecated */
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public serializeAsField(bean: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
								public include(writer: com.fasterxml.jackson.databind.ser.PropertyWriter): boolean;
								public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								public include(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): boolean;
								public serializeAsField(pojo: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								/** @deprecated */
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serializeAsElement(elementValue: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							}
							export class SerializeExceptFilter extends com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter implements java.io.Serializable {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.SerializeExceptFilter>;
								public _propertiesToExclude: java.util.Set<string>;
								public constructor(properties: java.util.Set<string>);
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.PropertyWriter, objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.PropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.PropertyWriter, propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor();
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
								public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								/** @deprecated */
								public depositSchemaProperty(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								/** @deprecated */
								public serializeAsField(bean: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): void;
								public include(writer: com.fasterxml.jackson.databind.ser.PropertyWriter): boolean;
								public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								public include(writer: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): boolean;
								public serializeAsField(pojo: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
								/** @deprecated */
								public depositSchemaProperty(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, param1: com.fasterxml.jackson.databind.node.ObjectNode, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serializeAsElement(elementValue: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, writer: com.fasterxml.jackson.databind.ser.PropertyWriter): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class SimpleFilterProvider extends com.fasterxml.jackson.databind.ser.FilterProvider implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider>;
							public _filtersById: java.util.Map<string,com.fasterxml.jackson.databind.ser.PropertyFilter>;
							public _defaultFilter: com.fasterxml.jackson.databind.ser.PropertyFilter;
							public _cfgFailOnUnknownId: boolean;
							public constructor();
							public removeFilter(id: string): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public setFailOnUnknownId(state: boolean): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							/** @deprecated */
							public findFilter(filterId: any): com.fasterxml.jackson.databind.ser.BeanPropertyFilter;
							/** @deprecated */
							public setDefaultFilter(f: com.fasterxml.jackson.databind.ser.BeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public getDefaultFilter(): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public findPropertyFilter(filterId: any, valueToFilter: any): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public constructor(mapping: java.util.Map<string,any>);
							public setDefaultFilter(f: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public addFilter(id: string, filter: com.fasterxml.jackson.databind.ser.PropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							/** @deprecated */
							public findFilter(param0: any): com.fasterxml.jackson.databind.ser.BeanPropertyFilter;
							public willFailOnUnknownId(): boolean;
							/** @deprecated */
							public addFilter(id: string, filter: com.fasterxml.jackson.databind.ser.BeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public setDefaultFilter(f: com.fasterxml.jackson.databind.ser.PropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
							public addFilter(id: string, filter: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter): com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class StringArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<string[]> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.impl.StringArraySerializer;
							public _elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(cls: java.lang.Class<any>);
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: string[]): boolean;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.StringArraySerializer, prop: com.fasterxml.jackson.databind.BeanProperty, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public serialize(value: string[], gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public hasSingleElement(value: string[]): boolean;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public hasSingleElement(param0: any): boolean;
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeContents(value: string[], gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class StringCollectionSerializer extends com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<java.util.Collection<string>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>, unwrapSingle: java.lang.Boolean);
							public constructor(cls: java.lang.Class<any>);
							public contentSchema(): com.fasterxml.jackson.databind.JsonNode;
							public acceptContentVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serializeWithType(value: java.util.Collection<string>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer, unwrapSingle: java.lang.Boolean);
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptContentVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
							public serialize(value: java.util.Collection<string>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class TypeWrappedSerializer extends com.fasterxml.jackson.databind.JsonSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer>;
							public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _serializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public handledType(): java.lang.Class<any>;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public typeSerializer(): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public valueSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, type: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ser: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class UnknownSerializer extends com.fasterxml.jackson.databind.ser.std.ToEmptyObjectSerializer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer>;
							public constructor();
							public failForEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: any): void;
							public constructor(cls: java.lang.Class<any>);
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(raw: java.lang.Class<any>);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class UnsupportedTypeSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer>;
							public _type: com.fasterxml.jackson.databind.JavaType;
							public _message: string;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: com.fasterxml.jackson.databind.JavaType, msg: string);
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class UnwrappingBeanPropertyWriter extends com.fasterxml.jackson.databind.ser.BeanPropertyWriter implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter>;
							public _nameTransformer: com.fasterxml.jackson.databind.util.NameTransformer;
							/** @deprecated */
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any);
							public isVirtual(): boolean;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public _depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, schemaNode: com.fasterxml.jackson.databind.JsonNode): void;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public depositSchemaProperty(v: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
							public constructor(base: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter, transformer: com.fasterxml.jackson.databind.util.NameTransformer, name: com.fasterxml.jackson.core.io.SerializedString);
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public assignSerializer(ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter);
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public depositSchemaProperty(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.core.io.SerializedString);
							public constructor();
							public rename(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public serializeAsField(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, prov: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public isRequired(): boolean;
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(base: com.fasterxml.jackson.databind.ser.BeanPropertyWriter, name: com.fasterxml.jackson.databind.PropertyName);
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, contextAnnotations: com.fasterxml.jackson.databind.util.Annotations, declaredType: com.fasterxml.jackson.databind.JavaType, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, serType: com.fasterxml.jackson.databind.JavaType, suppressNulls: boolean, suppressableValue: any, includeInViews: java.lang.Class<any>[]);
							public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
							public _new(transformer: com.fasterxml.jackson.databind.util.NameTransformer, newName: com.fasterxml.jackson.core.io.SerializedString): com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public _new(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public rename(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public isUnwrapping(): boolean;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class UnwrappingBeanSerializer extends com.fasterxml.jackson.databind.ser.std.BeanSerializerBase implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer>;
							public _nameTransformer: com.fasterxml.jackson.databind.util.NameTransformer;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
							public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, toIgnore: java.util.Set<string>);
							public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public serializeWithType(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: string[]);
							public withObjectIdWriter(objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public toString(): string;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>);
							public unwrappingSerializer(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, transformer: com.fasterxml.jackson.databind.util.NameTransformer);
							public isUnwrappingSerializer(): boolean;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public resolve(provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public withProperties(properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public unwrappingSerializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>);
							public withProperties(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], param1: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>);
							public withFilterId(filterId: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public serialize(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withFilterId(filterId: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
							public withByNameInclusion(toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, filterId: any);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, filterId: any);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module impl {
						export class WritableObjectId extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.impl.WritableObjectId>;
							public generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>;
							public id: any;
							public idWritten: boolean;
							public generateId(forPojo: any): any;
							public writeAsId(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, w: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): boolean;
							public constructor(generator: com.fasterxml.jackson.annotation.ObjectIdGenerator<any>);
							public writeAsField(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, w: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class ArraySerializerBase<T>  extends com.fasterxml.jackson.databind.ser.ContainerSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>>;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _unwrapSingle: java.lang.Boolean;
							public constructor(cls: java.lang.Class<any>);
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public _shouldUnwrapSingle(provider: com.fasterxml.jackson.databind.SerializerProvider): boolean;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class AsArraySerializerBase<T>  extends com.fasterxml.jackson.databind.ser.ContainerSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>>;
							public _elementType: com.fasterxml.jackson.databind.JavaType;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _staticTyping: boolean;
							public _unwrapSingle: java.lang.Boolean;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: com.fasterxml.jackson.databind.JavaType, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public constructor(cls: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class AtomicReferenceSerializer extends com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<java.util.concurrent.atomic.AtomicReference<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer>;
							public _getReferenced(value: java.util.concurrent.atomic.AtomicReference<any>): any;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<java.util.concurrent.atomic.AtomicReference<any>>;
							public constructor(t: java.lang.Class<any>);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public constructor(fullType: com.fasterxml.jackson.databind.type.ReferenceType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ser: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withContentInclusion(param0: any, param1: boolean): com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public _getReferencedIfPresent(value: java.util.concurrent.atomic.AtomicReference<any>): any;
							public constructor();
							public _getReferencedIfPresent(param0: any): any;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(base: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer, suppressableValue: any, suppressNulls: boolean);
							public _isValuePresent(value: java.util.concurrent.atomic.AtomicReference<any>): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(base: com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer, suppressableValue: any, suppressNulls: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public _isValuePresent(param0: any): boolean;
							public _getReferenced(param0: any): any;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<any>;
							public withContentInclusion(suppressableValue: any, suppressNulls: boolean): com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<java.util.concurrent.atomic.AtomicReference<any>>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class BeanSerializerBase extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase>;
							public static NAME_FOR_OBJECT_REF: com.fasterxml.jackson.databind.PropertyName;
							public static NO_PROPS: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[];
							public _beanType: com.fasterxml.jackson.databind.JavaType;
							public _props: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[];
							public _filteredProps: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[];
							public _anyGetterWriter: com.fasterxml.jackson.databind.ser.AnyGetterWriter;
							public _propertyFilterId: any;
							public _typeId: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public _objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
							public _serializationShape: com.fasterxml.jackson.annotation.JsonFormat.Shape;
							public withByNameInclusion(param0: java.util.Set<string>, param1: java.util.Set<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase);
							public withFilterId(param0: any): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public serializeWithType(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: string[]);
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeFieldsFiltered(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public _customTypeId(bean: any): string;
							public asArraySerializer(): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public _typeIdDef(typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, bean: any, valueShape: com.fasterxml.jackson.core.JsonToken): com.fasterxml.jackson.core.type.WritableTypeId;
							public resolve(provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeFields(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							/** @deprecated */
							public withIgnorals(toIgnore: java.util.Set<string>): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public withProperties(param0: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], param1: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType, builder: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
							public _serializeObjectId(bean: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, objectId: com.fasterxml.jackson.databind.ser.impl.WritableObjectId): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>);
							public properties(): java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public withObjectIdWriter(param0: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, properties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], filteredProperties: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]);
							/** @deprecated */
							public withIgnorals(toIgnore: string[]): com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public usesObjectId(): boolean;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer);
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withFilterId(filterId: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _serializeWithObjectId(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public _serializeWithObjectId(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, startEndObject: boolean): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter);
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, objectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, filterId: any);
							public findConvertingSerializer(provider: com.fasterxml.jackson.databind.SerializerProvider, prop: com.fasterxml.jackson.databind.ser.BeanPropertyWriter): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class BooleanSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.BooleanSerializer>;
							public _forPrimitive: boolean;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor(forPrimitive: boolean);
						}
						export module BooleanSerializer {
							export class AsNumber extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.BooleanSerializer.AsNumber>;
								public _forPrimitive: boolean;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public constructor(forPrimitive: boolean);
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class ByteArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<number[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer>;
							public constructor();
							public serialize(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: number[]): boolean;
							public serializeWithType(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class ByteBufferSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.nio.ByteBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(bbuf: java.nio.ByteBuffer, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class CalendarSerializer extends com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<java.util.Calendar> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.CalendarSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _timestamp(value: java.util.Calendar): number;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serialize(value: java.util.Calendar, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public constructor(type: java.lang.Class<any>, useTimestamp: java.lang.Boolean, customFormat: java.text.DateFormat);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withFormat(timestamp: java.lang.Boolean, customFormat: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public _timestamp(param0: any): number;
							public constructor(useTimestamp: java.lang.Boolean, customFormat: java.text.DateFormat);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public getSchema(serializers: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class ClassSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Class<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ClassSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public serialize(value: java.lang.Class<any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class CollectionSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.Collection<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.CollectionSerializer>;
							public hasSingleElement(value: java.util.Collection<any>): boolean;
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.CollectionSerializer;
							public constructor(t: java.lang.Class<any>);
							public serializeContentsUsing(value: java.util.Collection<any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: java.util.Collection<any>): boolean;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.CollectionSerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor();
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeContents(value: java.util.Collection<any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							/** @deprecated */
							public constructor(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: java.util.Collection<any>, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							/** @deprecated */
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public constructor(cls: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class DateSerializer extends com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<java.util.Date> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.DateSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.DateSerializer;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public withFormat(timestamp: java.lang.Boolean, customFormat: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateSerializer;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public constructor(type: java.lang.Class<any>, useTimestamp: java.lang.Boolean, customFormat: java.text.DateFormat);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: java.util.Date, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public _timestamp(param0: any): number;
							public constructor(useTimestamp: java.lang.Boolean, customFormat: java.text.DateFormat);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public _timestamp(value: java.util.Date): number;
							public getSchema(serializers: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class DateTimeSerializerBase<T>  extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>>;
							public _useTimestamp: java.lang.Boolean;
							public _customFormat: java.text.DateFormat;
							public _reusedCustomFormat: java.util.concurrent.atomic.AtomicReference<java.text.DateFormat>;
							public _asTimestamp(serializers: com.fasterxml.jackson.databind.SerializerProvider): boolean;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public _acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, asNumber: boolean): void;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _timestamp(param0: any): number;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public getSchema(serializers: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public _serializeAsString(value: java.util.Date, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(type: java.lang.Class<any>, useTimestamp: java.lang.Boolean, customFormat: java.text.DateFormat);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public isEmpty(serializers: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class EnumSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Enum<any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.EnumSerializer>;
							public _values: com.fasterxml.jackson.databind.util.EnumValues;
							public constructor();
							public _serializeAsIndex(serializers: com.fasterxml.jackson.databind.SerializerProvider): boolean;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(en: java.lang.Enum<any>, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public static _isShapeWrittenUsingIndex(enumClass: java.lang.Class<any>, format: com.fasterxml.jackson.annotation.JsonFormat.Value, fromClass: boolean, defaultValue: java.lang.Boolean): java.lang.Boolean;
							public static construct(enumClass: java.lang.Class<any>, config: com.fasterxml.jackson.databind.SerializationConfig, beanDesc: com.fasterxml.jackson.databind.BeanDescription, format: com.fasterxml.jackson.annotation.JsonFormat.Value): com.fasterxml.jackson.databind.ser.std.EnumSerializer;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(v: com.fasterxml.jackson.databind.util.EnumValues, serializeAsIndex: java.lang.Boolean);
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public getEnumValues(): com.fasterxml.jackson.databind.util.EnumValues;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class EnumSetSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.util.EnumSet<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer>;
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.std.EnumSetSerializer;
							public constructor(t: java.lang.Class<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.EnumSetSerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public serializeContents(value: java.util.EnumSet<any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(elemType: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: java.util.EnumSet<any>): boolean;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.EnumSetSerializer;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public hasSingleElement(value: java.util.EnumSet<any>): boolean;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							public serialize(value: java.util.EnumSet<any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public constructor(cls: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class FileSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.io.File> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.FileSerializer>;
							public constructor();
							public serialize(value: java.io.File, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class InetAddressSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.net.InetAddress> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer>;
							public _asNumeric: boolean;
							public constructor();
							public serializeWithType(value: java.net.InetAddress, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: java.net.InetAddress, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public constructor(asNumeric: boolean);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class InetSocketAddressSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.net.InetSocketAddress> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: java.net.InetSocketAddress, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public serializeWithType(value: java.net.InetSocketAddress, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class IterableSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<java.lang.Iterable<any>> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.IterableSerializer>;
							public serializeContents(value: java.lang.Iterable<any>, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.IterableSerializer;
							public hasSingleElement(value: java.lang.Iterable<any>): boolean;
							public constructor(t: java.lang.Class<any>);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.ser.std.IterableSerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(cls: java.lang.Class<any>, et: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public constructor(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer);
							public serialize(value: java.lang.Iterable<any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: java.lang.Iterable<any>): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public hasSingleElement(param0: any): boolean;
							/** @deprecated */
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase<any>;
							public constructor(cls: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, property: com.fasterxml.jackson.databind.BeanProperty, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class JsonValueSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer>;
							public _accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _valueType: com.fasterxml.jackson.databind.JavaType;
							public _forceTypeInformation: boolean;
							public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public serialize(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(bean: any, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider, typeSer0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public isEmpty(ctxt: com.fasterxml.jackson.databind.SerializerProvider, bean: any): boolean;
							public toString(): string;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, forceTypeInfo: boolean): com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isNaturalTypeWithStdHandling(rawType: java.lang.Class<any>, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, forceTypeInfo: boolean);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(ctxt: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							/** @deprecated */
							public constructor(accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember, ser: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public getSchema(ctxt: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public _findDynamicSerializer(ctxt: com.fasterxml.jackson.databind.SerializerProvider, valueClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ser: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public _acceptJsonFormatVisitorForEnum(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, enumType: java.lang.Class<any>): boolean;
						}
						export module JsonValueSerializer {
							export class TypeSerializerRerouter extends com.fasterxml.jackson.databind.jsontype.TypeSerializer {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter>;
								public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
								public _forObject: any;
								/** @deprecated */
								public writeTypePrefixForObject(value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
								public writeTypePrefix(g: com.fasterxml.jackson.core.JsonGenerator, typeId: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
								/** @deprecated */
								public writeCustomTypeSuffixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								public writeTypeSuffix(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
								/** @deprecated */
								public writeCustomTypeSuffixForScalar(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								public writeTypePrefix(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
								/** @deprecated */
								public writeCustomTypePrefixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								/** @deprecated */
								public writeCustomTypeSuffixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								/** @deprecated */
								public writeTypePrefixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
								/** @deprecated */
								public writeCustomTypeSuffixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								/** @deprecated */
								public writeTypeSuffixForObject(value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeCustomTypeSuffixForArray(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								public forProperty(prop: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
								/** @deprecated */
								public writeTypeSuffixForScalar(value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeTypeSuffixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeTypePrefixForArray(value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
								public getTypeInclusion(): com.fasterxml.jackson.annotation.JsonTypeInfo.As;
								/** @deprecated */
								public writeTypePrefixForScalar(value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeTypePrefixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeTypePrefixForScalar(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
								/** @deprecated */
								public writeCustomTypePrefixForScalar(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								/** @deprecated */
								public writeCustomTypeSuffixForObject(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								public constructor();
								/** @deprecated */
								public writeTypePrefixForObject(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
								/** @deprecated */
								public writeCustomTypePrefixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								public constructor(ts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ob: any);
								/** @deprecated */
								public writeTypePrefixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
								public getTypeIdResolver(): com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
								/** @deprecated */
								public writeTypeSuffixForArray(value: any, gen: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeCustomTypePrefixForArray(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								public forProperty(param0: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.jsontype.TypeSerializer;
								public writeTypeSuffix(g: com.fasterxml.jackson.core.JsonGenerator, typeId: com.fasterxml.jackson.core.type.WritableTypeId): com.fasterxml.jackson.core.type.WritableTypeId;
								/** @deprecated */
								public writeTypePrefixForArray(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
								public getPropertyName(): string;
								/** @deprecated */
								public writeTypeSuffixForScalar(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeCustomTypePrefixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								/** @deprecated */
								public writeTypePrefixForObject(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeTypePrefixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
								/** @deprecated */
								public writeCustomTypePrefixForObject(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, typeId: string): void;
								/** @deprecated */
								public writeTypePrefixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator, type: java.lang.Class<any>): void;
								/** @deprecated */
								public writeTypeSuffixForArray(value: any, g: com.fasterxml.jackson.core.JsonGenerator): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class MapProperty extends com.fasterxml.jackson.databind.ser.PropertyWriter {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.MapProperty>;
							public _typeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _key: any;
							public _value: any;
							public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getValue(): any;
							public isVirtual(): boolean;
							public serializeAsElement(map: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public findPropertyFormat(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public findAliases(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public findPropertyInclusion(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, baseType: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public findAliases(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): java.util.List<com.fasterxml.jackson.databind.PropertyName>;
							public constructor(propDef: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition);
							public setValue(v: any): void;
							public constructor(typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer, prop: com.fasterxml.jackson.databind.BeanProperty);
							/** @deprecated */
							public findFormatOverrides(intr: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public reset(key: any, value: any, keySer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public findPropertyInclusion(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							/** @deprecated */
							public findFormatOverrides(param0: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.annotation.JsonFormat.Value;
							/** @deprecated */
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.node.ObjectNode, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
							/** @deprecated */
							public reset(key: any, keySer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public serializeAsElement(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeAsField(map: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
							public serializeAsPlaceholder(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeAsOmittedField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public depositSchemaProperty(objectVisitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeAsField(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase);
							public constructor(md: com.fasterxml.jackson.databind.PropertyMetadata);
							public getAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public serializeAsPlaceholder(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public depositSchemaProperty(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isRequired(): boolean;
							/** @deprecated */
							public depositSchemaProperty(propertiesNode: com.fasterxml.jackson.databind.node.ObjectNode, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(base: com.fasterxml.jackson.databind.ser.PropertyWriter);
							public getMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
							public getType(): com.fasterxml.jackson.databind.JavaType;
							public getAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public getName(): string;
							public getContextAnnotation(acls: java.lang.Class<any>): java.lang.annotation.Annotation;
							public findPropertyFormat(param0: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, param1: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public getFullName(): com.fasterxml.jackson.databind.PropertyName;
							public getContextAnnotation(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							public serializeAsOmittedField(map: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class MapSerializer extends com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map<any,any>> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.MapSerializer>;
							public static UNSPECIFIED_TYPE: com.fasterxml.jackson.databind.JavaType;
							public static MARKER_FOR_EMPTY: any;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _valueTypeIsStatic: boolean;
							public _keyType: com.fasterxml.jackson.databind.JavaType;
							public _valueType: com.fasterxml.jackson.databind.JavaType;
							public _keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _dynamicValueSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public _ignoredEntries: java.util.Set<string>;
							public _includedEntries: java.util.Set<string>;
							public _filterId: any;
							public _suppressableValue: any;
							public _suppressNulls: boolean;
							public _inclusionChecker: com.fasterxml.jackson.databind.util.IgnorePropertiesUtil.Checker;
							public _sortKeys: boolean;
							public constructor(ignoredEntries: java.util.Set<string>, includedEntries: java.util.Set<string>, keyType: com.fasterxml.jackson.databind.JavaType, valueType: com.fasterxml.jackson.databind.JavaType, valueTypeIsStatic: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, ignored: java.util.Set<string>, included: java.util.Set<string>, sortKeys: boolean): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							/** @deprecated */
							public static construct(ignoredList: string[], mapType: com.fasterxml.jackson.databind.JavaType, staticValueType: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, filterId: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.MapSerializer, property: com.fasterxml.jackson.databind.BeanProperty, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, ignoredEntries: java.util.Set<string>);
							public _writeNullKeyedEntry(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): void;
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public withContentInclusion(suppressableValue: any, suppressNulls: boolean): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public withFilterId(filterId: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.MapSerializer, property: com.fasterxml.jackson.databind.BeanProperty, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, ignoredEntries: java.util.Set<string>, includedEntries: java.util.Set<string>);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getKeySerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.MapSerializer, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, suppressableValue: any);
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeTypedFields(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, suppressableValue: any): void;
							/** @deprecated */
							public withContentInclusion(suppressableValue: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							/** @deprecated */
							public _ensureOverride(): void;
							public serializeFieldsUsing(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public serializeFilteredFields(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, filter: com.fasterxml.jackson.databind.ser.PropertyFilter, suppressableValue: any): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public _orderEntries(input: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): java.util.Map<any,any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public _ensureOverride(method: string): void;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public static construct(ignoredEntries: java.util.Set<string>, mapType: com.fasterxml.jackson.databind.JavaType, staticValueType: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, filterId: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public serializeFields(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeWithoutTypeInfo(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.MapSerializer, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, suppressableValue: any, suppressNulls: boolean);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withResolved(property: com.fasterxml.jackson.databind.BeanProperty, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, ignored: java.util.Set<string>, sortKeys: boolean): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor();
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: java.util.Map<any,any>): boolean;
							public serializeOptionalFields(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, suppressableValue: any): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public _hasNullKey(input: java.util.Map<any,any>): boolean;
							public serializeFilteredAnyProperties(provider: com.fasterxml.jackson.databind.SerializerProvider, gen: com.fasterxml.jackson.core.JsonGenerator, bean: any, value: java.util.Map<any,any>, filter: com.fasterxml.jackson.databind.ser.PropertyFilter, suppressableValue: any): void;
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: com.fasterxml.jackson.databind.JavaType, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.MapSerializer, filterId: any, sortKeys: boolean);
							/** @deprecated */
							public constructor(ignoredEntries: java.util.Set<string>, keyType: com.fasterxml.jackson.databind.JavaType, valueType: com.fasterxml.jackson.databind.JavaType, valueTypeIsStatic: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public withFilterId(filterId: any): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public hasSingleElement(param0: any): boolean;
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public hasSingleElement(value: java.util.Map<any,any>): boolean;
							public static construct(ignoredEntries: java.util.Set<string>, includedEntries: java.util.Set<string>, mapType: com.fasterxml.jackson.databind.JavaType, staticValueType: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, keySerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, filterId: any): com.fasterxml.jackson.databind.ser.std.MapSerializer;
							public serialize(value: java.util.Map<any,any>, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class NonTypedScalarSerializerBase<T>  extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase<any>>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>, bogus: boolean);
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class NullSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NullSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.NullSerializer;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class NumberSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Number> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.NumberSerializer;
							public static MAX_BIG_DECIMAL_SCALE: number;
							public _isInt: boolean;
							public constructor();
							public static bigDecimalAsStringSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public constructor(rawType: java.lang.Class<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serialize(value: java.lang.Number, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
						export module NumberSerializer {
							export class BigDecimalAsStringSerializer extends com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public _verifyBigDecimalRange(gen: com.fasterxml.jackson.core.JsonGenerator, value: java.math.BigDecimal): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(handledType: java.lang.Class<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public valueToString(param0: any): string;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public valueToString(value: any): string;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class NumberSerializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers>;
							public constructor();
							public static addAll(allDeserializers: java.util.Map<string,com.fasterxml.jackson.databind.JsonSerializer<any>>): void;
						}
						export module NumberSerializers {
							export abstract class Base<T>  extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any>>;
								public _numberType: com.fasterxml.jackson.core.JsonParser.NumberType;
								public _schemaType: string;
								public _isInt: boolean;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public constructor(cls: java.lang.Class<any>, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, schemaType: string);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class DoubleSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.DoubleSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								/** @deprecated */
								public static notFinite(value: number): boolean;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(cls: java.lang.Class<any>, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, schemaType: string);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class FloatSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(cls: java.lang.Class<any>, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, schemaType: string);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class IntLikeSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(cls: java.lang.Class<any>, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, schemaType: string);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class IntegerSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntegerSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(type: java.lang.Class<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(cls: java.lang.Class<any>, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, schemaType: string);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class LongSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.LongSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(cls: java.lang.Class<any>, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, schemaType: string);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class ShortSerializer extends com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public createContextual(prov: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(cls: java.lang.Class<any>, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, schemaType: string);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class ObjectArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any[]> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer>;
							public _staticTyping: boolean;
							public _elementType: com.fasterxml.jackson.databind.JavaType;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public constructor(cls: java.lang.Class<any>);
							public serializeContents(value: any[], gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: any[]): boolean;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
							public getContentType(): com.fasterxml.jackson.databind.JavaType;
							public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
							public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							/** @deprecated */
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
							public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							public withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ser: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer;
							public serialize(value: any[], gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor();
							public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeContentsUsing(value: any[], jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, ser: com.fasterxml.jackson.databind.JsonSerializer<any>): void;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapSingle: java.lang.Boolean);
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public hasSingleElement(value: any[]): boolean;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer);
							public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: com.fasterxml.jackson.databind.JavaType, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public hasSingleElement(param0: any): boolean;
							public constructor(elemType: com.fasterxml.jackson.databind.JavaType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, elementSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public serializeTypedContents(value: any[], jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class RawSerializer<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.RawSerializer<any>>;
							public constructor();
							public constructor(cls: java.lang.Class<any>);
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public serialize(value: any, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class ReferenceTypeSerializer<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<any>>;
							public static MARKER_FOR_EMPTY: any;
							public _referredType: com.fasterxml.jackson.databind.JavaType;
							public _property: com.fasterxml.jackson.databind.BeanProperty;
							public _valueTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
							public _valueSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _unwrapper: com.fasterxml.jackson.databind.util.NameTransformer;
							public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
							public _suppressableValue: any;
							public _suppressNulls: boolean;
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public unwrappingSerializer(transformer: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public constructor(fullType: com.fasterxml.jackson.databind.type.ReferenceType, staticTyping: boolean, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, ser: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public isUnwrappingSerializer(): boolean;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withContentInclusion(param0: any, param1: boolean): com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<any>;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serializeWithType(ref: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public unwrappingSerializer(unwrapper: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public _getReferencedIfPresent(param0: any): any;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public _useStatic(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty, referredType: com.fasterxml.jackson.databind.JavaType): boolean;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(base: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<any>, property: com.fasterxml.jackson.databind.BeanProperty, vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer, valueSer: com.fasterxml.jackson.databind.JsonSerializer<any>, unwrapper: com.fasterxml.jackson.databind.util.NameTransformer, suppressableValue: any, suppressNulls: boolean);
							public getReferredType(): com.fasterxml.jackson.databind.JavaType;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public _isValuePresent(param0: any): boolean;
							public _getReferenced(param0: any): any;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(ref: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: com.fasterxml.jackson.databind.jsontype.TypeSerializer, param2: com.fasterxml.jackson.databind.JsonSerializer<any>, param3: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class SerializableSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<com.fasterxml.jackson.databind.JsonSerializable> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.SerializableSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.SerializableSerializer;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public serializeWithType(value: com.fasterxml.jackson.databind.JsonSerializable, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public isEmpty(serializers: com.fasterxml.jackson.databind.SerializerProvider, value: com.fasterxml.jackson.databind.JsonSerializable): boolean;
							public serialize(value: com.fasterxml.jackson.databind.JsonSerializable, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class SqlDateSerializer extends com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<java.sql.Date> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serialize(value: java.sql.Date, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public withFormat(param0: java.lang.Boolean, param1: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase<any>;
							public constructor(type: java.lang.Class<any>, useTimestamp: java.lang.Boolean, customFormat: java.text.DateFormat);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public withFormat(timestamp: java.lang.Boolean, customFormat: java.text.DateFormat): com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public _timestamp(value: java.sql.Date): number;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public _timestamp(param0: any): number;
							public constructor(useTimestamp: java.lang.Boolean, customFormat: java.text.DateFormat);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public getSchema(serializers: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class SqlTimeSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.sql.Time> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public serialize(value: java.sql.Time, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class StaticListSerializerBase<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>>;
							public _unwrapSingle: java.lang.Boolean;
							public constructor();
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase<any>, unwrapSingle: java.lang.Boolean);
							public constructor(cls: java.lang.Class<any>);
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public contentSchema(): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider, param3: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptContentVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class StdArraySerializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers>;
							public static _arraySerializers: java.util.HashMap<string,com.fasterxml.jackson.databind.JsonSerializer<any>>;
							public constructor();
							public static findStandardImpl(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
						export module StdArraySerializers {
							export class BooleanArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<boolean[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.BooleanArraySerializer>;
								public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serializeContents(value: boolean[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public hasSingleElement(value: boolean[]): boolean;
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.BooleanArraySerializer, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								/** @deprecated */
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								/** @deprecated */
								public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: boolean[]): boolean;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public serialize(value: boolean[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							}
							export class CharArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<string[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.CharArraySerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: string[]): boolean;
								public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
								public serialize(value: string[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
								public serializeWithType(value: string[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							}
							export class DoubleArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.DoubleArraySerializer>;
								public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.DoubleArraySerializer, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: number[]): boolean;
								public hasSingleElement(value: number[]): boolean;
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								/** @deprecated */
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								/** @deprecated */
								public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public serializeContents(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							}
							export class FloatArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.FloatArraySerializer>;
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: number[]): boolean;
								public hasSingleElement(value: number[]): boolean;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.FloatArraySerializer, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								/** @deprecated */
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								/** @deprecated */
								public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public serializeContents(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							}
							export class IntArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.IntArraySerializer>;
								public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: number[]): boolean;
								public hasSingleElement(value: number[]): boolean;
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								/** @deprecated */
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								/** @deprecated */
								public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public serializeContents(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.IntArraySerializer, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							}
							export class LongArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.LongArraySerializer>;
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: number[]): boolean;
								public hasSingleElement(value: number[]): boolean;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.LongArraySerializer, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								/** @deprecated */
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								/** @deprecated */
								public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public serializeContents(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							}
							export class ShortArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<number[]> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.ShortArraySerializer>;
								public serializeContents(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: number[]): boolean;
								public hasSingleElement(value: number[]): boolean;
								public getContentType(): com.fasterxml.jackson.databind.JavaType;
								public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								/** @deprecated */
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public isEmpty(value: any): boolean;
								/** @deprecated */
								public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
								public serializeContents(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public _withResolved(param0: com.fasterxml.jackson.databind.BeanProperty, param1: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public hasSingleElement(param0: any): boolean;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public getContentSerializer(): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public serialize(value: number[], g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public _withResolved(prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.ShortArraySerializer, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							}
							export abstract class TypedPrimitiveArraySerializer<T>  extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public _withValueTypeSerializer(vts: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>);
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer<any>, prop: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(cls: java.lang.Class<any>);
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.ContainerSerializer<any>);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public _withValueTypeSerializer(param0: com.fasterxml.jackson.databind.jsontype.TypeSerializer): com.fasterxml.jackson.databind.ser.ContainerSerializer<any>;
								/** @deprecated */
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public constructor(src: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<any>, property: com.fasterxml.jackson.databind.BeanProperty, unwrapSingle: java.lang.Boolean);
								/** @deprecated */
								public constructor(cls: java.lang.Class<any>, property: com.fasterxml.jackson.databind.BeanProperty);
								public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(fullType: com.fasterxml.jackson.databind.JavaType);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class StdDelegatingSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer>;
							public _converter: com.fasterxml.jackson.databind.util.Converter<any,any>;
							public _delegateType: com.fasterxml.jackson.databind.JavaType;
							public _delegateSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(converter: com.fasterxml.jackson.databind.util.Converter<any,any>, delegateType: com.fasterxml.jackson.databind.JavaType, delegateSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>);
							public createContextual(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(cls: java.lang.Class<any>, converter: com.fasterxml.jackson.databind.util.Converter<any,any>);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(converter: com.fasterxml.jackson.databind.util.Converter<any,any>);
							public _findSerializer(value: any, serializers: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public resolve(provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public getConverter(): com.fasterxml.jackson.databind.util.Converter<any,any>;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getDelegatee(): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public convertValue(value: any): any;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public withDelegate(converter: com.fasterxml.jackson.databind.util.Converter<any,any>, delegateType: com.fasterxml.jackson.databind.JavaType, delegateSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
							public resolve(param0: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class StdJdkSerializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers>;
							public constructor();
							public static all(): java.util.Collection<java.util.Map.Entry<java.lang.Class<any>,any>>;
						}
						export module StdJdkSerializers {
							export class AtomicBooleanSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.concurrent.atomic.AtomicBoolean> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicBooleanSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public serialize(value: java.util.concurrent.atomic.AtomicBoolean, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class AtomicIntegerSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.concurrent.atomic.AtomicInteger> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicIntegerSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public serialize(value: java.util.concurrent.atomic.AtomicInteger, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class AtomicLongSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.concurrent.atomic.AtomicLong> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicLongSerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public serialize(value: java.util.concurrent.atomic.AtomicLong, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class StdKeySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class StdKeySerializers extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers>;
							public static DEFAULT_KEY_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public static DEFAULT_STRING_SERIALIZER: com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor();
							public static getFallbackKeySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, rawKeyType: java.lang.Class<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public static getStdKeySerializer(config: com.fasterxml.jackson.databind.SerializationConfig, rawKeyType: java.lang.Class<any>, useDefault: boolean): com.fasterxml.jackson.databind.JsonSerializer<any>;
							/** @deprecated */
							public static getDefault(): com.fasterxml.jackson.databind.JsonSerializer<any>;
						}
						export module StdKeySerializers {
							export class Default extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers.Default>;
								public _typeId: number;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(typeId: number, type: java.lang.Class<any>);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class Dynamic extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers.Dynamic>;
								public _dynamicSerializers: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public _findAndAddDynamic(map: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, type: java.lang.Class<any>, provider: com.fasterxml.jackson.databind.SerializerProvider): com.fasterxml.jackson.databind.JsonSerializer<any>;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class EnumKeySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers.EnumKeySerializer>;
								public _values: com.fasterxml.jackson.databind.util.EnumValues;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public static construct(enumType: java.lang.Class<any>, enumValues: com.fasterxml.jackson.databind.util.EnumValues): com.fasterxml.jackson.databind.ser.std.StdKeySerializers.EnumKeySerializer;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public constructor(enumType: java.lang.Class<any>, values: com.fasterxml.jackson.databind.util.EnumValues);
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
							export class StringKeySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
								public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdKeySerializers.StringKeySerializer>;
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>, dummy: boolean);
								public constructor();
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
								public serialize(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
								public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
								public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
								public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
								public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
								public constructor(type: com.fasterxml.jackson.databind.JavaType);
								public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
								public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
								public constructor(t: java.lang.Class<any>);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class StdScalarSerializer<T>  extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class StdSerializer<T>  extends com.fasterxml.jackson.databind.JsonSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StdSerializer<any>>;
							public _handledType: java.lang.Class<any>;
							public handledType(): java.lang.Class<any>;
							public visitStringFormat(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public findConvertingContentSerializer(provider: com.fasterxml.jackson.databind.SerializerProvider, prop: com.fasterxml.jackson.databind.BeanProperty, existingSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public findIncludeOverrides(provider: com.fasterxml.jackson.databind.SerializerProvider, prop: com.fasterxml.jackson.databind.BeanProperty, typeForDefaults: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonInclude.Value;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public visitArrayFormat(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, itemType: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes): void;
							public findFormatOverrides(provider: com.fasterxml.jackson.databind.SerializerProvider, prop: com.fasterxml.jackson.databind.BeanProperty, typeForDefaults: java.lang.Class<any>): com.fasterxml.jackson.annotation.JsonFormat.Value;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, type: com.fasterxml.jackson.databind.JavaType): void;
							public findPropertyFilter(provider: com.fasterxml.jackson.databind.SerializerProvider, filterId: any, valueToFilter: any): com.fasterxml.jackson.databind.ser.PropertyFilter;
							public visitStringFormat(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public findFormatFeature(provider: com.fasterxml.jackson.databind.SerializerProvider, prop: com.fasterxml.jackson.databind.BeanProperty, typeForDefaults: java.lang.Class<any>, feat: com.fasterxml.jackson.annotation.JsonFormat.Feature): java.lang.Boolean;
							public static _nonEmpty(c: java.util.Collection<any>): boolean;
							public visitIntFormat(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, numberType: com.fasterxml.jackson.core.JsonParser.NumberType, format: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat): void;
							public findAnnotatedContentSerializer(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public visitIntFormat(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, numberType: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public static _neitherNull(a: any, b: any): boolean;
							public wrapAndThrow(provider: com.fasterxml.jackson.databind.SerializerProvider, t: java.lang.Throwable, bean: any, index: number): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public visitArrayFormat(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, itemSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>, itemType: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public createSchemaNode(type: string): com.fasterxml.jackson.databind.node.ObjectNode;
							public findContextualConvertingSerializer(provider: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty, existingSerializer: com.fasterxml.jackson.databind.JsonSerializer<any>): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public visitFloatFormat(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType, numberType: com.fasterxml.jackson.core.JsonParser.NumberType): void;
							public isDefaultSerializer(serializer: com.fasterxml.jackson.databind.JsonSerializer<any>): boolean;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public wrapAndThrow(provider: com.fasterxml.jackson.databind.SerializerProvider, t: java.lang.Throwable, bean: any, fieldName: string): void;
							public createSchemaNode(type: string, isOptional: boolean): com.fasterxml.jackson.databind.node.ObjectNode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class StringSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.StringSerializer>;
							public constructor();
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class TimeZoneSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.TimeZone> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: java.util.TimeZone, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public serialize(value: java.util.TimeZone, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class ToEmptyObjectSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ToEmptyObjectSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(raw: java.lang.Class<any>);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, ctxt: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class ToStringSerializer extends com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ToStringSerializer>;
							public static instance: com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(handledType: java.lang.Class<any>);
							public valueToString(param0: any): string;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
							public valueToString(value: any): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export abstract class ToStringSerializerBase extends com.fasterxml.jackson.databind.ser.std.StdSerializer<any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase>;
							public constructor();
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public serializeWithType(value: any, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public serialize(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(handledType: java.lang.Class<any>);
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public valueToString(param0: any): string;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class TokenBufferSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<com.fasterxml.jackson.databind.util.TokenBuffer> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer>;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public serializeWithType(value: com.fasterxml.jackson.databind.util.TokenBuffer, g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public serialize(value: com.fasterxml.jackson.databind.util.TokenBuffer, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public serializeWithType(value: any, gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module ser {
					export module std {
						export class UUIDSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.util.UUID> implements com.fasterxml.jackson.databind.ser.ContextualSerializer  {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.ser.std.UUIDSerializer>;
							public _asBinary: java.lang.Boolean;
							public constructor();
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public getSchema(provider: com.fasterxml.jackson.databind.SerializerProvider, typeHint: java.lang.reflect.Type, isOptional: boolean): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(serializers: com.fasterxml.jackson.databind.SerializerProvider, property: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public _writeAsBinary(g: com.fasterxml.jackson.core.JsonGenerator): boolean;
							public acceptJsonFormatVisitor(param0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, param1: com.fasterxml.jackson.databind.JavaType): void;
							/** @deprecated */
							public isEmpty(value: any): boolean;
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type, param2: boolean): com.fasterxml.jackson.databind.JsonNode;
							public constructor(t: java.lang.Class<any>);
							public serialize(param0: any, param1: com.fasterxml.jackson.core.JsonGenerator, param2: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(type: com.fasterxml.jackson.databind.JavaType);
							public isEmpty(prov: com.fasterxml.jackson.databind.SerializerProvider, value: java.util.UUID): boolean;
							public isEmpty(provider: com.fasterxml.jackson.databind.SerializerProvider, value: any): boolean;
							public constructor(t: java.lang.Class<any>, dummy: boolean);
							public getSchema(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: java.lang.reflect.Type): com.fasterxml.jackson.databind.JsonNode;
							public createContextual(param0: com.fasterxml.jackson.databind.SerializerProvider, param1: com.fasterxml.jackson.databind.BeanProperty): com.fasterxml.jackson.databind.JsonSerializer<any>;
							public acceptJsonFormatVisitor(visitor: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, typeHint: com.fasterxml.jackson.databind.JavaType): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<any>);
							public constructor(asBinary: java.lang.Boolean);
							public serialize(value: java.util.UUID, gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
							public constructor(src: com.fasterxml.jackson.databind.ser.std.StdSerializer<any>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class ArrayType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ArrayType>;
						public _componentType: com.fasterxml.jackson.databind.JavaType;
						public _emptyArray: any;
						/** @deprecated */
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getContentTypeHandler(): any;
						public constructor(componentType: com.fasterxml.jackson.databind.JavaType, bindings: com.fasterxml.jackson.databind.type.TypeBindings, emptyInstance: any, valueHandler: any, typeHandler: any, asStatic: boolean);
						public isAbstract(): boolean;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.ArrayType;
						public refine(contentClass: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public static construct(componentType: com.fasterxml.jackson.databind.JavaType, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.type.ArrayType;
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(): string;
						public getErasedSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public static construct(componentType: com.fasterxml.jackson.databind.JavaType, bindings: com.fasterxml.jackson.databind.type.TypeBindings, valueHandler: any, typeHandler: any): com.fasterxml.jackson.databind.type.ArrayType;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public getEmptyArray(): any[];
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public equals(o: any): boolean;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.ArrayType;
						public isConcrete(): boolean;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public isArrayType(): boolean;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.ArrayType;
						public hasGenericTypes(): boolean;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public toString(): string;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.ArrayType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getContentValueHandler(): any;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public getErasedSignature(): string;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.ArrayType;
						public hasHandlers(): boolean;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class ClassKey extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ClassKey>;
						public constructor();
						public equals(obj: any): boolean;
						public compareTo(other: com.fasterxml.jackson.databind.type.ClassKey): number;
						public hashCode(): number;
						public constructor(clz: java.lang.Class<any>);
						public equals(o: any): boolean;
						public reset(clz: java.lang.Class<any>): void;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class ClassStack extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ClassStack>;
						public _parent: com.fasterxml.jackson.databind.type.ClassStack;
						public _current: java.lang.Class<any>;
						public find(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.type.ClassStack;
						public resolveSelfReferences(resolved: com.fasterxml.jackson.databind.JavaType): void;
						public child(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.type.ClassStack;
						public constructor(rootType: java.lang.Class<any>);
						public addSelfReference(ref: com.fasterxml.jackson.databind.type.ResolvedRecursiveType): void;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class CollectionLikeType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.CollectionLikeType>;
						public _elementType: com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getContentTypeHandler(): any;
						public static upgradeFrom(baseType: com.fasterxml.jackson.databind.JavaType, elementType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(collT: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], elemT: com.fasterxml.jackson.databind.JavaType, valueHandler: any, typeHandler: any, asStatic: boolean);
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(): string;
						public withHandlersFrom(src: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public getErasedSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public equals(o: any): boolean;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public isTrueCollectionType(): boolean;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public getContentValueHandler(): any;
						public isCollectionLikeType(): boolean;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase, elemT: com.fasterxml.jackson.databind.JavaType);
						/** @deprecated */
						public static construct(rawType: java.lang.Class<any>, elemT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public getErasedSignature(): string;
						public buildCanonicalName(): string;
						public static construct(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], elemT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public hasHandlers(): boolean;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class CollectionType extends com.fasterxml.jackson.databind.type.CollectionLikeType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.CollectionType>;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.CollectionType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public static construct(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], elemT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.CollectionType;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.CollectionType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(collT: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], elemT: com.fasterxml.jackson.databind.JavaType, valueHandler: any, typeHandler: any, asStatic: boolean);
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						/** @deprecated */
						public static construct(rawType: java.lang.Class<any>, elemT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionType;
						public toString(): string;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.CollectionType;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public withStaticTyping(): com.fasterxml.jackson.databind.type.CollectionType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase, elemT: com.fasterxml.jackson.databind.JavaType);
						/** @deprecated */
						public static construct(rawType: java.lang.Class<any>, elemT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public static construct(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], elemT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.CollectionLikeType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class LogicalType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.LogicalType>;
						public static Array: com.fasterxml.jackson.databind.type.LogicalType;
						public static Collection: com.fasterxml.jackson.databind.type.LogicalType;
						public static Map: com.fasterxml.jackson.databind.type.LogicalType;
						public static POJO: com.fasterxml.jackson.databind.type.LogicalType;
						public static Untyped: com.fasterxml.jackson.databind.type.LogicalType;
						public static Integer: com.fasterxml.jackson.databind.type.LogicalType;
						public static Float: com.fasterxml.jackson.databind.type.LogicalType;
						public static Boolean: com.fasterxml.jackson.databind.type.LogicalType;
						public static Enum: com.fasterxml.jackson.databind.type.LogicalType;
						public static Textual: com.fasterxml.jackson.databind.type.LogicalType;
						public static Binary: com.fasterxml.jackson.databind.type.LogicalType;
						public static DateTime: com.fasterxml.jackson.databind.type.LogicalType;
						public static OtherScalar: com.fasterxml.jackson.databind.type.LogicalType;
						public static fromClass(raw: java.lang.Class<any>, defaultIfNotRecognized: com.fasterxml.jackson.databind.type.LogicalType): com.fasterxml.jackson.databind.type.LogicalType;
						public static values(): com.fasterxml.jackson.databind.type.LogicalType[];
						public static valueOf(name: string): com.fasterxml.jackson.databind.type.LogicalType;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class MapLikeType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.MapLikeType>;
						public _keyType: com.fasterxml.jackson.databind.JavaType;
						public _valueType: com.fasterxml.jackson.databind.JavaType;
						public getContentTypeHandler(): any;
						public getKeyType(): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public isMapLikeType(): boolean;
						public getGenericSignature(): string;
						public withHandlersFrom(src: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withKeyValueHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public equals(o: any): boolean;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public constructor(mapType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType, valueHandler: any, typeHandler: any, asStatic: boolean);
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getContentValueHandler(): any;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public buildCanonicalName(): string;
						/** @deprecated */
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public static construct(rawType: java.lang.Class<any>, keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public getErasedSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase, keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType);
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withStaticTyping(): com.fasterxml.jackson.databind.type.MapLikeType;
						/** @deprecated */
						public isTrueMapType(): boolean;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static upgradeFrom(baseType: com.fasterxml.jackson.databind.JavaType, keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public withKeyType(keyType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withKeyTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public getErasedSignature(): string;
						public hasHandlers(): boolean;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class MapType extends com.fasterxml.jackson.databind.type.MapLikeType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.MapType>;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.MapType;
						/** @deprecated */
						public static construct(rawType: java.lang.Class<any>, keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public withKeyValueHandler(h: any): com.fasterxml.jackson.databind.type.MapType;
						public static construct(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public withKeyTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapType;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withKeyValueHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase, keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType);
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.MapType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.MapType;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.MapLikeType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(mapType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType, valueHandler: any, typeHandler: any, asStatic: boolean);
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withKeyType(keyType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public withKeyType(keyType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						/** @deprecated */
						public static construct(rawType: java.lang.Class<any>, keyT: com.fasterxml.jackson.databind.JavaType, valueT: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public withKeyTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapLikeType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.MapType;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class PlaceholderForType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.PlaceholderForType>;
						public _ordinal: number;
						public _actualType: com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public getGenericSignature(): string;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public constructor(ordinal: number);
						public getErasedSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public equals(o: any): boolean;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public actualType(t: com.fasterxml.jackson.databind.JavaType): void;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public actualType(): com.fasterxml.jackson.databind.JavaType;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class ReferenceType extends com.fasterxml.jackson.databind.type.SimpleType {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ReferenceType>;
						public _referencedType: com.fasterxml.jackson.databind.JavaType;
						public _anchorType: com.fasterxml.jackson.databind.JavaType;
						public constructor(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[]);
						public constructor(cls: java.lang.Class<any>);
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.ReferenceType;
						public hasContentType(): boolean;
						public getContentType(): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						/** @deprecated */
						public static construct(cls: java.lang.Class<any>, refType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ReferenceType;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.ReferenceType;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.type.ReferenceType;
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(): string;
						public getErasedSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public constructor(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], refType: com.fasterxml.jackson.databind.JavaType, anchorType: com.fasterxml.jackson.databind.JavaType, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public equals(o: any): boolean;
						public getAnchorType(): com.fasterxml.jackson.databind.JavaType;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.SimpleType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase, refType: com.fasterxml.jackson.databind.JavaType);
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.ReferenceType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], extraHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.SimpleType;
						/** @deprecated */
						public static construct(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.type.SimpleType;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.ReferenceType;
						public getReferencedType(): com.fasterxml.jackson.databind.JavaType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public static construct(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], refType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ReferenceType;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.SimpleType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.SimpleType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public isReferenceType(): boolean;
						public getGenericSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public isAnchorType(): boolean;
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
						public static upgradeFrom(baseType: com.fasterxml.jackson.databind.JavaType, refdType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ReferenceType;
						public constructor(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], valueHandler: any, typeHandler: any, asStatic: boolean);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class ResolvedRecursiveType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.ResolvedRecursiveType>;
						public _referencedType: com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public constructor(erasedType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public getGenericSignature(): string;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getSelfReferencedType(): com.fasterxml.jackson.databind.JavaType;
						public getErasedSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public equals(o: any): boolean;
						public setReference(ref: com.fasterxml.jackson.databind.JavaType): void;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public getSuperClass(): com.fasterxml.jackson.databind.JavaType;
						public getBindings(): com.fasterxml.jackson.databind.type.TypeBindings;
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public getErasedSignature(): string;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class SimpleType extends com.fasterxml.jackson.databind.type.TypeBase {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.SimpleType>;
						public constructor(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[]);
						/** @deprecated */
						public _narrow(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public constructor(cls: java.lang.Class<any>);
						public hasContentType(): boolean;
						public equals(param0: any): boolean;
						public withValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						/** @deprecated */
						public _narrow(subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(): string;
						public getErasedSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public withContentType(contentType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public withStaticTyping(): com.fasterxml.jackson.databind.JavaType;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public equals(o: any): boolean;
						public refine(rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public withValueHandler(h: any): com.fasterxml.jackson.databind.type.SimpleType;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public withContentTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public withContentType(param0: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], extraHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public static constructUnsafe(raw: java.lang.Class<any>): com.fasterxml.jackson.databind.type.SimpleType;
						public withContentValueHandler(h: any): com.fasterxml.jackson.databind.type.SimpleType;
						/** @deprecated */
						public static construct(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.type.SimpleType;
						public withContentTypeHandler(h: any): com.fasterxml.jackson.databind.JavaType;
						public toString(): string;
						public withContentValueHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public refine(param0: java.lang.Class<any>, param1: com.fasterxml.jackson.databind.type.TypeBindings, param2: com.fasterxml.jackson.databind.JavaType, param3: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public withTypeHandler(h: any): com.fasterxml.jackson.databind.type.SimpleType;
						public withStaticTyping(): com.fasterxml.jackson.databind.type.SimpleType;
						public withTypeHandler(param0: any): com.fasterxml.jackson.databind.JavaType;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public getGenericSignature(sb: java.lang.StringBuilder): java.lang.StringBuilder;
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
						public constructor(cls: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], valueHandler: any, typeHandler: any, asStatic: boolean);
						public isContainerType(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export abstract class TypeBase extends com.fasterxml.jackson.databind.JavaType implements com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeBase>;
						public _superClass: com.fasterxml.jackson.databind.JavaType;
						public _superInterfaces: com.fasterxml.jackson.databind.JavaType[];
						public _bindings: com.fasterxml.jackson.databind.type.TypeBindings;
						/** @deprecated */
						public containedTypeName(index: number): string;
						public constructor(raw: java.lang.Class<any>, additionalHash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public containedType(index: number): com.fasterxml.jackson.databind.JavaType;
						public findTypeParameters(expType: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType[];
						public static _bogusSuperClass(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						/** @deprecated */
						public containedTypeName(param0: number): string;
						public getGenericSignature(): string;
						public findSuperType(rawTarget: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public serializeWithType(g: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public getGenericSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public constructor(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInts: com.fasterxml.jackson.databind.JavaType[], hash: number, valueHandler: any, typeHandler: any, asStatic: boolean);
						public containedTypeCount(): number;
						public constructor(base: com.fasterxml.jackson.databind.type.TypeBase);
						public getBindings(): com.fasterxml.jackson.databind.type.TypeBindings;
						public getSuperClass(): com.fasterxml.jackson.databind.JavaType;
						public toCanonical(): string;
						public getErasedSignature(param0: java.lang.StringBuilder): java.lang.StringBuilder;
						public getInterfaces(): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public containedType(param0: number): com.fasterxml.jackson.databind.JavaType;
						public _hasNTypeParameters(count: number): boolean;
						public findSuperType(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public findTypeParameters(param0: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType[];
						public static _classSignature(cls: java.lang.Class<any>, sb: java.lang.StringBuilder, trailingSemicolon: boolean): java.lang.StringBuilder;
						public constructor(base: com.fasterxml.jackson.databind.JavaType);
						public buildCanonicalName(): string;
						public getErasedSignature(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class TypeBindings extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeBindings>;
						public static create(erasedType: java.lang.Class<any>, typeList: java.util.List<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.type.TypeBindings;
						public static create(erasedType: java.lang.Class<any>, typeArg1: com.fasterxml.jackson.databind.JavaType, typeArg2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.TypeBindings;
						public equals(obj: any): boolean;
						public static createIfNeeded(erasedType: java.lang.Class<any>, types: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.type.TypeBindings;
						public hashCode(): number;
						public static createIfNeeded(erasedType: java.lang.Class<any>, typeArg1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.TypeBindings;
						public readResolve(): any;
						public toString(): string;
						public static create(erasedType: java.lang.Class<any>, typeArg1: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.TypeBindings;
						public withUnboundVariable(name: string): com.fasterxml.jackson.databind.type.TypeBindings;
						public hasUnbound(name: string): boolean;
						public findBoundType(name: string): com.fasterxml.jackson.databind.JavaType;
						public static emptyBindings(): com.fasterxml.jackson.databind.type.TypeBindings;
						public getTypeParameters(): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public typeParameterArray(): com.fasterxml.jackson.databind.JavaType[];
						public getBoundType(index: number): com.fasterxml.jackson.databind.JavaType;
						public isEmpty(): boolean;
						public getBoundName(index: number): string;
						public equals(o: any): boolean;
						public static create(names: java.util.List<string>, types: java.util.List<com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.type.TypeBindings;
						public size(): number;
						public static create(erasedType: java.lang.Class<any>, types: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.type.TypeBindings;
						public asKey(rawBase: java.lang.Class<any>): any;
					}
					export module TypeBindings {
						export class AsKey extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeBindings.AsKey>;
							public hashCode(): number;
							public constructor(raw: java.lang.Class<any>, params: com.fasterxml.jackson.databind.JavaType[], hash: number);
							public equals(obj: any): boolean;
							public equals(o: any): boolean;
							public toString(): string;
						}
						export class TypeParamStash extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash>;
							public static paramsFor2(erasedType: java.lang.Class<any>): java.lang.reflect.TypeVariable<any>[];
							public static paramsFor1(erasedType: java.lang.Class<any>): java.lang.reflect.TypeVariable<any>[];
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class TypeFactory extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeFactory>;
						public static instance: com.fasterxml.jackson.databind.type.TypeFactory;
						public static EMPTY_BINDINGS: com.fasterxml.jackson.databind.type.TypeBindings;
						public static CORE_TYPE_BOOL: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_INT: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_LONG: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_STRING: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_OBJECT: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_COMPARABLE: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_ENUM: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_CLASS: com.fasterxml.jackson.databind.type.SimpleType;
						public static CORE_TYPE_JSON_NODE: com.fasterxml.jackson.databind.type.SimpleType;
						public _typeCache: com.fasterxml.jackson.databind.util.LookupCache<any,com.fasterxml.jackson.databind.JavaType>;
						public _modifiers: com.fasterxml.jackson.databind.type.TypeModifier[];
						public _parser: com.fasterxml.jackson.databind.type.TypeParser;
						public _classLoader: java.lang.ClassLoader;
						public _fromVariable(context: com.fasterxml.jackson.databind.type.ClassStack, var: java.lang.reflect.TypeVariable<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public withClassLoader(classLoader: java.lang.ClassLoader): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructor(typeCache: com.fasterxml.jackson.databind.util.LookupCache<any,com.fasterxml.jackson.databind.JavaType>);
						public withCache(cache: com.fasterxml.jackson.databind.util.LookupCache<any,com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructSimpleType(rawType: java.lang.Class<any>, parameterTypes: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public _findPrimitive(className: string): java.lang.Class<any>;
						public constructRawMapType(mapClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapType;
						/** @deprecated */
						public constructType(type: java.lang.reflect.Type, contextType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public _fromArrayType(context: com.fasterxml.jackson.databind.type.ClassStack, type: java.lang.reflect.GenericArrayType, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public moreSpecificType(type1: com.fasterxml.jackson.databind.JavaType, type2: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public constructMapLikeType(mapClass: java.lang.Class<any>, keyClass: java.lang.Class<any>, valueClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapLikeType;
						public constructCollectionType(collectionClass: java.lang.Class<any>, elementClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionType;
						public static rawClass(t: java.lang.reflect.Type): java.lang.Class<any>;
						public constructFromCanonical(canonical: string): com.fasterxml.jackson.databind.JavaType;
						public withModifier(mod: com.fasterxml.jackson.databind.type.TypeModifier): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructCollectionLikeType(collectionClass: java.lang.Class<any>, elementClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public constructRawCollectionType(collectionClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionType;
						public constructParametricType(parametrized: java.lang.Class<any>, ...parameterClasses: java.lang.Class<any>[]): com.fasterxml.jackson.databind.JavaType;
						public findClass(className: string): java.lang.Class<any>;
						public constructParametricType(rawType: java.lang.Class<any>, ...parameterTypes: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public _fromAny(context: com.fasterxml.jackson.databind.type.ClassStack, srcType: java.lang.reflect.Type, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public findTypeParameters(type: com.fasterxml.jackson.databind.JavaType, expType: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType[];
						public _fromClass(context: com.fasterxml.jackson.databind.type.ClassStack, rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public static unknownType(): com.fasterxml.jackson.databind.JavaType;
						public constructMapType(mapClass: java.lang.Class<any>, keyClass: java.lang.Class<any>, valueClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapType;
						/** @deprecated */
						public constructor(typeCache: com.fasterxml.jackson.databind.util.LRUMap<any,com.fasterxml.jackson.databind.JavaType>);
						/** @deprecated */
						public withCache(cache: com.fasterxml.jackson.databind.util.LRUMap<any,com.fasterxml.jackson.databind.JavaType>): com.fasterxml.jackson.databind.type.TypeFactory;
						public _fromWildcard(context: com.fasterxml.jackson.databind.type.ClassStack, type: java.lang.reflect.WildcardType, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public constructArrayType(elementType: java.lang.Class<any>): com.fasterxml.jackson.databind.type.ArrayType;
						public constructMapType(mapClass: java.lang.Class<any>, keyType: com.fasterxml.jackson.databind.JavaType, valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapType;
						public _fromWellKnownClass(context: com.fasterxml.jackson.databind.type.ClassStack, rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public constructParametrizedType(parametrized: java.lang.Class<any>, parametersFor: java.lang.Class<any>, ...parameterTypes: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public resolveMemberType(type: java.lang.reflect.Type, contextBindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public constructSpecializedType(baseType: com.fasterxml.jackson.databind.JavaType, subclass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public uncheckedSimpleType(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public constructSpecializedType(baseType: com.fasterxml.jackson.databind.JavaType, subclass: java.lang.Class<any>, relaxedCompatibilityCheck: boolean): com.fasterxml.jackson.databind.JavaType;
						public constructType(typeRef: com.fasterxml.jackson.core.type.TypeReference<any>): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public constructParametrizedType(parametrized: java.lang.Class<any>, parametersFor: java.lang.Class<any>, ...parameterClasses: java.lang.Class<any>[]): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public constructType(type: java.lang.reflect.Type, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public findTypeParameters(clz: java.lang.Class<any>, expType: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType[];
						public constructCollectionType(collectionClass: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionType;
						public constructCollectionLikeType(collectionClass: java.lang.Class<any>, elementType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public _resolveSuperInterfaces(context: com.fasterxml.jackson.databind.type.ClassStack, rawType: java.lang.Class<any>, parentBindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType[];
						public constructor(typeCache: com.fasterxml.jackson.databind.util.LookupCache<any,com.fasterxml.jackson.databind.JavaType>, p: com.fasterxml.jackson.databind.type.TypeParser, mods: com.fasterxml.jackson.databind.type.TypeModifier[], classLoader: java.lang.ClassLoader);
						public _findWellKnownSimple(clz: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						public _newSimpleType(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public constructReferenceType(rawType: java.lang.Class<any>, referredType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						public constructRawMapLikeType(mapClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.MapLikeType;
						public _constructSimple(raw: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public constructor(typeCache: com.fasterxml.jackson.databind.util.LRUMap<any,com.fasterxml.jackson.databind.JavaType>, p: com.fasterxml.jackson.databind.type.TypeParser, mods: com.fasterxml.jackson.databind.type.TypeModifier[], classLoader: java.lang.ClassLoader);
						public classForName(name: string, initialize: boolean, loader: java.lang.ClassLoader): java.lang.Class<any>;
						public _unknownType(): com.fasterxml.jackson.databind.JavaType;
						public constructGeneralizedType(baseType: com.fasterxml.jackson.databind.JavaType, superClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public constructType(type: java.lang.reflect.Type, contextClass: java.lang.Class<any>): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public constructSimpleType(rawType: java.lang.Class<any>, parameterTarget: java.lang.Class<any>, parameterTypes: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public getClassLoader(): java.lang.ClassLoader;
						public _applyModifiers(srcType: java.lang.reflect.Type, resolvedType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.JavaType;
						/** @deprecated */
						public findTypeParameters(clz: java.lang.Class<any>, expType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType[];
						public constructMapLikeType(mapClass: java.lang.Class<any>, keyType: com.fasterxml.jackson.databind.JavaType, valueType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.MapLikeType;
						public _fromWellKnownInterface(context: com.fasterxml.jackson.databind.type.ClassStack, rawType: java.lang.Class<any>, bindings: com.fasterxml.jackson.databind.type.TypeBindings, superClass: com.fasterxml.jackson.databind.JavaType, superInterfaces: com.fasterxml.jackson.databind.JavaType[]): com.fasterxml.jackson.databind.JavaType;
						public constructRawCollectionLikeType(collectionClass: java.lang.Class<any>): com.fasterxml.jackson.databind.type.CollectionLikeType;
						public static defaultInstance(): com.fasterxml.jackson.databind.type.TypeFactory;
						public constructType(type: java.lang.reflect.Type): com.fasterxml.jackson.databind.JavaType;
						public constructArrayType(elementType: com.fasterxml.jackson.databind.JavaType): com.fasterxml.jackson.databind.type.ArrayType;
						public _resolveSuperClass(context: com.fasterxml.jackson.databind.type.ClassStack, rawType: java.lang.Class<any>, parentBindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public _fromParamType(context: com.fasterxml.jackson.databind.type.ClassStack, ptype: java.lang.reflect.ParameterizedType, parentBindings: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
						public clearCache(): void;
						public classForName(name: string): java.lang.Class<any>;
						public constructParametricType(rawType: java.lang.Class<any>, parameterTypes: com.fasterxml.jackson.databind.type.TypeBindings): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export abstract class TypeModifier extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeModifier>;
						public constructor();
						public modifyType(param0: com.fasterxml.jackson.databind.JavaType, param1: java.lang.reflect.Type, param2: com.fasterxml.jackson.databind.type.TypeBindings, param3: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module type {
					export class TypeParser extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeParser>;
						public _factory: com.fasterxml.jackson.databind.type.TypeFactory;
						public parseTypes(tokens: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						public parseType(tokens: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer): com.fasterxml.jackson.databind.JavaType;
						public parse(canonical: string): com.fasterxml.jackson.databind.JavaType;
						public withFactory(f: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.type.TypeParser;
						public constructor(f: com.fasterxml.jackson.databind.type.TypeFactory);
						public findClass(className: string, tokens: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer): java.lang.Class<any>;
						public _problem(tokens: com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer, msg: string): java.lang.IllegalArgumentException;
					}
					export module TypeParser {
						export class MyTokenizer extends java.util.StringTokenizer {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer>;
							public _input: string;
							public _index: number;
							public _pushbackToken: string;
							public hasMoreElements(): boolean;
							public nextToken(delim: string): string;
							public constructor(str: string);
							public pushBack(token: string): void;
							public hasMoreTokens(): boolean;
							public getAllInput(): string;
							public constructor(str: string, delim: string, returnDelims: boolean);
							public nextToken(): string;
							public nextElement(): any;
							public constructor(str: string, delim: string);
							public getRemainingInput(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class AccessPattern {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.AccessPattern>;
						public static ALWAYS_NULL: com.fasterxml.jackson.databind.util.AccessPattern;
						public static CONSTANT: com.fasterxml.jackson.databind.util.AccessPattern;
						public static DYNAMIC: com.fasterxml.jackson.databind.util.AccessPattern;
						public static values(): com.fasterxml.jackson.databind.util.AccessPattern[];
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.fasterxml.jackson.databind.util.AccessPattern;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class Annotations extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Annotations>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.util.Annotations interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							get(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
							has(param0: java.lang.Class<any>): boolean;
							hasOneOf(param0: java.lang.Class<any>[]): boolean;
							size(): number;
						});
						public constructor();
						public has(param0: java.lang.Class<any>): boolean;
						public get(param0: java.lang.Class<any>): java.lang.annotation.Annotation;
						public hasOneOf(param0: java.lang.Class<any>[]): boolean;
						public size(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ArrayBuilders extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders>;
						public constructor();
						public getDoubleBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.DoubleBuilder;
						public getShortBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.ShortBuilder;
						public getIntBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.IntBuilder;
						public getLongBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.LongBuilder;
						public static insertInListNoDup(array: any[], element: any): any[];
						public static arrayToSet(elements: any[]): java.util.HashSet<any>;
						public getFloatBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.FloatBuilder;
						public getByteBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.ByteBuilder;
						public static getArrayComparator(defaultValue: any): any;
						public getBooleanBuilder(): com.fasterxml.jackson.databind.util.ArrayBuilders.BooleanBuilder;
					}
					export module ArrayBuilders {
						export class BooleanBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<boolean[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.BooleanBuilder>;
							public constructor();
							public _constructArray(param0: number): any;
							public _constructArray(len: number): boolean[];
						}
						export class ByteBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<number[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.ByteBuilder>;
							public constructor();
							public _constructArray(len: number): number[];
							public _constructArray(param0: number): any;
						}
						export class DoubleBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<number[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.DoubleBuilder>;
							public constructor();
							public _constructArray(len: number): number[];
							public _constructArray(param0: number): any;
						}
						export class FloatBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<number[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.FloatBuilder>;
							public constructor();
							public _constructArray(len: number): number[];
							public _constructArray(param0: number): any;
						}
						export class IntBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<number[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.IntBuilder>;
							public constructor();
							public _constructArray(len: number): number[];
							public _constructArray(param0: number): any;
						}
						export class LongBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<number[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.LongBuilder>;
							public constructor();
							public _constructArray(len: number): number[];
							public _constructArray(param0: number): any;
						}
						export class ShortBuilder extends com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<number[]> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayBuilders.ShortBuilder>;
							public constructor();
							public _constructArray(len: number): number[];
							public _constructArray(param0: number): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ArrayIterator<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ArrayIterator<any>>;
						public spliterator(): java.util.Spliterator<T>;
						public iterator(): java.util.Iterator<T>;
						public hasNext(): boolean;
						public next(): T;
						public forEach(action: any /* any*/): void;
						public constructor(a: T[]);
						public remove(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class BeanUtil extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.BeanUtil>;
						public static checkUnsupportedType(type: com.fasterxml.jackson.databind.JavaType): string;
						public static isJodaTimeClass(rawType: java.lang.Class<any>): boolean;
						public constructor();
						public static isCglibGetCallbacks(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						public static legacyManglePropertyName(basename: string, offset: number): string;
						/** @deprecated */
						public static okNameForRegularGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string, stdNaming: boolean): string;
						public static getDefaultValue(type: com.fasterxml.jackson.databind.JavaType): any;
						public static isGroovyMetaClassGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod): boolean;
						/** @deprecated */
						public static okNameForSetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, stdNaming: boolean): string;
						/** @deprecated */
						public static okNameForMutator(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, prefix: string, stdNaming: boolean): string;
						/** @deprecated */
						public static okNameForIsGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, name: string, stdNaming: boolean): string;
						/** @deprecated */
						public static okNameForGetter(am: com.fasterxml.jackson.databind.introspect.AnnotatedMethod, stdNaming: boolean): string;
						public static isJava8TimeClass(rawType: java.lang.Class<any>): boolean;
						public static stdManglePropertyName(basename: string, offset: number): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ByteBufferBackedInputStream extends java.io.InputStream {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream>;
						public _b: java.nio.ByteBuffer;
						public read(): number;
						public constructor();
						public close(): void;
						public read(b: number[], off: number, len: number): number;
						public read(bytes: number[], off: number, len: number): number;
						public constructor(buf: java.nio.ByteBuffer);
						public read(b: number[]): number;
						public available(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ByteBufferBackedOutputStream extends java.io.OutputStream {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ByteBufferBackedOutputStream>;
						public _b: java.nio.ByteBuffer;
						public write(b: number[]): void;
						public constructor();
						public close(): void;
						public write(param0: number): void;
						public constructor(buf: java.nio.ByteBuffer);
						public write(bytes: number[], off: number, len: number): void;
						public write(b: number): void;
						public flush(): void;
						public write(b: number[], off: number, len: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ClassUtil extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil>;
						public static findFirstAnnotatedEnumValue(enumClass: java.lang.Class<any>, annotationClass: java.lang.Class<any>): java.lang.Enum<any>;
						public static findEnumType(cls: java.lang.Class<any>): java.lang.Class<any>;
						public static getGenericInterfaces(cls: java.lang.Class<any>): java.lang.reflect.Type[];
						public static findSuperTypes(type: com.fasterxml.jackson.databind.JavaType, endBefore: java.lang.Class<any>, addClassItself: boolean): java.util.List<com.fasterxml.jackson.databind.JavaType>;
						/** @deprecated */
						public static findSuperTypes(cls: java.lang.Class<any>, endBefore: java.lang.Class<any>): java.util.List<java.lang.Class<any>>;
						public static hasClass(inst: any, raw: java.lang.Class<any>): boolean;
						public static getEnclosingClass(cls: java.lang.Class<any>): java.lang.Class<any>;
						public static classNameOf(inst: any): string;
						public static getGenericSuperclass(cls: java.lang.Class<any>): java.lang.reflect.Type;
						public static getTypeDescription(fullType: com.fasterxml.jackson.databind.JavaType): string;
						public static defaultValue(cls: java.lang.Class<any>): any;
						public static throwRootCauseIfIOE(t: java.lang.Throwable): java.lang.Throwable;
						public static name(name: string): string;
						public static name(name: com.fasterxml.jackson.databind.PropertyName): string;
						public static findRawSuperTypes(cls: java.lang.Class<any>, endBefore: java.lang.Class<any>, addClassItself: boolean): java.util.List<java.lang.Class<any>>;
						public static backticked(text: string): string;
						public static getRootCause(t: java.lang.Throwable): java.lang.Throwable;
						public static nonNull(valueOrNull: any, defaultValue: any): any;
						public static primitiveType(type: java.lang.Class<any>): java.lang.Class<any>;
						public static throwAsMappingException(ctxt: com.fasterxml.jackson.databind.DeserializationContext, e0: java.io.IOException): any;
						public static canBeABeanType(type: java.lang.Class<any>): string;
						public static findEnumType(s: java.util.EnumSet<any>): java.lang.Class<any>;
						public static quotedOr(str: any, forNull: string): string;
						public static isConcrete(type: java.lang.Class<any>): boolean;
						public static isRecordType(cls: java.lang.Class<any>): boolean;
						public constructor();
						public static nonNullString(str: string): string;
						public static isNonStaticInnerClass(cls: java.lang.Class<any>): boolean;
						public static getClassDescription(classOrInstance: any): string;
						public static getConstructors(cls: java.lang.Class<any>): com.fasterxml.jackson.databind.util.ClassUtil.Ctor[];
						public static throwIfIOE(t: java.lang.Throwable): java.lang.Throwable;
						public static unwrapAndThrowAsIAE(t: java.lang.Throwable): void;
						public static closeOnFailAndThrowAsIOE(g: com.fasterxml.jackson.core.JsonGenerator, fail: java.lang.Exception): void;
						public static throwAsIAE(t: java.lang.Throwable, msg: string): void;
						public static exceptionMessage(t: java.lang.Throwable): string;
						public static closeOnFailAndThrowAsIOE(g: com.fasterxml.jackson.core.JsonGenerator, toClose: java.io.Closeable, fail: java.lang.Exception): void;
						public static hasEnclosingMethod(cls: java.lang.Class<any>): boolean;
						/** @deprecated */
						public static getDeclaredFields(cls: java.lang.Class<any>): java.lang.reflect.Field[];
						public static isObjectOrPrimitive(cls: java.lang.Class<any>): boolean;
						public static throwAsIAE(t: java.lang.Throwable): void;
						public static findClassAnnotations(cls: java.lang.Class<any>): java.lang.annotation.Annotation[];
						public static unwrapAndThrowAsIAE(t: java.lang.Throwable, msg: string): void;
						public static findEnumType(m: java.util.EnumMap<any,any>): java.lang.Class<any>;
						public static getOuterClass(type: java.lang.Class<any>): java.lang.Class<any>;
						public static throwIfError(t: java.lang.Throwable): java.lang.Throwable;
						/** @deprecated */
						public static checkAndFixAccess(member: java.lang.reflect.Member): void;
						public static getDeclaringClass(cls: java.lang.Class<any>): java.lang.Class<any>;
						public static nullOrToString(value: any): string;
						public static wrapperType(primitiveType: java.lang.Class<any>): java.lang.Class<any>;
						public static findEnumType(en: java.lang.Enum<any>): java.lang.Class<any>;
						public static isConcrete(member: java.lang.reflect.Member): boolean;
						public static isEnumType(rawType: java.lang.Class<any>): boolean;
						public static createInstance(cls: java.lang.Class<any>, canFixAccess: boolean): any;
						public static nameOf(named: com.fasterxml.jackson.databind.util.Named): string;
						public static getClassMethods(cls: java.lang.Class<any>): java.lang.reflect.Method[];
						public static isCollectionMapOrArray(type: java.lang.Class<any>): boolean;
						public static nameOf(cls: java.lang.Class<any>): string;
						/** @deprecated */
						public static getPackageName(cls: java.lang.Class<any>): string;
						public static isBogusClass(cls: java.lang.Class<any>): boolean;
						public static isJacksonStdImpl(impl: any): boolean;
						/** @deprecated */
						public static hasGetterSignature(m: java.lang.reflect.Method): boolean;
						public static rawClass(t: com.fasterxml.jackson.databind.JavaType): java.lang.Class<any>;
						public static isProxyType(type: java.lang.Class<any>): boolean;
						public static isJacksonStdImpl(implClass: java.lang.Class<any>): boolean;
						public static apostrophed(text: string): string;
						public static emptyIterator(): java.util.Iterator<any>;
						public static verifyMustOverride(expType: java.lang.Class<any>, instance: any, method: string): void;
						public static isJDKClass(rawType: java.lang.Class<any>): boolean;
						public static classOf(inst: any): java.lang.Class<any>;
						public static findSuperClasses(cls: java.lang.Class<any>, endBefore: java.lang.Class<any>, addClassItself: boolean): java.util.List<java.lang.Class<any>>;
						/** @deprecated */
						public static getDeclaredMethods(cls: java.lang.Class<any>): java.lang.reflect.Method[];
						public static findConstructor(cls: java.lang.Class<any>, forceAccess: boolean): java.lang.reflect.Constructor<any>;
						/** @deprecated */
						public static findSuperTypes(cls: java.lang.Class<any>, endBefore: java.lang.Class<any>, result: java.util.List<java.lang.Class<any>>): java.util.List<java.lang.Class<any>>;
						public static isLocalType(type: java.lang.Class<any>, allowNonStatic: boolean): string;
						public static throwIfRTE(t: java.lang.Throwable): java.lang.Throwable;
						public static checkAndFixAccess(member: java.lang.reflect.Member, evenIfAlreadyPublic: boolean): void;
					}
					export module ClassUtil {
						export class Ctor extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil.Ctor>;
							public _ctor: java.lang.reflect.Constructor<any>;
							public getDeclaredAnnotations(): java.lang.annotation.Annotation[];
							public getConstructor(): java.lang.reflect.Constructor<any>;
							public getParameterAnnotations(): java.lang.annotation.Annotation[][];
							public constructor(ctor: java.lang.reflect.Constructor<any>);
							public getParamCount(): number;
							public getDeclaringClass(): java.lang.Class<any>;
						}
						export class EnumTypeLocator extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ClassUtil.EnumTypeLocator>;
							public enumTypeFor(set: java.util.EnumSet<any>): java.lang.Class<any>;
							public enumTypeFor(set: java.util.EnumMap<any,any>): java.lang.Class<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class CompactStringObjectMap extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.CompactStringObjectMap>;
						public findCaseInsensitive(key: string): any;
						public static construct(all: java.util.Map<any,any>): com.fasterxml.jackson.databind.util.CompactStringObjectMap;
						public find(key: string): any;
						public keys(): java.util.List<string>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class Converter<IN, OUT>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Converter<any,any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.util.Converter<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							convert(param0: IN): OUT;
							getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						});
						public constructor();
						public getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public convert(param0: IN): OUT;
					}
					export module Converter {
						export abstract class None extends com.fasterxml.jackson.databind.util.Converter<any,any> {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Converter.None>;
							public constructor();
							public getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							public getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
							public convert(param0: any): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class EnumResolver extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.EnumResolver>;
						public _enums: java.lang.Enum<any>[];
						public _enumsById: java.util.HashMap<string,java.lang.Enum<any>>;
						public _defaultValue: java.lang.Enum<any>;
						public _isIgnoreCase: boolean;
						public _isFromIntValue: boolean;
						public static constructUsingMethod(config: com.fasterxml.jackson.databind.DeserializationConfig, enumCls: java.lang.Class<any>, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.EnumResolver;
						/** @deprecated */
						public static constructFor(enumCls: java.lang.Class<java.lang.Enum<any>>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
						/** @deprecated */
						public static constructUsingToString(enumCls: java.lang.Class<java.lang.Enum<any>>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
						public getRawEnums(): java.lang.Enum<any>[];
						/** @deprecated */
						public static constructUnsafeUsingMethod(rawEnumCls: java.lang.Class<any>, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
						public getEnums(): java.util.List<java.lang.Enum<any>>;
						public constructor(enumClass: java.lang.Class<java.lang.Enum<any>>, enums: java.lang.Enum<any>[], map: java.util.HashMap<string,java.lang.Enum<any>>, defaultValue: java.lang.Enum<any>, isIgnoreCase: boolean, isFromIntValue: boolean);
						public static _enumClass(enumCls0: java.lang.Class<any>): java.lang.Class<java.lang.Enum<any>>;
						public getDefaultValue(): java.lang.Enum<any>;
						public _findEnumCaseInsensitive(key: string): java.lang.Enum<any>;
						/** @deprecated */
						public constructor(enumClass: java.lang.Class<java.lang.Enum<any>>, enums: java.lang.Enum<any>[], map: java.util.HashMap<string,java.lang.Enum<any>>, defaultValue: java.lang.Enum<any>, isIgnoreCase: boolean);
						public static constructUsingToString(config: com.fasterxml.jackson.databind.DeserializationConfig, enumCls: java.lang.Class<any>): com.fasterxml.jackson.databind.util.EnumResolver;
						public static _enumDefault(intr: com.fasterxml.jackson.databind.AnnotationIntrospector, enumCls: java.lang.Class<any>): java.lang.Enum<any>;
						/** @deprecated */
						public static constructUnsafeUsingToString(rawEnumCls: java.lang.Class<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
						public constructLookup(): com.fasterxml.jackson.databind.util.CompactStringObjectMap;
						public static constructFor(config: com.fasterxml.jackson.databind.DeserializationConfig, enumCls: java.lang.Class<any>): com.fasterxml.jackson.databind.util.EnumResolver;
						public static _constructFor(enumCls0: java.lang.Class<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, isIgnoreCase: boolean): com.fasterxml.jackson.databind.util.EnumResolver;
						public getEnumClass(): java.lang.Class<java.lang.Enum<any>>;
						public lastValidIndex(): number;
						/** @deprecated */
						public constructor(enumClass: java.lang.Class<java.lang.Enum<any>>, enums: java.lang.Enum<any>[], map: java.util.HashMap<string,java.lang.Enum<any>>, defaultValue: java.lang.Enum<any>);
						public findEnum(key: string): java.lang.Enum<any>;
						public isFromIntValue(): boolean;
						/** @deprecated */
						public static constructUsingToString(enumCls: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumResolver;
						public static _constructUsingMethod(enumCls0: java.lang.Class<any>, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, isIgnoreCase: boolean): com.fasterxml.jackson.databind.util.EnumResolver;
						public static _constructUsingToString(enumCls0: java.lang.Class<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector, isIgnoreCase: boolean): com.fasterxml.jackson.databind.util.EnumResolver;
						/** @deprecated */
						public static constructUnsafe(rawEnumCls: java.lang.Class<any>, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
						public static _isIntType(erasedType: java.lang.Class<any>): boolean;
						public getEnum(index: number): java.lang.Enum<any>;
						public getEnumIds(): java.util.Collection<string>;
						public static _enumConstants(enumCls: java.lang.Class<any>): java.lang.Enum<any>[];
						/** @deprecated */
						public static constructUsingMethod(enumCls: java.lang.Class<java.lang.Enum<any>>, accessor: com.fasterxml.jackson.databind.introspect.AnnotatedMember, ai: com.fasterxml.jackson.databind.AnnotationIntrospector): com.fasterxml.jackson.databind.util.EnumResolver;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class EnumValues extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.EnumValues>;
						public static construct(config: com.fasterxml.jackson.databind.SerializationConfig, enumClass: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumValues;
						public static construct(enumClass: java.lang.Class<java.lang.Enum<any>>, externalValues: com.fasterxml.jackson.core.SerializableString[]): com.fasterxml.jackson.databind.util.EnumValues;
						public serializedValueFor(key: java.lang.Enum<any>): com.fasterxml.jackson.core.SerializableString;
						public enums(): java.util.List<java.lang.Enum<any>>;
						public static constructFromName(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, enumClass: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumValues;
						public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, enumClass: java.lang.Class<java.lang.Enum<any>>, externalValues: java.util.List<string>): com.fasterxml.jackson.databind.util.EnumValues;
						public static constructFromToString(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, enumClass: java.lang.Class<java.lang.Enum<any>>): com.fasterxml.jackson.databind.util.EnumValues;
						public values(): java.util.Collection<com.fasterxml.jackson.core.SerializableString>;
						public internalMap(): java.util.EnumMap<any,com.fasterxml.jackson.core.SerializableString>;
						public getEnumClass(): java.lang.Class<java.lang.Enum<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ISO8601DateFormat extends java.text.DateFormat {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ISO8601DateFormat>;
						public format(date: java.util.Date): string;
						public parse(param0: string, param1: java.text.ParsePosition): java.util.Date;
						public format(obj: any, toAppendTo: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition): java.lang.StringBuffer;
						public format(param0: java.util.Date, param1: java.lang.StringBuffer, param2: java.text.FieldPosition): java.lang.StringBuffer;
						public constructor();
						public format(date: java.util.Date, toAppendTo: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition): java.lang.StringBuffer;
						public clone(): any;
						public format(obj: any): string;
						public parse(source: string, pos: java.text.ParsePosition): java.util.Date;
						public parse(source: string): java.util.Date;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ISO8601Utils extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ISO8601Utils>;
						public static DEF_8601_LEN: number;
						public constructor();
						/** @deprecated */
						public static format(date: java.util.Date, millis: boolean, tz: java.util.TimeZone): string;
						public static format(date: java.util.Date, millis: boolean): string;
						public static format(date: java.util.Date): string;
						public static parse(date: string, pos: java.text.ParsePosition): java.util.Date;
						public static format(date: java.util.Date, millis: boolean, tz: java.util.TimeZone, loc: java.util.Locale): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class IgnorePropertiesUtil extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.IgnorePropertiesUtil>;
						public static buildCheckerIfNeeded(toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>): com.fasterxml.jackson.databind.util.IgnorePropertiesUtil.Checker;
						public constructor();
						public static combineNamesToInclude(prevToInclude: java.util.Set<string>, newToInclude: java.util.Set<string>): java.util.Set<string>;
						public static shouldIgnore(value: any, toIgnore: java.util.Collection<string>, toInclude: java.util.Collection<string>): boolean;
					}
					export module IgnorePropertiesUtil {
						export class Checker extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.IgnorePropertiesUtil.Checker>;
							public static construct(toIgnore: java.util.Set<string>, toInclude: java.util.Set<string>): com.fasterxml.jackson.databind.util.IgnorePropertiesUtil.Checker;
							public shouldIgnore(propertyName: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class JSONPObject extends java.lang.Object implements com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.JSONPObject>;
						public _function: string;
						public _value: any;
						public _serializationType: com.fasterxml.jackson.databind.JavaType;
						public constructor(_function_: string, value: any);
						public constructor(_function_: string, value: any, asType: com.fasterxml.jackson.databind.JavaType);
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getValue(): any;
						public getSerializationType(): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getFunction(): string;
						public serializeWithType(gen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class JSONWrappedObject extends java.lang.Object implements com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.JSONWrappedObject>;
						public _prefix: string;
						public _suffix: string;
						public _value: any;
						public _serializationType: com.fasterxml.jackson.databind.JavaType;
						public constructor(prefix: string, suffix: string, value: any, asType: com.fasterxml.jackson.databind.JavaType);
						public serialize(jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(prefix: string, suffix: string, value: any);
						public getSuffix(): string;
						public getValue(): any;
						public getSerializationType(): com.fasterxml.jackson.databind.JavaType;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public getPrefix(): string;
						public serializeWithType(jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class LRUMap<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.LRUMap<any,any>>;
						public _maxEntries: number;
						public _map: java.util.concurrent.ConcurrentHashMap<K,V>;
						public _jdkSerializeMaxEntries: number;
						public put(key: K, value: V): V;
						public get(key: any): V;
						public putIfAbsent(key: K, value: V): V;
						public clear(): void;
						public size(): number;
						public readResolve(): any;
						public get(param0: any): V;
						public putIfAbsent(param0: K, param1: V): V;
						public constructor(initialEntries: number, maxEntries: number);
						public put(param0: K, param1: V): V;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class LinkedNode<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.LinkedNode<any>>;
						public static contains(node: com.fasterxml.jackson.databind.util.LinkedNode<any>, value: any): boolean;
						public constructor(value: T, next: com.fasterxml.jackson.databind.util.LinkedNode<T>);
						public value(): T;
						public next(): com.fasterxml.jackson.databind.util.LinkedNode<T>;
						public linkNext(n: com.fasterxml.jackson.databind.util.LinkedNode<T>): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class LookupCache<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.LookupCache<any,any>>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.util.LookupCache<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							size(): number;
							get(param0: any): V;
							put(param0: K, param1: V): V;
							putIfAbsent(param0: K, param1: V): V;
							clear(): void;
						});
						public constructor();
						public clear(): void;
						public size(): number;
						public get(param0: any): V;
						public putIfAbsent(param0: K, param1: V): V;
						public put(param0: K, param1: V): V;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export abstract class NameTransformer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.NameTransformer>;
						public static NOP: com.fasterxml.jackson.databind.util.NameTransformer;
						public constructor();
						public reverse(param0: string): string;
						public static simpleTransformer(prefix: string, suffix: string): com.fasterxml.jackson.databind.util.NameTransformer;
						public static chainedTransformer(t1: com.fasterxml.jackson.databind.util.NameTransformer, t2: com.fasterxml.jackson.databind.util.NameTransformer): com.fasterxml.jackson.databind.util.NameTransformer;
						public transform(param0: string): string;
					}
					export module NameTransformer {
						export class Chained extends com.fasterxml.jackson.databind.util.NameTransformer implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.NameTransformer.Chained>;
							public _t1: com.fasterxml.jackson.databind.util.NameTransformer;
							public _t2: com.fasterxml.jackson.databind.util.NameTransformer;
							public constructor();
							public reverse(param0: string): string;
							public constructor(t1: com.fasterxml.jackson.databind.util.NameTransformer, t2: com.fasterxml.jackson.databind.util.NameTransformer);
							public toString(): string;
							public transform(param0: string): string;
							public reverse(transformed: string): string;
							public transform(name: string): string;
						}
						export class NopTransformer extends com.fasterxml.jackson.databind.util.NameTransformer implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.NameTransformer.NopTransformer>;
							public constructor();
							public reverse(param0: string): string;
							public transform(param0: string): string;
							public reverse(transformed: string): string;
							public transform(name: string): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class Named extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.Named>;
						/**
						 * Constructs a new instance of the com.fasterxml.jackson.databind.util.Named interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getName(): string;
						});
						public constructor();
						public getName(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ObjectBuffer extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ObjectBuffer>;
						public completeAndClearBuffer(lastChunk: any[], lastChunkEntries: number, componentType: java.lang.Class<any>): any[];
						public _copyTo(resultArray: any, totalSize: number, lastChunk: any[], lastChunkEntries: number): void;
						public constructor();
						public bufferedSize(): number;
						public resetAndStart(): any[];
						public _reset(): void;
						public appendCompletedChunk(fullChunk: any[]): any[];
						public completeAndClearBuffer(lastChunk: any[], lastChunkEntries: number, resultList: java.util.List<any>): void;
						public initialCapacity(): number;
						public resetAndStart(base: any[], count: number): any[];
						public completeAndClearBuffer(lastChunk: any[], lastChunkEntries: number): any[];
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export abstract class PrimitiveArrayBuilder<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder<any>>;
						public _freeBuffer: T;
						public _bufferHead: com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>;
						public _bufferTail: com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>;
						public _bufferedEntryCount: number;
						public appendCompletedChunk(fullChunk: T, fullChunkLength: number): T;
						public constructor();
						public bufferedSize(): number;
						public resetAndStart(): T;
						public _reset(): void;
						public completeAndClearBuffer(lastChunk: T, lastChunkEntries: number): T;
						public _constructArray(param0: number): T;
					}
					export module PrimitiveArrayBuilder {
						export class Node<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<any>>;
							public copyData(dst: T, ptr: number): number;
							public next(): com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>;
							public getData(): T;
							public linkNext(next: com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node<T>): void;
							public constructor(data: T, dataLen: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class RawValue extends java.lang.Object implements com.fasterxml.jackson.databind.JsonSerializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.RawValue>;
						public _value: any;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public serialize(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(v: com.fasterxml.jackson.databind.JsonSerializable);
						public rawValue(): any;
						public toString(): string;
						public serializeWithType(param0: com.fasterxml.jackson.core.JsonGenerator, param1: com.fasterxml.jackson.databind.SerializerProvider, param2: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public serializeWithType(gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider, typeSer: com.fasterxml.jackson.databind.jsontype.TypeSerializer): void;
						public constructor(v: string);
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator): void;
						public constructor(v: com.fasterxml.jackson.core.SerializableString);
						public equals(o: any): boolean;
						public _serialize(gen: com.fasterxml.jackson.core.JsonGenerator): void;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator, serializers: com.fasterxml.jackson.databind.SerializerProvider): void;
						public constructor(value: any, bogus: boolean);
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class RootNameLookup extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.RootNameLookup>;
						public _rootNames: com.fasterxml.jackson.databind.util.LRUMap<com.fasterxml.jackson.databind.type.ClassKey,com.fasterxml.jackson.databind.PropertyName>;
						public constructor();
						public findRootName(rootType: java.lang.Class<any>, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.PropertyName;
						public findRootName(rootType: com.fasterxml.jackson.databind.JavaType, config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>): com.fasterxml.jackson.databind.PropertyName;
						public readResolve(): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class SimpleBeanPropertyDefinition extends com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition>;
						public _annotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector;
						public _member: com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public _metadata: com.fasterxml.jackson.databind.PropertyMetadata;
						public _fullName: com.fasterxml.jackson.databind.PropertyName;
						public _inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value;
						public constructor(intr: com.fasterxml.jackson.databind.AnnotationIntrospector, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, fullName: com.fasterxml.jackson.databind.PropertyName, metadata: com.fasterxml.jackson.databind.PropertyMetadata, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value);
						public withSimpleName(newName: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public getConstructorParameters(): java.util.Iterator<com.fasterxml.jackson.databind.introspect.AnnotatedParameter>;
						public withSimpleName(param0: string): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public getInternalName(): string;
						public getMetadata(): com.fasterxml.jackson.databind.PropertyMetadata;
						public getName(): string;
						public isExplicitlyIncluded(): boolean;
						public hasField(): boolean;
						public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, name: com.fasterxml.jackson.databind.PropertyName, metadata: com.fasterxml.jackson.databind.PropertyMetadata, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public hasName(name: com.fasterxml.jackson.databind.PropertyName): boolean;
						public isExplicitlyNamed(): boolean;
						public getSetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
						public getRawPrimaryType(): java.lang.Class<any>;
						public hasConstructorParameter(): boolean;
						public getPrimaryMember(): com.fasterxml.jackson.databind.introspect.AnnotatedMember;
						public constructor();
						public withName(param0: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public hasGetter(): boolean;
						public getConstructorParameter(): com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
						public getFullName(): com.fasterxml.jackson.databind.PropertyName;
						public withInclusion(inclusion: com.fasterxml.jackson.annotation.JsonInclude.Value): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, name: com.fasterxml.jackson.databind.PropertyName, metadata: com.fasterxml.jackson.databind.PropertyMetadata, inclusion: com.fasterxml.jackson.annotation.JsonInclude.Include): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public withMetadata(metadata: com.fasterxml.jackson.databind.PropertyMetadata): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public findInclusion(): com.fasterxml.jackson.annotation.JsonInclude.Value;
						public getPrimaryType(): com.fasterxml.jackson.databind.JavaType;
						public getField(): com.fasterxml.jackson.databind.introspect.AnnotatedField;
						public static construct(config: com.fasterxml.jackson.databind.cfg.MapperConfig<any>, member: com.fasterxml.jackson.databind.introspect.AnnotatedMember, name: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
						public withName(newName: com.fasterxml.jackson.databind.PropertyName): com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
						public hasSetter(): boolean;
						public getWrapperName(): com.fasterxml.jackson.databind.PropertyName;
						public getGetter(): com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export abstract class StdConverter<IN, OUT>  extends com.fasterxml.jackson.databind.util.Converter<any,any> {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.StdConverter<any,any>>;
						public convert(param0: any): any;
						public constructor();
						public getInputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public _findConverterType(tf: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public getOutputType(param0: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public getInputType(typeFactory: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
						public getOutputType(typeFactory: com.fasterxml.jackson.databind.type.TypeFactory): com.fasterxml.jackson.databind.JavaType;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class StdDateFormat extends java.text.DateFormat {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.StdDateFormat>;
						public static PATTERN_PLAIN_STR: string;
						public static PATTERN_PLAIN: java.util.regex.Pattern;
						public static PATTERN_ISO8601: java.util.regex.Pattern;
						public static DATE_FORMAT_STR_ISO8601: string;
						public static DATE_FORMAT_STR_PLAIN: string;
						public static DATE_FORMAT_STR_RFC1123: string;
						public static ALL_FORMATS: string[];
						public static DEFAULT_TIMEZONE: java.util.TimeZone;
						public static DEFAULT_LOCALE: java.util.Locale;
						public static DATE_FORMAT_RFC1123: java.text.DateFormat;
						public static instance: com.fasterxml.jackson.databind.util.StdDateFormat;
						public static CALENDAR: java.util.Calendar;
						public _timezone: java.util.TimeZone;
						public _locale: java.util.Locale;
						public _lenient: java.lang.Boolean;
						public withColonInTimeZone(b: boolean): com.fasterxml.jackson.databind.util.StdDateFormat;
						public format(obj: any, toAppendTo: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition): java.lang.StringBuffer;
						public equals(obj: any): boolean;
						public isLenient(): boolean;
						public hashCode(): number;
						public withTimeZone(tz: java.util.TimeZone): com.fasterxml.jackson.databind.util.StdDateFormat;
						public setTimeZone(zone: java.util.TimeZone): void;
						public setTimeZone(tz: java.util.TimeZone): void;
						public format(param0: java.util.Date, param1: java.lang.StringBuffer, param2: java.text.FieldPosition): java.lang.StringBuffer;
						public withLenient(b: java.lang.Boolean): com.fasterxml.jackson.databind.util.StdDateFormat;
						public withLocale(loc: java.util.Locale): com.fasterxml.jackson.databind.util.StdDateFormat;
						public equals(o: any): boolean;
						public setLenient(enabled: boolean): void;
						public looksLikeISO8601(dateStr: string): boolean;
						public parseAsISO8601(dateStr: string, pos: java.text.ParsePosition): java.util.Date;
						public format(date: java.util.Date): string;
						public constructor(tz: java.util.TimeZone, loc: java.util.Locale, lenient: java.lang.Boolean, formatTzOffsetWithColon: boolean);
						public _format(tz: java.util.TimeZone, loc: java.util.Locale, date: java.util.Date, buffer: java.lang.StringBuffer): void;
						public _formatBCEYear(buffer: java.lang.StringBuffer, bceYearNoSign: number): void;
						public constructor();
						public setLenient(lenient: boolean): void;
						public toPattern(): string;
						/** @deprecated */
						public static getISO8601Format(tz: java.util.TimeZone, loc: java.util.Locale): java.text.DateFormat;
						public _parseAsISO8601(dateStr: string, bogus: java.text.ParsePosition): java.util.Date;
						public constructor(tz: java.util.TimeZone, loc: java.util.Locale, lenient: java.lang.Boolean);
						public isColonIncludedInTimeZone(): boolean;
						public clone(): any;
						public parse(dateStr: string, pos: java.text.ParsePosition): java.util.Date;
						/** @deprecated */
						public static getRFC1123Format(tz: java.util.TimeZone, loc: java.util.Locale): java.text.DateFormat;
						public _clearFormats(): void;
						public _getCalendar(tz: java.util.TimeZone): java.util.Calendar;
						public static getDefaultTimeZone(): java.util.TimeZone;
						public parseAsRFC1123(dateStr: string, pos: java.text.ParsePosition): java.util.Date;
						/** @deprecated */
						public constructor(tz: java.util.TimeZone, loc: java.util.Locale);
						public toString(): string;
						public parse(source: string): java.util.Date;
						public parse(param0: string, param1: java.text.ParsePosition): java.util.Date;
						public clone(): com.fasterxml.jackson.databind.util.StdDateFormat;
						public _parseDate(dateStr: string, pos: java.text.ParsePosition): java.util.Date;
						public static _equals(value1: any, value2: any): boolean;
						public format(date: java.util.Date, toAppendTo: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition): java.lang.StringBuffer;
						public getTimeZone(): java.util.TimeZone;
						public format(obj: any): string;
						public parse(dateStr: string): java.util.Date;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class TokenBuffer {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TokenBuffer>;
						public static DEFAULT_GENERATOR_FEATURES: number;
						public _objectCodec: com.fasterxml.jackson.core.ObjectCodec;
						public _parentContext: com.fasterxml.jackson.core.JsonStreamContext;
						public _generatorFeatures: number;
						public _closed: boolean;
						public _hasNativeTypeIds: boolean;
						public _hasNativeObjectIds: boolean;
						public _mayHaveNativeIds: boolean;
						public _forceBigDecimal: boolean;
						public _first: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
						public _last: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
						public _appendAt: number;
						public _typeId: any;
						public _objectId: any;
						public _hasNativeId: boolean;
						public _writeContext: com.fasterxml.jackson.core.json.JsonWriteContext;
						public writeString(text: string): void;
						public constructor(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext);
						public writeRaw(text: com.fasterxml.jackson.core.SerializableString): void;
						public writeEndObject(): void;
						public asParser(): com.fasterxml.jackson.core.JsonParser;
						public close(): void;
						public writeRawValue(text: string): void;
						/** @deprecated */
						public static asCopyOfValue(p: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.databind.util.TokenBuffer;
						public writeObject(value: any): void;
						public writeStartObject(): void;
						public writeUTF8String(text: number[], offset: number, length: number): void;
						public getWriteCapabilities(): com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamWriteCapability>;
						public writeObjectId(id: any): void;
						public _appendValue(type: com.fasterxml.jackson.core.JsonToken, value: any): void;
						public overrideParentContext(ctxt: com.fasterxml.jackson.core.JsonStreamContext): com.fasterxml.jackson.databind.util.TokenBuffer;
						public asParser(src: com.fasterxml.jackson.core.JsonParser): com.fasterxml.jackson.core.JsonParser;
						public isClosed(): boolean;
						public writeNumber(f: number): void;
						public append(other: com.fasterxml.jackson.databind.util.TokenBuffer): com.fasterxml.jackson.databind.util.TokenBuffer;
						public _appendFieldName(value: any): void;
						public copyCurrentEvent(p: com.fasterxml.jackson.core.JsonParser): void;
						public firstToken(): com.fasterxml.jackson.core.JsonToken;
						public writeRawValue(text: string[], offset: number, len: number): void;
						public writeNumber(i: number): void;
						public isEnabled(f: com.fasterxml.jackson.core.JsonGenerator.Feature): boolean;
						public writeStartObject(forValue: any, size: number): void;
						public writeNumber(l: number): void;
						public overrideStdFeatures(values: number, mask: number): com.fasterxml.jackson.core.JsonGenerator;
						public canWriteBinaryNatively(): boolean;
						public asParserOnFirstToken(): com.fasterxml.jackson.core.JsonParser;
						public writeTypeId(id: any): void;
						public writeNumber(v: java.math.BigInteger): void;
						public setCodec(oc: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonGenerator;
						public writeNumber(dec: java.math.BigDecimal): void;
						public copyCurrentStructure(p: com.fasterxml.jackson.core.JsonParser): void;
						public writeFieldName(name: string): void;
						public constructor(p: com.fasterxml.jackson.core.JsonParser);
						public writeNumber(d: number): void;
						public getOutputContext(): com.fasterxml.jackson.core.json.JsonWriteContext;
						public flush(): void;
						public _appendValue(type: com.fasterxml.jackson.core.JsonToken): void;
						public writeFieldName(name: com.fasterxml.jackson.core.SerializableString): void;
						public writeString(text: string[], offset: number, len: number): void;
						public canWriteObjectId(): boolean;
						public toString(): string;
						public getFeatureMask(): number;
						public _appendEndMarker(type: com.fasterxml.jackson.core.JsonToken): void;
						public writeStartObject(forValue: any): void;
						public writeEndArray(): void;
						public writeBinary(b64variant: com.fasterxml.jackson.core.Base64Variant, data: java.io.InputStream, dataLength: number): number;
						public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
						public canWriteTypeId(): boolean;
						public writeBoolean(state: boolean): void;
						public useDefaultPrettyPrinter(): com.fasterxml.jackson.core.JsonGenerator;
						public writeString(text: com.fasterxml.jackson.core.SerializableString): void;
						public writeRaw(text: string, offset: number, len: number): void;
						public writeStartArray(): void;
						public writeTree(node: com.fasterxml.jackson.core.TreeNode): void;
						public writeRawUTF8String(text: number[], offset: number, length: number): void;
						public writeStartArray(forValue: any, size: number): void;
						public deserialize(p: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): com.fasterxml.jackson.databind.util.TokenBuffer;
						public enable(f: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						/** @deprecated */
						public setFeatureMask(mask: number): com.fasterxml.jackson.core.JsonGenerator;
						public disable(f: com.fasterxml.jackson.core.JsonGenerator.Feature): com.fasterxml.jackson.core.JsonGenerator;
						public asParser(codec: com.fasterxml.jackson.core.ObjectCodec): com.fasterxml.jackson.core.JsonParser;
						public writeNull(): void;
						public _reportUnsupportedOperation(): void;
						public serialize(gen: com.fasterxml.jackson.core.JsonGenerator): void;
						public writeRaw(text: string[], offset: number, len: number): void;
						public isEmpty(): boolean;
						public forceUseOfBigDecimal(b: boolean): com.fasterxml.jackson.databind.util.TokenBuffer;
						public writeEmbeddedObject(object: any): void;
						public writeRawValue(text: string, offset: number, len: number): void;
						public writeNumber(encodedValue: string): void;
						public writeBinary(b64variant: com.fasterxml.jackson.core.Base64Variant, data: number[], offset: number, len: number): void;
						public version(): com.fasterxml.jackson.core.Version;
						public writeRaw(text: string): void;
						public constructor(codec: com.fasterxml.jackson.core.ObjectCodec, hasNativeIds: boolean);
						public _copyBufferContents(p: com.fasterxml.jackson.core.JsonParser): void;
						public _appendStartMarker(type: com.fasterxml.jackson.core.JsonToken): void;
						public writeRaw(c: string): void;
						public writeStartArray(forValue: any): void;
					}
					export module TokenBuffer {
						export class Parser {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TokenBuffer.Parser>;
							public _codec: com.fasterxml.jackson.core.ObjectCodec;
							public _hasNativeTypeIds: boolean;
							public _hasNativeObjectIds: boolean;
							public _hasNativeIds: boolean;
							public _segment: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public _segmentPtr: number;
							public _parsingContext: com.fasterxml.jackson.databind.util.TokenBufferReadContext;
							public _closed: boolean;
							public _byteBuilder: com.fasterxml.jackson.core.util.ByteArrayBuilder;
							public _location: com.fasterxml.jackson.core.JsonLocation;
							public close(): void;
							public overrideCurrentName(name: string): void;
							public setCodec(c: com.fasterxml.jackson.core.ObjectCodec): void;
							public isNaN(): boolean;
							public _handleEOF(): void;
							public readBinaryValue(b64variant: com.fasterxml.jackson.core.Base64Variant, out: java.io.OutputStream): number;
							public setLocation(l: com.fasterxml.jackson.core.JsonLocation): void;
							public getTextCharacters(): string[];
							public hasTextCharacters(): boolean;
							public getObjectId(): any;
							public nextToken(): com.fasterxml.jackson.core.JsonToken;
							public getDecimalValue(): java.math.BigDecimal;
							public getLongValue(): number;
							public getBinaryValue(b64variant: com.fasterxml.jackson.core.Base64Variant): number[];
							public _currentObject(): any;
							public getTypeId(): any;
							public getParsingContext(): com.fasterxml.jackson.core.JsonStreamContext;
							public canReadObjectId(): boolean;
							public peekNextToken(): com.fasterxml.jackson.core.JsonToken;
							public getTokenLocation(): com.fasterxml.jackson.core.JsonLocation;
							public version(): com.fasterxml.jackson.core.Version;
							public _checkIsNumber(): void;
							public getText(): string;
							public constructor(firstSeg: com.fasterxml.jackson.databind.util.TokenBuffer.Segment, codec: com.fasterxml.jackson.core.ObjectCodec, hasNativeTypeIds: boolean, hasNativeObjectIds: boolean, parentContext: com.fasterxml.jackson.core.JsonStreamContext);
							public getCodec(): com.fasterxml.jackson.core.ObjectCodec;
							public getReadCapabilities(): com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>;
							public getTextOffset(): number;
							/** @deprecated */
							public constructor(firstSeg: com.fasterxml.jackson.databind.util.TokenBuffer.Segment, codec: com.fasterxml.jackson.core.ObjectCodec, hasNativeTypeIds: boolean, hasNativeObjectIds: boolean);
							public nextFieldName(): string;
							public currentName(): string;
							public isClosed(): boolean;
							public getNumberType(): com.fasterxml.jackson.core.JsonParser.NumberType;
							public getCurrentLocation(): com.fasterxml.jackson.core.JsonLocation;
							public _convertNumberToInt(n: java.lang.Number): number;
							public getEmbeddedObject(): any;
							public getBigIntegerValue(): java.math.BigInteger;
							public getDoubleValue(): number;
							public getFloatValue(): number;
							public getNumberValue(): java.lang.Number;
							public getTextLength(): number;
							public getCurrentName(): string;
							public _convertNumberToLong(n: java.lang.Number): number;
							public canReadTypeId(): boolean;
							public getIntValue(): number;
						}
						export class Segment extends java.lang.Object {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TokenBuffer.Segment>;
							public static TOKENS_PER_SEGMENT: number;
							public _next: com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public _tokenTypes: number;
							public _tokens: any[];
							public _nativeIds: java.util.TreeMap<java.lang.Integer,any>;
							public constructor();
							public append(index: number, tokenType: com.fasterxml.jackson.core.JsonToken, objectId: any, typeId: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public hasIds(): boolean;
							public get(index: number): any;
							public append(index: number, tokenType: com.fasterxml.jackson.core.JsonToken): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public rawType(index: number): number;
							public type(index: number): com.fasterxml.jackson.core.JsonToken;
							public append(index: number, tokenType: com.fasterxml.jackson.core.JsonToken, value: any, objectId: any, typeId: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public next(): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
							public append(index: number, tokenType: com.fasterxml.jackson.core.JsonToken, value: any): com.fasterxml.jackson.databind.util.TokenBuffer.Segment;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class TokenBufferReadContext {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TokenBufferReadContext>;
						public _parent: com.fasterxml.jackson.core.JsonStreamContext;
						public _startLocation: com.fasterxml.jackson.core.JsonLocation;
						public _currentName: string;
						public _currentValue: any;
						public static createRootContext(origContext: com.fasterxml.jackson.core.JsonStreamContext): com.fasterxml.jackson.databind.util.TokenBufferReadContext;
						public hasCurrentName(): boolean;
						public setCurrentName(name: string): void;
						public createChildObjectContext(): com.fasterxml.jackson.databind.util.TokenBufferReadContext;
						public constructor();
						public constructor(base: com.fasterxml.jackson.core.JsonStreamContext, srcRef: com.fasterxml.jackson.core.io.ContentReference);
						public constructor(parent: com.fasterxml.jackson.databind.util.TokenBufferReadContext, type: number, index: number);
						public getParent(): com.fasterxml.jackson.core.JsonStreamContext;
						public createChildArrayContext(): com.fasterxml.jackson.databind.util.TokenBufferReadContext;
						public getCurrentValue(): any;
						/** @deprecated */
						public constructor(base: com.fasterxml.jackson.core.JsonStreamContext, srcRef: any);
						public constructor(base: com.fasterxml.jackson.core.JsonStreamContext, startLoc: com.fasterxml.jackson.core.JsonLocation);
						public getCurrentName(): string;
						public updateForValue(): void;
						public parentOrCopy(): com.fasterxml.jackson.databind.util.TokenBufferReadContext;
						public setCurrentValue(v: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class TypeKey extends java.lang.Object {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.TypeKey>;
						public _hashCode: number;
						public _class: java.lang.Class<any>;
						public _type: com.fasterxml.jackson.databind.JavaType;
						public _isTyped: boolean;
						public getType(): com.fasterxml.jackson.databind.JavaType;
						public constructor(key: java.lang.Class<any>, typed: boolean);
						public constructor();
						public equals(obj: any): boolean;
						public static untypedHash(cls: java.lang.Class<any>): number;
						public static typedHash(type: com.fasterxml.jackson.databind.JavaType): number;
						public resetUntyped(type: com.fasterxml.jackson.databind.JavaType): void;
						public getRawType(): java.lang.Class<any>;
						public hashCode(): number;
						public resetTyped(cls: java.lang.Class<any>): void;
						public isTyped(): boolean;
						public static typedHash(cls: java.lang.Class<any>): number;
						public constructor(src: com.fasterxml.jackson.databind.util.TypeKey);
						public toString(): string;
						public constructor(key: com.fasterxml.jackson.databind.JavaType, typed: boolean);
						public resetUntyped(cls: java.lang.Class<any>): void;
						public equals(o: any): boolean;
						public resetTyped(type: com.fasterxml.jackson.databind.JavaType): void;
						public static untypedHash(type: com.fasterxml.jackson.databind.JavaType): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module fasterxml {
		export module jackson {
			export module databind {
				export module util {
					export class ViewMatcher extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ViewMatcher>;
						public static EMPTY: com.fasterxml.jackson.databind.util.ViewMatcher;
						public constructor();
						public isVisibleForView(activeView: java.lang.Class<any>): boolean;
						public static construct(views: java.lang.Class<any>[]): com.fasterxml.jackson.databind.util.ViewMatcher;
					}
					export module ViewMatcher {
						export class Multi extends com.fasterxml.jackson.databind.util.ViewMatcher implements java.io.Serializable {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ViewMatcher.Multi>;
							public constructor();
							public constructor(v: java.lang.Class<any>[]);
							public isVisibleForView(activeView: java.lang.Class<any>): boolean;
						}
						export class Single extends com.fasterxml.jackson.databind.util.ViewMatcher {
							public static class: java.lang.Class<com.fasterxml.jackson.databind.util.ViewMatcher.Single>;
							public constructor();
							public constructor(v: java.lang.Class<any>);
							public isVisibleForView(activeView: java.lang.Class<any>): boolean;
						}
					}
				}
			}
		}
	}
}

//Generics information:
//com.fasterxml.jackson.databind.JsonDeserializer:1
//com.fasterxml.jackson.databind.JsonSerializer:1
//com.fasterxml.jackson.databind.MappingIterator:1
//com.fasterxml.jackson.databind.cfg.MapperBuilder:2
//com.fasterxml.jackson.databind.cfg.MapperConfig:1
//com.fasterxml.jackson.databind.cfg.MapperConfigBase:2
//com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer:1
//com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase:1
//com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer:1
//com.fasterxml.jackson.databind.deser.std.FromStringDeserializer:1
//com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer:1
//com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers:1
//com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer:1
//com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer:1
//com.fasterxml.jackson.databind.deser.std.StdDeserializer:1
//com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer:1
//com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer:1
//com.fasterxml.jackson.databind.ext.DOMDeserializer:1
//com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata:2
//com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked:1
//com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.MemberIterator:1
//com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember:1
//com.fasterxml.jackson.databind.introspect.VisibilityChecker:1
//com.fasterxml.jackson.databind.introspect.WithMember:1
//com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder:1
//com.fasterxml.jackson.databind.node.ContainerNode:1
//com.fasterxml.jackson.databind.ser.ContainerSerializer:1
//com.fasterxml.jackson.databind.ser.std.ArraySerializerBase:1
//com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase:1
//com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase:1
//com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase:1
//com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base:1
//com.fasterxml.jackson.databind.ser.std.RawSerializer:1
//com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer:1
//com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase:1
//com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer:1
//com.fasterxml.jackson.databind.ser.std.StdScalarSerializer:1
//com.fasterxml.jackson.databind.ser.std.StdSerializer:1
//com.fasterxml.jackson.databind.util.ArrayIterator:1
//com.fasterxml.jackson.databind.util.Converter:2
//com.fasterxml.jackson.databind.util.LRUMap:2
//com.fasterxml.jackson.databind.util.LinkedNode:1
//com.fasterxml.jackson.databind.util.LookupCache:2
//com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder:1
//com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder.Node:1
//com.fasterxml.jackson.databind.util.StdConverter:2

