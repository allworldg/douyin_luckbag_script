declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class AnimatableView extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.animation.AnimatableView>;
						/**
						 * Constructs a new instance of the com.google.android.material.animation.AnimatableView interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							startAnimation(param0: com.google.android.material.animation.AnimatableView.Listener): void;
							stopAnimation(): void;
						});
						public constructor();
						public startAnimation(param0: com.google.android.material.animation.AnimatableView.Listener): void;
						public stopAnimation(): void;
					}
					export module AnimatableView {
						export class Listener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.animation.AnimatableView.Listener>;
							/**
							 * Constructs a new instance of the com.google.android.material.animation.AnimatableView$Listener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onAnimationEnd(): void;
							});
							public constructor();
							public onAnimationEnd(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class AnimationUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.animation.AnimationUtils>;
						public static LINEAR_INTERPOLATOR: android.animation.TimeInterpolator;
						public static FAST_OUT_SLOW_IN_INTERPOLATOR: android.animation.TimeInterpolator;
						public static FAST_OUT_LINEAR_IN_INTERPOLATOR: android.animation.TimeInterpolator;
						public static LINEAR_OUT_SLOW_IN_INTERPOLATOR: android.animation.TimeInterpolator;
						public static DECELERATE_INTERPOLATOR: android.animation.TimeInterpolator;
						public static lerp(startValue: number, endValue: number, fraction: number): number;
						public constructor();
						public static lerp(outputMin: number, outputMax: number, inputMin: number, inputMax: number, value: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class AnimatorSetCompat extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.animation.AnimatorSetCompat>;
						public constructor();
						public static playTogether(animatorSet: android.animation.AnimatorSet, items: java.util.List<android.animation.Animator>): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class ArgbEvaluatorCompat extends android.animation.TypeEvaluator<java.lang.Integer> {
						public static class: java.lang.Class<com.google.android.material.animation.ArgbEvaluatorCompat>;
						public static getInstance(): com.google.android.material.animation.ArgbEvaluatorCompat;
						public constructor();
						public evaluate(fraction: number, startValue: java.lang.Integer, endValue: java.lang.Integer): java.lang.Integer;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class ChildrenAlphaProperty extends android.util.Property<android.view.ViewGroup,java.lang.Float> {
						public static class: java.lang.Class<com.google.android.material.animation.ChildrenAlphaProperty>;
						public static CHILDREN_ALPHA: android.util.Property<android.view.ViewGroup,java.lang.Float>;
						public get(object: android.view.ViewGroup): java.lang.Float;
						public set(object: any, value: any): void;
						public set(object: android.view.ViewGroup, value: java.lang.Float): void;
						public get(param0: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class DrawableAlphaProperty extends android.util.Property<android.graphics.drawable.Drawable,java.lang.Integer> {
						public static class: java.lang.Class<com.google.android.material.animation.DrawableAlphaProperty>;
						public static DRAWABLE_ALPHA_COMPAT: android.util.Property<android.graphics.drawable.Drawable,java.lang.Integer>;
						public set(object: any, value: any): void;
						public get(param0: any): any;
						public get(object: android.graphics.drawable.Drawable): java.lang.Integer;
						public set(object: android.graphics.drawable.Drawable, value: java.lang.Integer): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class ImageMatrixProperty extends android.util.Property<android.widget.ImageView,android.graphics.Matrix> {
						public static class: java.lang.Class<com.google.android.material.animation.ImageMatrixProperty>;
						public set(object: any, value: any): void;
						public constructor();
						public get(param0: any): any;
						public set(object: android.widget.ImageView, value: android.graphics.Matrix): void;
						public get(object: android.widget.ImageView): android.graphics.Matrix;
						public constructor(type: java.lang.Class<any>, name: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class MatrixEvaluator extends android.animation.TypeEvaluator<android.graphics.Matrix> {
						public static class: java.lang.Class<com.google.android.material.animation.MatrixEvaluator>;
						public constructor();
						public evaluate(fraction: number, startValue: android.graphics.Matrix, endValue: android.graphics.Matrix): android.graphics.Matrix;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class MotionSpec extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.animation.MotionSpec>;
						public getTiming(name: string): com.google.android.material.animation.MotionTiming;
						public constructor();
						public hasPropertyValues(name: string): boolean;
						public equals(obj: any): boolean;
						public setTiming(name: string, timing: com.google.android.material.animation.MotionTiming): void;
						public getPropertyValues(name: string): android.animation.PropertyValuesHolder[];
						public hashCode(): number;
						public setPropertyValues(name: string, values: android.animation.PropertyValuesHolder[]): void;
						public toString(): string;
						public getTotalDuration(): number;
						public static createFromAttribute(context: android.content.Context, attributes: android.content.res.TypedArray, index: number): com.google.android.material.animation.MotionSpec;
						public static createFromResource(context: android.content.Context, id: number): com.google.android.material.animation.MotionSpec;
						public hasTiming(name: string): boolean;
						public getAnimator(name: string, target: any, property: android.util.Property<any,any>): android.animation.ObjectAnimator;
						public equals(o: any): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class MotionTiming extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.animation.MotionTiming>;
						public getDelay(): number;
						public apply(animator: android.animation.Animator): void;
						public equals(obj: any): boolean;
						public getDuration(): number;
						public getRepeatCount(): number;
						public constructor(delay: number, param1: number, duration: android.animation.TimeInterpolator);
						public constructor(delay: number, param1: number);
						public getInterpolator(): android.animation.TimeInterpolator;
						public hashCode(): number;
						public getRepeatMode(): number;
						public equals(o: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class Positioning extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.animation.Positioning>;
						public gravity: number;
						public xAdjustment: number;
						public yAdjustment: number;
						public constructor(gravity: number, xAdjustment: number, yAdjustment: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module animation {
					export class TransformationCallback<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.animation.TransformationCallback<any>>;
						/**
						 * Constructs a new instance of the com.google.android.material.animation.TransformationCallback<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onTranslationChanged(param0: T): void;
							onScaleChanged(param0: T): void;
						});
						public constructor();
						public onTranslationChanged(param0: T): void;
						public onScaleChanged(param0: T): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export class AppBarLayout extends android.widget.LinearLayout implements androidx.coordinatorlayout.widget.CoordinatorLayout.AttachedBehavior {
						public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public addLiftOnScrollListener(liftOnScrollListener: com.google.android.material.appbar.AppBarLayout.LiftOnScrollListener): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setStatusBarForegroundColor(color: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setStatusBarForeground(drawable: android.graphics.drawable.Drawable): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						/** @deprecated */
						public getTargetElevation(): number;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public generateDefaultLayoutParams(): com.google.android.material.appbar.AppBarLayout.LayoutParams;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public clearLiftOnScrollListener(): void;
						public setLiftOnScrollTargetViewId(liftOnScrollTargetViewId: number): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setExpanded(expanded: boolean, animate: boolean): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public setLiftOnScrollTargetView(liftOnScrollTargetView: android.view.View): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public addOnOffsetChangedListener(listener: com.google.android.material.appbar.AppBarLayout.OnOffsetChangedListener): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public generateLayoutParams(lp: android.view.ViewGroup.LayoutParams): android.widget.LinearLayout.LayoutParams;
						public focusSearch(direction: number): android.view.View;
						public isLiftOnScroll(): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public removeLiftOnScrollListener(liftOnScrollListener: com.google.android.material.appbar.AppBarLayout.LiftOnScrollListener): boolean;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public generateDefaultLayoutParams(): android.widget.LinearLayout.LayoutParams;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setLiftOnScroll(liftOnScroll: boolean): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public generateLayoutParams(p: android.view.ViewGroup.LayoutParams): com.google.android.material.appbar.AppBarLayout.LayoutParams;
						public draw(canvas: android.graphics.Canvas): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): com.google.android.material.appbar.AppBarLayout.LayoutParams;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public onLayout(changed: boolean, l: number, t: number, r: number, b: number): void;
						public onCreateDrawableState(extraSpace: number): number[];
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public setLiftable(liftable: boolean): boolean;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public getStatusBarForeground(): android.graphics.drawable.Drawable;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getLiftOnScrollTargetViewId(): number;
						public setLiftableOverrideEnabled(enabled: boolean): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public getTotalScrollRange(): number;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLifted(): boolean;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): android.widget.LinearLayout.LayoutParams;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public checkLayoutParams(p: android.view.ViewGroup.LayoutParams): boolean;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setVisibility(visibility: number): void;
						public generateLayoutParams(p: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<com.google.android.material.appbar.AppBarLayout>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setOrientation(orientation: number): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public removeOnOffsetChangedListener(listener: com.google.android.material.appbar.AppBarLayout.BaseOnOffsetChangedListener<any>): void;
						public verifyDrawable(who: android.graphics.drawable.Drawable): boolean;
						/** @deprecated */
						public setTargetElevation(elevation: number): void;
						public drawableStateChanged(): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public getMinimumHeightForVisibleOverlappingContent(): number;
						public setStatusBarForegroundResource(resId: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setElevation(elevation: number): void;
						public onDetachedFromWindow(): void;
						public removeOnOffsetChangedListener(listener: com.google.android.material.appbar.AppBarLayout.OnOffsetChangedListener): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
						public setExpanded(expanded: boolean): void;
						public generateDefaultLayoutParams(): android.view.ViewGroup.LayoutParams;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public addOnOffsetChangedListener(listener: com.google.android.material.appbar.AppBarLayout.BaseOnOffsetChangedListener<any>): void;
						public setLifted(lifted: boolean): boolean;
					}
					export module AppBarLayout {
						export class BaseBehavior<T>  extends com.google.android.material.appbar.HeaderBehavior<any> {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.BaseBehavior<any>>;
							public constructor();
							public onStartNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: android.view.View, param4: number): boolean;
							public onStartNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: android.view.View, param4: number, param5: number): boolean;
							public onSaveInstanceState(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, abl: any): android.os.Parcelable;
							public onRestoreInstanceState(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.os.Parcelable): void;
							public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number[]): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onMeasureChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, parentWidthMeasureSpec: number, widthUsed: number, parentHeightMeasureSpec: number, heightUsed: number): boolean;
							public onStopNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): void;
							public setDragCallback(callback: com.google.android.material.appbar.AppBarLayout.BaseBehavior.BaseDragCallback<any>): void;
							public onRestoreInstanceState(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, appBarLayout: any, state: android.os.Parcelable): void;
							public onNestedPreScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number[]): void;
							public onStopNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, abl: any, target: android.view.View, type: number): void;
							public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): boolean;
							public onNestedPreScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, target: android.view.View, dx: number, dy: number, consumed: number[], type: number): void;
							public onNestedPreScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number[], param6: number): void;
							public onStopNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number): void;
							public onStartNestedScroll(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, directTargetChild: android.view.View, target: android.view.View, nestedScrollAxes: number, type: number): boolean;
							public onMeasureChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number, param3: number, param4: number, param5: number): boolean;
							public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, abl: any, layoutDirection: number): boolean;
							public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number, param7: number): void;
							public onNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number, type: number, consumed: number[]): void;
							public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number): void;
							public onSaveInstanceState(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any): android.os.Parcelable;
						}
						export module BaseBehavior {
							export abstract class BaseDragCallback<T>  extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.BaseBehavior.BaseDragCallback<any>>;
								public canDrag(param0: T): boolean;
								public constructor();
							}
							export class SavedState extends androidx.customview.view.AbsSavedState {
								public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.BaseBehavior.SavedState>;
								public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.appbar.AppBarLayout.BaseBehavior.SavedState>;
								public constructor(source: android.os.Parcel, loader: java.lang.ClassLoader);
								public describeContents(): number;
								public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
								public constructor(param0: android.os.Parcelable);
								public writeToParcel(param0: android.os.Parcel, param1: number): void;
								public writeToParcel(dest: android.os.Parcel, flags: number): void;
								public constructor(param0: android.os.Parcel);
								public constructor(superState: android.os.Parcelable);
							}
						}
						export class BaseOnOffsetChangedListener<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.BaseOnOffsetChangedListener<any>>;
							/**
							 * Constructs a new instance of the com.google.android.material.appbar.AppBarLayout$BaseOnOffsetChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onOffsetChanged(param0: T, param1: number): void;
							});
							public constructor();
							public onOffsetChanged(param0: T, param1: number): void;
						}
						export class Behavior extends com.google.android.material.appbar.AppBarLayout.BaseBehavior<com.google.android.material.appbar.AppBarLayout> {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.Behavior>;
							public constructor();
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						}
						export module Behavior {
							export abstract class DragCallback extends com.google.android.material.appbar.AppBarLayout.BaseBehavior.BaseDragCallback<com.google.android.material.appbar.AppBarLayout> {
								public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.Behavior.DragCallback>;
								public constructor();
							}
						}
						export abstract class ChildScrollEffect extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.ChildScrollEffect>;
							public constructor();
							public onOffsetChanged(param0: com.google.android.material.appbar.AppBarLayout, param1: android.view.View, param2: number): void;
						}
						export class CompressChildScrollEffect extends com.google.android.material.appbar.AppBarLayout.ChildScrollEffect {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.CompressChildScrollEffect>;
							public constructor();
							public onOffsetChanged(appBarLayout: com.google.android.material.appbar.AppBarLayout, child: android.view.View, offset: number): void;
							public onOffsetChanged(param0: com.google.android.material.appbar.AppBarLayout, param1: android.view.View, param2: number): void;
						}
						export class DrawableHelperV29 extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.DrawableHelperV29>;
						}
						export class LayoutParams extends android.widget.LinearLayout.LayoutParams {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.LayoutParams>;
							public static SCROLL_FLAG_NO_SCROLL: number;
							public static SCROLL_FLAG_SCROLL: number;
							public static SCROLL_FLAG_EXIT_UNTIL_COLLAPSED: number;
							public static SCROLL_FLAG_ENTER_ALWAYS: number;
							public static SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED: number;
							public static SCROLL_FLAG_SNAP: number;
							public static SCROLL_FLAG_SNAP_MARGINS: number;
							public static SCROLL_EFFECT_NONE: number;
							public static SCROLL_EFFECT_COMPRESS: number;
							public setScrollFlags(flags: number): void;
							public constructor(c: android.content.Context, attrs: android.util.AttributeSet);
							public setScrollEffect(scrollEffect: com.google.android.material.appbar.AppBarLayout.ChildScrollEffect): void;
							public constructor(width: number, height: number, weight: number);
							public getScrollInterpolator(): android.view.animation.Interpolator;
							public setScrollInterpolator(interpolator: android.view.animation.Interpolator): void;
							public constructor(source: android.view.ViewGroup.MarginLayoutParams);
							public constructor(source: android.widget.LinearLayout.LayoutParams);
							public constructor(source: com.google.android.material.appbar.AppBarLayout.LayoutParams);
							public constructor(width: number, height: number);
							public getScrollFlags(): number;
							public getScrollEffect(): com.google.android.material.appbar.AppBarLayout.ChildScrollEffect;
							public setScrollEffect(scrollEffect: number): void;
							public constructor(p: android.view.ViewGroup.LayoutParams);
						}
						export module LayoutParams {
							export class ScrollEffect extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.LayoutParams.ScrollEffect>;
								/**
								 * Constructs a new instance of the com.google.android.material.appbar.AppBarLayout$LayoutParams$ScrollEffect interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
							export class ScrollFlags extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.LayoutParams.ScrollFlags>;
								/**
								 * Constructs a new instance of the com.google.android.material.appbar.AppBarLayout$LayoutParams$ScrollFlags interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
						export class LiftOnScrollListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.LiftOnScrollListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.appbar.AppBarLayout$LiftOnScrollListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onUpdate(param0: number, param1: number): void;
							});
							public constructor();
							public onUpdate(param0: number, param1: number): void;
						}
						export class OnOffsetChangedListener extends com.google.android.material.appbar.AppBarLayout.BaseOnOffsetChangedListener<com.google.android.material.appbar.AppBarLayout> {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.OnOffsetChangedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.appbar.AppBarLayout$OnOffsetChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onOffsetChanged(param0: com.google.android.material.appbar.AppBarLayout, param1: number): void;
								onOffsetChanged(param0: any, param1: number): void;
							});
							public constructor();
							public onOffsetChanged(param0: com.google.android.material.appbar.AppBarLayout, param1: number): void;
							public onOffsetChanged(param0: any, param1: number): void;
						}
						export class ScrollingViewBehavior extends com.google.android.material.appbar.HeaderScrollingViewBehavior {
							public static class: java.lang.Class<com.google.android.material.appbar.AppBarLayout.ScrollingViewBehavior>;
							public constructor();
							public onRequestChildRectangleOnScreen(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
							public onDependentViewRemoved(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, dependency: android.view.View): void;
							public layoutDependsOn(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, dependency: android.view.View): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onDependentViewChanged(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, dependency: android.view.View): boolean;
							public onDependentViewRemoved(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): void;
							public layoutDependsOn(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): boolean;
							public onRequestChildRectangleOnScreen(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.graphics.Rect, param3: boolean): boolean;
							public onDependentViewChanged(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export class CollapsingToolbarLayout extends android.widget.FrameLayout {
						public static class: java.lang.Class<com.google.android.material.appbar.CollapsingToolbarLayout>;
						public static TITLE_COLLAPSE_MODE_SCALE: number;
						public static TITLE_COLLAPSE_MODE_FADE: number;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setExpandedTitleMarginEnd(margin: number): void;
						public setStaticLayoutBuilderConfigurer(staticLayoutBuilderConfigurer: com.google.android.material.appbar.CollapsingToolbarLayout.StaticLayoutBuilderConfigurer): void;
						public setCollapsedTitleTextColor(colors: android.content.res.ColorStateList): void;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public getHyphenationFrequency(): number;
						public generateLayoutParams(p: android.view.ViewGroup.LayoutParams): android.widget.FrameLayout.LayoutParams;
						public setCollapsedTitleTextAppearance(resId: number): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public getTitlePositionInterpolator(): android.animation.TimeInterpolator;
						public setExpandedTitleMargin(start: number, top: number, end: number, bottom: number): void;
						public getParent(): android.view.ViewParent;
						public isRtlTextDirectionHeuristicsEnabled(): boolean;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public setCollapsedTitleTypeface(typeface: android.graphics.Typeface): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public setLineSpacingAdd(spacingAdd: number): void;
						public setStatusBarScrim(drawable: android.graphics.drawable.Drawable): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public setTitle(title: string): void;
						public getExpandedTitleMarginTop(): number;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public focusSearch(direction: number): android.view.View;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public getCollapsedTitleTextSize(): number;
						public setMaxLines(maxLines: number): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public setExpandedTitleTypeface(typeface: android.graphics.Typeface): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public canResolveTextAlignment(): boolean;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public getScrimVisibleHeightTrigger(): number;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public setRtlTextDirectionHeuristicsEnabled(rtlTextDirectionHeuristicsEnabled: boolean): void;
						public isTitleEnabled(): boolean;
						public drawChild(canvas: android.graphics.Canvas, child: android.view.View, drawingTime: number): boolean;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public setTitleEllipsize(ellipsize: android.text.TextUtils.TruncateAt): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public onConfigurationChanged(newConfig: android.content.res.Configuration): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getStatusBarScrim(): android.graphics.drawable.Drawable;
						public getCollapsedTitleTypeface(): android.graphics.Typeface;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public setLineSpacingMultiplier(spacingMultiplier: number): void;
						public getLineCount(): number;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public setScrimsShown(shown: boolean): void;
						public removeView(param0: android.view.View): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public checkLayoutParams(p: android.view.ViewGroup.LayoutParams): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setHyphenationFrequency(hyphenationFrequency: number): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public getMaxLines(): number;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public setForceApplySystemWindowInsetTop(forceApplySystemWindowInsetTop: boolean): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): android.widget.FrameLayout.LayoutParams;
						public generateDefaultLayoutParams(): android.widget.FrameLayout.LayoutParams;
						public getExpandedTitleTypeface(): android.graphics.Typeface;
						public removeView(view: android.view.View): void;
						public onDetachedFromWindow(): void;
						public setTitlePositionInterpolator(interpolator: android.animation.TimeInterpolator): void;
						public setExpandedTitleMarginBottom(margin: number): void;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public setStatusBarScrimColor(color: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setCollapsedTitleTextColor(color: number): void;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public setExpandedTitleTextColor(colors: android.content.res.ColorStateList): void;
						public setContentScrimColor(color: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setTitleCollapseMode(titleCollapseMode: number): void;
						public setExpandedTitleTextSize(textSize: number): void;
						public setCollapsedTitleTextSize(textSize: number): void;
						public getTextDirection(): number;
						public getExpandedTitleMarginBottom(): number;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public setExpandedTitleTextAppearance(resId: number): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getExpandedTitleMarginEnd(): number;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public isExtraMultilineHeightEnabled(): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public setScrimAnimationDuration(duration: number): void;
						public isForceApplySystemWindowInsetTop(): boolean;
						public setScrimsShown(shown: boolean, animate: boolean): void;
						public getTitle(): string;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public generateDefaultLayoutParams(): com.google.android.material.appbar.CollapsingToolbarLayout.LayoutParams;
						public getExpandedTitleGravity(): number;
						public getTextAlignment(): number;
						public setExpandedTitleMarginStart(margin: number): void;
						public getLineSpacingAdd(): number;
						public getContentScrim(): android.graphics.drawable.Drawable;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getTitleCollapseMode(): number;
						public getLayoutDirection(): number;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setCollapsedTitleGravity(gravity: number): void;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public getScrimAnimationDuration(): number;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestTransparentRegion(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public setContentScrim(drawable: android.graphics.drawable.Drawable): void;
						public setExpandedTitleColor(color: number): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public setExpandedTitleGravity(gravity: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public setContentScrimResource(resId: number): void;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public setScrimVisibleHeightTrigger(height: number): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public getLineSpacingMultiplier(): number;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public setVisibility(visibility: number): void;
						public getExpandedTitleTextSize(): number;
						public setExtraMultilineHeightEnabled(extraMultilineHeightEnabled: boolean): void;
						public getTitleTextEllipsize(): android.text.TextUtils.TruncateAt;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public verifyDrawable(who: android.graphics.drawable.Drawable): boolean;
						public drawableStateChanged(): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public setExpandedTitleMarginTop(margin: number): void;
						public setStatusBarScrimResource(resId: number): void;
						public getCollapsedTitleGravity(): number;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
						public getExpandedTitleMarginStart(): number;
						public generateDefaultLayoutParams(): android.view.ViewGroup.LayoutParams;
						public setTitleEnabled(enabled: boolean): void;
						public generateLayoutParams(lp: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
					}
					export module CollapsingToolbarLayout {
						export class LayoutParams extends android.widget.FrameLayout.LayoutParams {
							public static class: java.lang.Class<com.google.android.material.appbar.CollapsingToolbarLayout.LayoutParams>;
							public static COLLAPSE_MODE_OFF: number;
							public static COLLAPSE_MODE_PIN: number;
							public static COLLAPSE_MODE_PARALLAX: number;
							public constructor(c: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(source: com.google.android.material.appbar.CollapsingToolbarLayout.LayoutParams);
							public constructor(source: android.widget.FrameLayout.LayoutParams);
							public getCollapseMode(): number;
							public setParallaxMultiplier(multiplier: number): void;
							public getParallaxMultiplier(): number;
							public constructor(source: android.view.ViewGroup.LayoutParams);
							public constructor(source: android.view.ViewGroup.MarginLayoutParams);
							public constructor(p: android.view.ViewGroup.LayoutParams);
							public constructor(width: number, height: number, gravity: number);
							public setCollapseMode(collapseMode: number): void;
							public constructor(width: number, height: number);
						}
						export class OffsetUpdateListener extends java.lang.Object implements com.google.android.material.appbar.AppBarLayout.OnOffsetChangedListener {
							public static class: java.lang.Class<com.google.android.material.appbar.CollapsingToolbarLayout.OffsetUpdateListener>;
							public onOffsetChanged(param0: com.google.android.material.appbar.AppBarLayout, param1: number): void;
							public onOffsetChanged(param0: any, param1: number): void;
							public onOffsetChanged(layout: com.google.android.material.appbar.AppBarLayout, verticalOffset: number): void;
						}
						export class StaticLayoutBuilderConfigurer extends java.lang.Object implements com.google.android.material.internal.StaticLayoutBuilderConfigurer {
							public static class: java.lang.Class<com.google.android.material.appbar.CollapsingToolbarLayout.StaticLayoutBuilderConfigurer>;
							/**
							 * Constructs a new instance of the com.google.android.material.appbar.CollapsingToolbarLayout$StaticLayoutBuilderConfigurer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								configure(param0: android.text.StaticLayout.Builder): void;
							});
							public constructor();
							public configure(param0: android.text.StaticLayout.Builder): void;
						}
						export class TitleCollapseMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.appbar.CollapsingToolbarLayout.TitleCollapseMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.appbar.CollapsingToolbarLayout$TitleCollapseMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export abstract class HeaderBehavior<V>  extends com.google.android.material.appbar.ViewOffsetBehavior<any> {
						public static class: java.lang.Class<com.google.android.material.appbar.HeaderBehavior<any>>;
						public onInterceptTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, ev: android.view.MotionEvent): boolean;
						public constructor();
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public onTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public onInterceptTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public onTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, ev: android.view.MotionEvent): boolean;
					}
					export module HeaderBehavior {
						export class FlingRunnable extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<com.google.android.material.appbar.HeaderBehavior.FlingRunnable>;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export abstract class HeaderScrollingViewBehavior extends com.google.android.material.appbar.ViewOffsetBehavior<android.view.View> {
						public static class: java.lang.Class<com.google.android.material.appbar.HeaderScrollingViewBehavior>;
						public onMeasureChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, parentWidthMeasureSpec: number, widthUsed: number, parentHeightMeasureSpec: number, heightUsed: number): boolean;
						public constructor();
						public shouldHeaderOverlapScrollingChild(): boolean;
						public layoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, layoutDirection: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public getOverlayTop(): number;
						public layoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): void;
						public setOverlayTop(overlayTop: number): void;
						public onMeasureChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number, param3: number, param4: number, param5: number): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export class MaterialToolbar extends androidx.appcompat.widget.Toolbar {
						public static class: java.lang.Class<com.google.android.material.appbar.MaterialToolbar>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setTitleCentered(titleCentered: boolean): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public removeMenuProvider(param0: androidx.core.view.MenuProvider): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public addMenuProvider(param0: androidx.core.view.MenuProvider, param1: androidx.lifecycle.LifecycleOwner): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public setLogoAdjustViewBounds(logoAdjustViewBounds: boolean): void;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setLogoScaleType(logoScaleType: android.widget.ImageView.ScaleType): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public isSubtitleCentered(): boolean;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setSubtitleCentered(subtitleCentered: boolean): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public invalidateMenu(): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public clearNavigationIconTint(): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getNavigationIconTint(): java.lang.Integer;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setNavigationIcon(drawable: android.graphics.drawable.Drawable): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addMenuProvider(param0: androidx.core.view.MenuProvider): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public setNavigationIcon(param0: number): void;
						public inflateMenu(i: number): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public inflateMenu(param0: number): void;
						public isLogoAdjustViewBounds(): boolean;
						public setElevation(elevation: number): void;
						public isTitleCentered(): boolean;
						public getLogoScaleType(): android.widget.ImageView.ScaleType;
						public setNavigationIconTint(navigationIconTint: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setNavigationIcon(param0: android.graphics.drawable.Drawable): void;
						public addMenuProvider(param0: androidx.core.view.MenuProvider, param1: androidx.lifecycle.LifecycleOwner, param2: androidx.lifecycle.Lifecycle.State): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export class ViewOffsetBehavior<V>  extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<any> {
						public static class: java.lang.Class<com.google.android.material.appbar.ViewOffsetBehavior<any>>;
						public constructor();
						public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): boolean;
						public setVerticalOffsetEnabled(verticalOffsetEnabled: boolean): void;
						public isHorizontalOffsetEnabled(): boolean;
						public setTopAndBottomOffset(offset: number): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setHorizontalOffsetEnabled(horizontalOffsetEnabled: boolean): void;
						public isVerticalOffsetEnabled(): boolean;
						public layoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): void;
						public setLeftAndRightOffset(offset: number): boolean;
						public getLeftAndRightOffset(): number;
						public getTopAndBottomOffset(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export class ViewOffsetHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.appbar.ViewOffsetHelper>;
						public getLayoutTop(): number;
						public getLayoutLeft(): number;
						public setHorizontalOffsetEnabled(horizontalOffsetEnabled: boolean): void;
						public isVerticalOffsetEnabled(): boolean;
						public setLeftAndRightOffset(offset: number): boolean;
						public constructor(view: android.view.View);
						public getLeftAndRightOffset(): number;
						public setVerticalOffsetEnabled(verticalOffsetEnabled: boolean): void;
						public isHorizontalOffsetEnabled(): boolean;
						public getTopAndBottomOffset(): number;
						public setTopAndBottomOffset(offset: number): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module appbar {
					export class ViewUtilsLollipop extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.appbar.ViewUtilsLollipop>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module badge {
					export class BadgeDrawable extends android.graphics.drawable.Drawable implements com.google.android.material.internal.TextDrawableHelper.TextDrawableDelegate {
						public static class: java.lang.Class<com.google.android.material.badge.BadgeDrawable>;
						public static TOP_END: number;
						public static TOP_START: number;
						public static BOTTOM_END: number;
						public static BOTTOM_START: number;
						public static BADGE_CONTENT_NOT_TRUNCATED: number;
						public getMaxCharacterCount(): number;
						public draw(canvas: android.graphics.Canvas): void;
						public updateBadgeCoordinates(anchorView: android.view.View, customBadgeParent: android.widget.FrameLayout): void;
						public onStateChange(state: number[]): boolean;
						public setVisible(visible: boolean, restart: boolean): boolean;
						public setVerticalOffsetWithoutText(px: number): void;
						public static createFromResource(context: android.content.Context, id: number): com.google.android.material.badge.BadgeDrawable;
						public setHorizontalPadding(horizontalPadding: number): void;
						public getBadgeTextColor(): number;
						public isStateful(): boolean;
						public setAutoAdjustToWithinGrandparentBounds(autoAdjustToWithinGrandparentBounds: boolean): void;
						public setBadgeWithTextShapeAppearance(id: number): void;
						public setContentDescriptionExceedsMaxBadgeNumberStringResource(stringsResource: number): void;
						public setVerticalOffsetWithText(px: number): void;
						public getNumber(): number;
						public setMaxNumber(maxNumber: number): void;
						public getVerticalOffsetWithText(): number;
						public hasText(): boolean;
						public getVerticalOffsetWithoutText(): number;
						public getContentDescription(): string;
						public getHorizontalOffsetWithText(): number;
						public setBadgeTextColor(badgeTextColor: number): void;
						public setBadgeNumberLocale(locale: java.util.Locale): void;
						public getHorizontalPadding(): number;
						public getBackgroundColor(): number;
						public draw(param0: android.graphics.Canvas): void;
						public setContentDescriptionNumberless(charSequence: string): void;
						public getBadgeGravity(): number;
						public hasNumber(): boolean;
						public setVerticalPadding(verticalPadding: number): void;
						public static create(context: android.content.Context): com.google.android.material.badge.BadgeDrawable;
						public updateBadgeCoordinates(anchorView: android.view.View): void;
						public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
						public setAlpha(param0: number): void;
						public onTextSizeChange(): void;
						public setBadgeWithTextShapeAppearanceOverlay(id: number): void;
						public setTextAppearance(id: number): void;
						public clearNumber(): void;
						public getMaxNumber(): number;
						public setMaxCharacterCount(maxCharacterCount: number): void;
						public setContentDescriptionForText(charSequence: string): void;
						public setNumber(number: number): void;
						public setVerticalOffset(px: number): void;
						public getVerticalOffset(): number;
						public setHorizontalOffset(px: number): void;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						public setBackgroundColor(backgroundColor: number): void;
						public getAlpha(): number;
						/** @deprecated */
						public updateBadgeCoordinates(anchorView: android.view.View, customBadgeParent: android.view.ViewGroup): void;
						public getText(): string;
						public setHorizontalOffsetWithText(px: number): void;
						public getHorizontalOffset(): number;
						public setVisible(visible: boolean): void;
						public getCustomBadgeParent(): android.widget.FrameLayout;
						public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
						public setAlpha(alpha: number): void;
						public getIntrinsicWidth(): number;
						public getIntrinsicHeight(): number;
						public getBadgeNumberLocale(): java.util.Locale;
						public setBadgeWithoutTextShapeAppearanceOverlay(id: number): void;
						public setLargeFontVerticalOffsetAdjustment(px: number): void;
						public clearText(): void;
						public getOpacity(): number;
						public setText(text: string): void;
						public setBadgeWithoutTextShapeAppearance(id: number): void;
						public setBadgeGravity(gravity: number): void;
						public getState(): number[];
						public setContentDescriptionQuantityStringsResource(stringsResource: number): void;
						public onStateChange(param0: number[]): boolean;
						public setHorizontalOffsetWithoutText(px: number): void;
						public getHorizontalOffsetWithoutText(): number;
						public getLargeFontVerticalOffsetAdjustment(): number;
						public getVerticalPadding(): number;
					}
					export module BadgeDrawable {
						export class BadgeGravity extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.badge.BadgeDrawable.BadgeGravity>;
							/**
							 * Constructs a new instance of the com.google.android.material.badge.BadgeDrawable$BadgeGravity interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module badge {
					export class BadgeState extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.badge.BadgeState>;
					}
					export module BadgeState {
						export class State extends java.lang.Object implements android.os.Parcelable {
							public static class: java.lang.Class<com.google.android.material.badge.BadgeState.State>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.badge.BadgeState.State>;
							public constructor();
							public writeToParcel(dest: android.os.Parcel, flags: number): void;
							public describeContents(): number;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module badge {
					export class BadgeUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.badge.BadgeUtils>;
						public static USE_COMPAT_PARENT: boolean;
						public static attachBadgeDrawable(badgeDrawable: com.google.android.material.badge.BadgeDrawable, anchor: android.view.View, customBadgeParent: android.widget.FrameLayout): void;
						public static detachBadgeDrawable(badgeDrawable: com.google.android.material.badge.BadgeDrawable, toolbar: androidx.appcompat.widget.Toolbar, menuItemId: number): void;
						public static updateBadgeBounds(rect: android.graphics.Rect, centerX: number, centerY: number, halfWidth: number, halfHeight: number): void;
						public static attachBadgeDrawable(badgeDrawable: com.google.android.material.badge.BadgeDrawable, anchor: android.view.View): void;
						public static createBadgeDrawablesFromSavedStates(context: android.content.Context, badgeStates: com.google.android.material.internal.ParcelableSparseArray): android.util.SparseArray<com.google.android.material.badge.BadgeDrawable>;
						public static createParcelableBadgeStates(badgeDrawables: android.util.SparseArray<com.google.android.material.badge.BadgeDrawable>): com.google.android.material.internal.ParcelableSparseArray;
						public static attachBadgeDrawable(badgeDrawable: com.google.android.material.badge.BadgeDrawable, toolbar: androidx.appcompat.widget.Toolbar, menuItemId: number, customBadgeParent: android.widget.FrameLayout): void;
						public static detachBadgeDrawable(badgeDrawable: com.google.android.material.badge.BadgeDrawable, anchor: android.view.View): void;
						public static setBadgeDrawableBounds(badgeDrawable: com.google.android.material.badge.BadgeDrawable, anchor: android.view.View, compatBadgeParent: android.widget.FrameLayout): void;
						public static attachBadgeDrawable(badgeDrawable: com.google.android.material.badge.BadgeDrawable, toolbar: androidx.appcompat.widget.Toolbar, menuItemId: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module badge {
					export class ExperimentalBadgeUtils extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.google.android.material.badge.ExperimentalBadgeUtils>;
						/**
						 * Constructs a new instance of the com.google.android.material.badge.ExperimentalBadgeUtils interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module behavior {
					export class HideBottomViewOnScrollBehavior<V>  extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<any> {
						public static class: java.lang.Class<com.google.android.material.behavior.HideBottomViewOnScrollBehavior<any>>;
						public static STATE_SCROLLED_DOWN: number;
						public static STATE_SCROLLED_UP: number;
						public onStartNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: android.view.View, param4: number, param5: number): boolean;
						public onNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number, type: number, consumed: number[]): void;
						public addOnScrollStateChangedListener(listener: com.google.android.material.behavior.HideBottomViewOnScrollBehavior.OnScrollStateChangedListener): void;
						public removeOnScrollStateChangedListener(listener: com.google.android.material.behavior.HideBottomViewOnScrollBehavior.OnScrollStateChangedListener): void;
						public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number, param7: number): void;
						public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number[]): void;
						public constructor();
						public onStartNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: android.view.View, param4: number): boolean;
						public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
						public setAdditionalHiddenOffsetY(child: any, offset: number): void;
						public onStartNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, directTargetChild: android.view.View, target: android.view.View, nestedScrollAxes: number, type: number): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): boolean;
						public slideUp(child: any): void;
						public isScrolledUp(): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number): void;
						public isScrolledDown(): boolean;
						public slideDown(child: any): void;
						public slideUp(child: any, animate: boolean): void;
						public clearOnScrollStateChangedListeners(): void;
						public slideDown(child: any, animate: boolean): void;
					}
					export module HideBottomViewOnScrollBehavior {
						export class OnScrollStateChangedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.behavior.HideBottomViewOnScrollBehavior.OnScrollStateChangedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.behavior.HideBottomViewOnScrollBehavior$OnScrollStateChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onStateChanged(param0: android.view.View, param1: number): void;
							});
							public constructor();
							public onStateChanged(param0: android.view.View, param1: number): void;
						}
						export class ScrollState extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.behavior.HideBottomViewOnScrollBehavior.ScrollState>;
							/**
							 * Constructs a new instance of the com.google.android.material.behavior.HideBottomViewOnScrollBehavior$ScrollState interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module behavior {
					export class SwipeDismissBehavior<V>  extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<any> {
						public static class: java.lang.Class<com.google.android.material.behavior.SwipeDismissBehavior<any>>;
						public static STATE_IDLE: number;
						public static STATE_DRAGGING: number;
						public static STATE_SETTLING: number;
						public static SWIPE_DIRECTION_START_TO_END: number;
						public static SWIPE_DIRECTION_END_TO_START: number;
						public static SWIPE_DIRECTION_ANY: number;
						public constructor();
						public setDragDismissDistance(distance: number): void;
						public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
						public onInterceptTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, event: android.view.MotionEvent): boolean;
						public onTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, event: android.view.MotionEvent): boolean;
						public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): boolean;
						public setSwipeDirection(direction: number): void;
						public setStartAlphaSwipeDistance(fraction: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public canSwipeDismissView(view: android.view.View): boolean;
						public getListener(): com.google.android.material.behavior.SwipeDismissBehavior.OnDismissListener;
						public onTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public getDragState(): number;
						public setEndAlphaSwipeDistance(fraction: number): void;
						public onInterceptTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public setListener(listener: com.google.android.material.behavior.SwipeDismissBehavior.OnDismissListener): void;
						public setSensitivity(sensitivity: number): void;
					}
					export module SwipeDismissBehavior {
						export class OnDismissListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.behavior.SwipeDismissBehavior.OnDismissListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.behavior.SwipeDismissBehavior$OnDismissListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onDismiss(param0: android.view.View): void;
								onDragStateChanged(param0: number): void;
							});
							public constructor();
							public onDragStateChanged(param0: number): void;
							public onDismiss(param0: android.view.View): void;
						}
						export class SettleRunnable extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<com.google.android.material.behavior.SwipeDismissBehavior.SettleRunnable>;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomappbar {
					export class BottomAppBar extends androidx.appcompat.widget.Toolbar implements androidx.coordinatorlayout.widget.CoordinatorLayout.AttachedBehavior {
						public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar>;
						public static FAB_ALIGNMENT_MODE_CENTER: number;
						public static FAB_ALIGNMENT_MODE_END: number;
						public static FAB_ANCHOR_MODE_EMBED: number;
						public static FAB_ANCHOR_MODE_CRADLE: number;
						public static FAB_ANIMATION_MODE_SCALE: number;
						public static FAB_ANIMATION_MODE_SLIDE: number;
						public static MENU_ALIGNMENT_MODE_AUTO: number;
						public static MENU_ALIGNMENT_MODE_START: number;
						public removeOnScrollStateChangedListener(listener: com.google.android.material.behavior.HideBottomViewOnScrollBehavior.OnScrollStateChangedListener): void;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public createFabDefaultXAnimation(targetMode: number, animators: java.util.List<android.animation.Animator>): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public setFabCradleRoundedCornerRadius(roundedCornerRadius: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setFabAnchorMode(fabAnchorMode: number): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public getBehavior(): com.google.android.material.bottomappbar.BottomAppBar.Behavior;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public getHideOnScroll(): boolean;
						public onSaveInstanceState(): android.os.Parcelable;
						public setTitle(param0: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public getFabAnimationMode(): number;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public setFabAlignmentModeAndReplaceMenu(fabAlignmentMode: number, newMenu: number): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public setSubtitle(subtitle: string): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public setMenuAlignmentMode(menuAlignmentMode: number): void;
						public getCradleVerticalOffset(): number;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior;
						public isScrolledDown(): boolean;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setTitle(title: string): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public replaceMenu(newMenu: number): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public removeMenuProvider(param0: androidx.core.view.MenuProvider): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public addMenuProvider(param0: androidx.core.view.MenuProvider, param1: androidx.lifecycle.LifecycleOwner): void;
						public isScrolledUp(): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public performShow(): void;
						public setSubtitle(param0: string): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setSubtitle(param0: number): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getFabCradleMargin(): number;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setHideOnScroll(hide: boolean): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public invalidateMenu(): void;
						public getFabAlignmentMode(): number;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getTextAlignment(): number;
						public getFabCradleRoundedCornerRadius(): number;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public setFabAlignmentMode(fabAlignmentMode: number): void;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public performHide(animate: boolean): void;
						public sendAccessibilityEvent(param0: number): void;
						public onLayout(changed: boolean, l: number, t: number, r: number, b: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public getActionMenuViewTranslationX(actionMenuView: androidx.appcompat.widget.ActionMenuView, fabAlignmentMode: number, fabAttached: boolean): number;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public performHide(): void;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public setTitle(param0: string): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public setFabAnimationMode(fabAnimationMode: number): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public clearOnScrollStateChangedListeners(): void;
						public setNavigationIcon(drawable: android.graphics.drawable.Drawable): void;
						public addOnScrollStateChangedListener(listener: com.google.android.material.behavior.HideBottomViewOnScrollBehavior.OnScrollStateChangedListener): void;
						public setFabAlignmentModeEndMargin(margin: number): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setCradleVerticalOffset(verticalOffset: number): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public performShow(animate: boolean): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addMenuProvider(param0: androidx.core.view.MenuProvider): void;
						public getFabAnchorMode(): number;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public getFabAlignmentModeEndMargin(): number;
						public removeView(view: android.view.View): void;
						public setNavigationIcon(param0: number): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setBackgroundTint(backgroundTint: android.content.res.ColorStateList): void;
						public setElevation(elevation: number): void;
						public getMenuAlignmentMode(): number;
						public setNavigationIconTint(navigationIconTint: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setFabCradleMargin(cradleMargin: number): void;
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public setNavigationIcon(param0: android.graphics.drawable.Drawable): void;
						public getBackgroundTint(): android.content.res.ColorStateList;
						public addMenuProvider(param0: androidx.core.view.MenuProvider, param1: androidx.lifecycle.LifecycleOwner, param2: androidx.lifecycle.Lifecycle.State): void;
					}
					export module BottomAppBar {
						export class AnimationListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar.AnimationListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomappbar.BottomAppBar$AnimationListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onAnimationStart(param0: com.google.android.material.bottomappbar.BottomAppBar): void;
								onAnimationEnd(param0: com.google.android.material.bottomappbar.BottomAppBar): void;
							});
							public constructor();
							public onAnimationEnd(param0: com.google.android.material.bottomappbar.BottomAppBar): void;
							public onAnimationStart(param0: com.google.android.material.bottomappbar.BottomAppBar): void;
						}
						export class Behavior extends com.google.android.material.behavior.HideBottomViewOnScrollBehavior<com.google.android.material.bottomappbar.BottomAppBar> {
							public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar.Behavior>;
							public constructor();
							public onStartNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: android.view.View, param4: number): boolean;
							public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.bottomappbar.BottomAppBar, layoutDirection: number): boolean;
							public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onStartNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, directTargetChild: android.view.View, target: android.view.View, nestedScrollAxes: number, type: number): boolean;
							public onStartNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.bottomappbar.BottomAppBar, directTargetChild: android.view.View, target: android.view.View, axes: number, type: number): boolean;
						}
						export class FabAlignmentMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar.FabAlignmentMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomappbar.BottomAppBar$FabAlignmentMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class FabAnchorMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar.FabAnchorMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomappbar.BottomAppBar$FabAnchorMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class FabAnimationMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar.FabAnimationMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomappbar.BottomAppBar$FabAnimationMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class MenuAlignmentMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar.MenuAlignmentMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomappbar.BottomAppBar$MenuAlignmentMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBar.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.bottomappbar.BottomAppBar.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public constructor(superState: android.os.Parcelable);
							public constructor(_in_: android.os.Parcel, loader: java.lang.ClassLoader);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
							public constructor(param0: android.os.Parcel);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomappbar {
					export class BottomAppBarTopEdgeTreatment extends com.google.android.material.shape.EdgeTreatment implements java.lang.Cloneable {
						public static class: java.lang.Class<com.google.android.material.bottomappbar.BottomAppBarTopEdgeTreatment>;
						public constructor();
						public getHorizontalOffset(): number;
						/** @deprecated */
						public getEdgePath(length: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public getFabCornerRadius(): number;
						public getEdgePath(length: number, center: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public getFabDiameter(): number;
						public setFabDiameter(fabDiameter: number): void;
						public setFabCornerSize(size: number): void;
						public constructor(fabMargin: number, roundedCornerRadius: number, cradleVerticalOffset: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomnavigation {
					export class BottomNavigationItemView extends com.google.android.material.navigation.NavigationBarItemView {
						public static class: java.lang.Class<com.google.android.material.bottomnavigation.BottomNavigationItemView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public getItemLayoutResId(): number;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public initialize(itemData: androidx.appcompat.view.menu.MenuItemImpl, menuType: number): void;
						public canResolveTextDirection(): boolean;
						public setEnabled(enabled: boolean): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public setShortcut(param0: boolean, param1: string): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setTitle(title: string): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public setChecked(checked: boolean): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public setCheckable(checkable: boolean): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public setEnabled(param0: boolean): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public getItemData(): androidx.appcompat.view.menu.MenuItemImpl;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setIcon(iconDrawable: android.graphics.drawable.Drawable): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public getItemDefaultMarginResId(): number;
						public sendAccessibilityEvent(param0: number): void;
						public showsIcon(): boolean;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public prefersCondensedTitle(): boolean;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public setIcon(param0: android.graphics.drawable.Drawable): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public setTitle(param0: string): void;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setCheckable(param0: boolean): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public initialize(param0: androidx.appcompat.view.menu.MenuItemImpl, param1: number): void;
						public setShortcut(showShortcut: boolean, shortcutKey: string): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomnavigation {
					export class BottomNavigationMenuView extends com.google.android.material.navigation.NavigationBarMenuView {
						public static class: java.lang.Class<com.google.android.material.bottomnavigation.BottomNavigationMenuView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public createNavigationBarItemView(param0: android.content.Context): com.google.android.material.navigation.NavigationBarItemView;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setItemHorizontalTranslationEnabled(itemHorizontalTranslationEnabled: boolean): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public initialize(param0: androidx.appcompat.view.menu.MenuBuilder): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public createNavigationBarItemView(context: android.content.Context): com.google.android.material.navigation.NavigationBarItemView;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public initialize(menu: androidx.appcompat.view.menu.MenuBuilder): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public getWindowAnimations(): number;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public isItemHorizontalTranslationEnabled(): boolean;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomnavigation {
					export class BottomNavigationView extends com.google.android.material.navigation.NavigationBarView {
						public static class: java.lang.Class<com.google.android.material.bottomnavigation.BottomNavigationView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getMaxItemCount(): number;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setItemHorizontalTranslationEnabled(itemHorizontalTranslationEnabled: boolean): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						/** @deprecated */
						public setOnNavigationItemSelectedListener(listener: com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemSelectedListener): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public isItemHorizontalTranslationEnabled(): boolean;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public createNavigationBarMenuView(context: android.content.Context): com.google.android.material.navigation.NavigationBarMenuView;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public createNavigationBarMenuView(param0: android.content.Context): com.google.android.material.navigation.NavigationBarMenuView;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						/** @deprecated */
						public setOnNavigationItemReselectedListener(listener: com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemReselectedListener): void;
					}
					export module BottomNavigationView {
						export class OnNavigationItemReselectedListener extends java.lang.Object implements com.google.android.material.navigation.NavigationBarView.OnItemReselectedListener {
							public static class: java.lang.Class<com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemReselectedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomnavigation.BottomNavigationView$OnNavigationItemReselectedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onNavigationItemReselected(param0: android.view.MenuItem): void;
							});
							public constructor();
							public onNavigationItemReselected(param0: android.view.MenuItem): void;
						}
						export class OnNavigationItemSelectedListener extends java.lang.Object implements com.google.android.material.navigation.NavigationBarView.OnItemSelectedListener {
							public static class: java.lang.Class<com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemSelectedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomnavigation.BottomNavigationView$OnNavigationItemSelectedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onNavigationItemSelected(param0: android.view.MenuItem): boolean;
							});
							public constructor();
							public onNavigationItemSelected(param0: android.view.MenuItem): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomnavigation {
					export class LabelVisibilityMode extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.google.android.material.bottomnavigation.LabelVisibilityMode>;
						/**
						 * Constructs a new instance of the com.google.android.material.bottomnavigation.LabelVisibilityMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public static LABEL_VISIBILITY_AUTO: number;
						public static LABEL_VISIBILITY_LABELED: number;
						public static LABEL_VISIBILITY_SELECTED: number;
						public static LABEL_VISIBILITY_UNLABELED: number;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomsheet {
					export class BottomSheetBehavior<V>  extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<any> implements com.google.android.material.motion.MaterialBackHandler  {
						public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetBehavior<any>>;
						public static STATE_DRAGGING: number;
						public static STATE_SETTLING: number;
						public static STATE_EXPANDED: number;
						public static STATE_COLLAPSED: number;
						public static STATE_HIDDEN: number;
						public static STATE_HALF_EXPANDED: number;
						public static PEEK_HEIGHT_AUTO: number;
						public static SAVE_PEEK_HEIGHT: number;
						public static SAVE_FIT_TO_CONTENTS: number;
						public static SAVE_HIDEABLE: number;
						public static SAVE_SKIP_COLLAPSED: number;
						public static SAVE_ALL: number;
						public static SAVE_NONE: number;
						public onNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number, type: number, consumed: number[]): void;
						public onSaveInstanceState(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any): android.os.Parcelable;
						public setPeekHeight(peekHeight: number, animate: boolean): void;
						public startBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public onSaveInstanceState(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any): android.os.Parcelable;
						public onAttachedToLayoutParams(param0: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
						public onMeasureChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number, param3: number, param4: number, param5: number): boolean;
						public shouldSkipSmoothAnimation(): boolean;
						public setHideableInternal(hideable: boolean): void;
						public cancelBackProgress(): void;
						public onDetachedFromLayoutParams(): void;
						public getLastStableState(): number;
						public getMaxWidth(): number;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public setGestureInsetBottomIgnored(gestureInsetBottomIgnored: boolean): void;
						public static from(view: android.view.View): com.google.android.material.bottomsheet.BottomSheetBehavior<any>;
						public onTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public onStartNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: android.view.View, param4: number, param5: number): boolean;
						public setHideable(hideable: boolean): void;
						public constructor();
						public onAttachedToLayoutParams(layoutParams: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
						public onNestedPreScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number[], param6: number): void;
						public onStopNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, target: android.view.View, type: number): void;
						public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
						public onInterceptTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, event: android.view.MotionEvent): boolean;
						public shouldSkipHalfExpandedStateWhenDragging(): boolean;
						public setSkipCollapsed(skipCollapsed: boolean): void;
						public isGestureInsetBottomIgnored(): boolean;
						public getExpandedOffset(): number;
						public setSignificantVelocityThreshold(significantVelocityThreshold: number): void;
						public onNestedPreScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, target: android.view.View, dx: number, dy: number, consumed: number[], type: number): void;
						public isHideable(): boolean;
						public onRestoreInstanceState(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.os.Parcelable): void;
						public onNestedPreFling(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, target: android.view.View, velocityX: number, velocityY: number): boolean;
						public setMaxHeight(maxHeight: number): void;
						public getState(): number;
						public setShouldRemoveExpandedCorners(shouldRemoveExpandedCorners: boolean): void;
						public onStopNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): void;
						public getPeekHeight(): number;
						public setPeekHeight(peekHeight: number): void;
						public setDraggable(draggable: boolean): void;
						public isDraggable(): boolean;
						public startBackProgress(param0: androidx.activity.BackEventCompat): void;
						public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number, param7: number): void;
						public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number[]): void;
						public setHalfExpandedRatio(ratio: number): void;
						/** @deprecated */
						public setBottomSheetCallback(callback: com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback): void;
						public onTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, event: android.view.MotionEvent): boolean;
						public disableShapeAnimations(): void;
						public onNestedPreFling(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number): boolean;
						public setMaxWidth(maxWidth: number): void;
						public getSaveFlags(): number;
						public addBottomSheetCallback(callback: com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback): void;
						public isShouldRemoveExpandedCorners(): boolean;
						public getMaxHeight(): number;
						public getHalfExpandedRatio(): number;
						public onInterceptTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public getSignificantVelocityThreshold(): number;
						public shouldExpandOnUpwardDrag(dragDurationMillis: number, param1: number): boolean;
						public onMeasureChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, parentWidthMeasureSpec: number, widthUsed: number, parentHeightMeasureSpec: number, heightUsed: number): boolean;
						public isFitToContents(): boolean;
						public getSkipCollapsed(): boolean;
						public onNestedPreScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number[]): void;
						public onStartNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: android.view.View, param4: number): boolean;
						public onStartNestedScroll(coordinatorLayout: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, directTargetChild: android.view.View, target: android.view.View, axes: number, type: number): boolean;
						public setState(state: number): void;
						public setSaveFlags(flags: number): void;
						public isNestedScrollingCheckEnabled(): boolean;
						public setHideFriction(hideFriction: number): void;
						public getHideFriction(): number;
						public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): boolean;
						public onStopNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number): void;
						public setFitToContents(fitToContents: boolean): void;
						public handleBackInvoked(): void;
						public calculateSlideOffset(): number;
						public updateBackProgress(param0: androidx.activity.BackEventCompat): void;
						public setExpandedOffset(offset: number): void;
						public setUpdateImportantForAccessibilityOnSiblings(updateImportantForAccessibilityOnSiblings: boolean): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public onNestedScroll(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View, param3: number, param4: number, param5: number, param6: number): void;
						public isHideableWhenDragging(): boolean;
						public onRestoreInstanceState(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, state: android.os.Parcelable): void;
						public removeBottomSheetCallback(callback: com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback): void;
					}
					export module BottomSheetBehavior {
						export abstract class BottomSheetCallback extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback>;
							public constructor();
							public onStateChanged(param0: android.view.View, param1: number): void;
							public onSlide(param0: android.view.View, param1: number): void;
						}
						export class SaveFlags extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetBehavior.SaveFlags>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomsheet.BottomSheetBehavior$SaveFlags interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetBehavior.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.bottomsheet.BottomSheetBehavior.SavedState>;
							public constructor(param0: android.os.Parcelable);
							/** @deprecated */
							public constructor(superstate: android.os.Parcelable, state: number);
							public constructor(source: android.os.Parcel);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public constructor(source: android.os.Parcel, loader: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public constructor(superState: android.os.Parcelable, behavior: com.google.android.material.bottomsheet.BottomSheetBehavior<any>);
							public writeToParcel(out: android.os.Parcel, flags: number): void;
							public constructor(param0: android.os.Parcel);
						}
						export class StableState extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetBehavior.StableState>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomsheet.BottomSheetBehavior$StableState interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class State extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetBehavior.State>;
							/**
							 * Constructs a new instance of the com.google.android.material.bottomsheet.BottomSheetBehavior$State interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class StateSettlingTracker extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetBehavior.StateSettlingTracker>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomsheet {
					export class BottomSheetDialog extends androidx.appcompat.app.AppCompatDialog {
						public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetDialog>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public dismiss(): void;
						public dispatchGenericMotionEvent(ev: android.view.MotionEvent): boolean;
						public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
						public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
						public constructor(context: android.content.Context);
						public onCreate(savedInstanceState: android.os.Bundle): void;
						public constructor(param0: android.content.Context);
						public getBehavior(): com.google.android.material.bottomsheet.BottomSheetBehavior<android.widget.FrameLayout>;
						public setContentView(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public onCreatePanelView(param0: number): android.view.View;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
						public setContentView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public setCancelable(flag: boolean): void;
						public dispatchPopulateAccessibilityEvent(event: android.view.accessibility.AccessibilityEvent): boolean;
						public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
						public setContentView(param0: android.view.View): void;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
						public constructor(param0: android.content.Context, param1: number);
						public onContentChanged(): void;
						public cancel(): void;
						public constructor(context: android.content.Context, theme: number);
						public constructor(context: android.content.Context, cancelable: boolean, cancelListener: android.content.DialogInterface.OnCancelListener);
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchTouchEvent(ev: android.view.MotionEvent): boolean;
						public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onSupportActionModeFinished(param0: androidx.appcompat.view.ActionMode): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
						public constructor(param0: android.content.Context, param1: boolean, param2: android.content.DialogInterface.OnCancelListener);
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setContentView(view: android.view.View): void;
						public onCreateContextMenu(menu: android.view.ContextMenu, v: android.view.View, menuInfo: android.view.ContextMenu.ContextMenuInfo): void;
						public onStart(): void;
						public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
						public getEdgeToEdgeEnabled(): boolean;
						public onActionModeFinished(param0: android.view.ActionMode): void;
						public onProvideKeyboardShortcuts(data: java.util.List<any>, menu: android.view.Menu, deviceId: number): void;
						public onAttachedToWindow(): void;
						public onWindowFocusChanged(hasFocus: boolean): void;
						public onSearchRequested(): boolean;
						public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
						public onCreatePanelMenu(featureId: number, menu: android.view.Menu): boolean;
						public setCancelable(cancelable: boolean): void;
						public setDismissWithAnimation(dismissWithAnimation: boolean): void;
						public onWindowStartingSupportActionMode(param0: androidx.appcompat.view.ActionMode.Callback): androidx.appcompat.view.ActionMode;
						public onWindowAttributesChanged(params: android.view.WindowManager.LayoutParams): void;
						public onSearchRequested(searchEvent: any): boolean;
						public setContentView(layoutResId: number): void;
						public setCanceledOnTouchOutside(cancel: boolean): void;
						public getDismissWithAnimation(): boolean;
						public onPanelClosed(featureId: number, menu: android.view.Menu): void;
						public onSearchRequested(param0: any): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
						public onCreate(param0: android.os.Bundle): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public onActionModeStarted(param0: android.view.ActionMode): void;
						public onActionModeStarted(mode: android.view.ActionMode): void;
						public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
						public onMenuOpened(featureId: number, menu: android.view.Menu): boolean;
						/** @deprecated */
						public static setLightStatusBar(view: android.view.View, isLight: boolean): void;
						public dispatchTrackballEvent(ev: android.view.MotionEvent): boolean;
						public onDetachedFromWindow(): void;
						public onPanelClosed(param0: number, param1: android.view.Menu): void;
						public onSupportActionModeStarted(param0: androidx.appcompat.view.ActionMode): void;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public onMenuItemSelected(featureId: number, item: android.view.MenuItem): boolean;
						public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
						public onPreparePanel(featureId: number, view: android.view.View, menu: android.view.Menu): boolean;
						public onCreatePanelView(featureId: number): android.view.View;
						public onWindowFocusChanged(param0: boolean): void;
						public onActionModeFinished(mode: android.view.ActionMode): void;
						public setContentView(param0: number): void;
					}
					export module BottomSheetDialog {
						export class EdgeToEdgeCallback extends com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetDialog.EdgeToEdgeCallback>;
							public onSlide(bottomSheet: android.view.View, slideOffset: number): void;
							public onStateChanged(param0: android.view.View, param1: number): void;
							public onStateChanged(bottomSheet: android.view.View, newState: number): void;
							public onSlide(param0: android.view.View, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomsheet {
					export class BottomSheetDialogFragment extends androidx.appcompat.app.AppCompatDialogFragment {
						public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetDialogFragment>;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultRegistry, param2: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public constructor();
						public getSavedStateRegistry(): androidx.savedstate.SavedStateRegistry;
						public dismiss(): void;
						public onConfigurationChanged(param0: android.content.res.Configuration): void;
						public onCreateDialog(savedInstanceState: android.os.Bundle): android.app.Dialog;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public onLowMemory(): void;
						public onCancel(param0: android.content.DialogInterface): void;
						public onCreateDialog(param0: android.os.Bundle): android.app.Dialog;
						public constructor(contentLayoutId: number);
						public constructor(param0: number);
						public dismissAllowingStateLoss(): void;
						public getLifecycle(): androidx.lifecycle.Lifecycle;
						public getDefaultViewModelProviderFactory(): androidx.lifecycle.ViewModelProvider.Factory;
						public getViewModelStore(): androidx.lifecycle.ViewModelStore;
						public onDismiss(param0: android.content.DialogInterface): void;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
					}
					export module BottomSheetDialogFragment {
						export class BottomSheetDismissCallback extends com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback {
							public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetDialogFragment.BottomSheetDismissCallback>;
							public onSlide(bottomSheet: android.view.View, slideOffset: number): void;
							public onStateChanged(param0: android.view.View, param1: number): void;
							public onStateChanged(bottomSheet: android.view.View, newState: number): void;
							public onSlide(param0: android.view.View, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomsheet {
					export class BottomSheetDragHandleView extends androidx.appcompat.widget.AppCompatImageView implements android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener {
						public static class: java.lang.Class<com.google.android.material.bottomsheet.BottomSheetDragHandleView>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public onAttachedToWindow(): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public onAccessibilityStateChanged(param0: boolean): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public getSupportImageTintList(): android.content.res.ColorStateList;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getSupportImageTintMode(): android.graphics.PorterDuff.Mode;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportImageTintList(param0: android.content.res.ColorStateList): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public onDetachedFromWindow(): void;
						public sendAccessibilityEvent(eventType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setSupportImageTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onAccessibilityStateChanged(enabled: boolean): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module bottomsheet {
					export class InsetsAnimationCallback extends androidx.core.view.WindowInsetsAnimationCompat.Callback {
						public static class: java.lang.Class<com.google.android.material.bottomsheet.InsetsAnimationCallback>;
						public onProgress(param0: androidx.core.view.WindowInsetsCompat, param1: java.util.List<androidx.core.view.WindowInsetsAnimationCompat>): androidx.core.view.WindowInsetsCompat;
						public onPrepare(windowInsetsAnimationCompat: androidx.core.view.WindowInsetsAnimationCompat): void;
						public onPrepare(param0: androidx.core.view.WindowInsetsAnimationCompat): void;
						public constructor(param0: number);
						public onEnd(param0: androidx.core.view.WindowInsetsAnimationCompat): void;
						public onEnd(windowInsetsAnimationCompat: androidx.core.view.WindowInsetsAnimationCompat): void;
						public constructor(view: android.view.View);
						public onStart(param0: androidx.core.view.WindowInsetsAnimationCompat, param1: androidx.core.view.WindowInsetsAnimationCompat.BoundsCompat): androidx.core.view.WindowInsetsAnimationCompat.BoundsCompat;
						public onProgress(insets: androidx.core.view.WindowInsetsCompat, animationList: java.util.List<androidx.core.view.WindowInsetsAnimationCompat>): androidx.core.view.WindowInsetsCompat;
						public onStart(windowInsetsAnimationCompat: androidx.core.view.WindowInsetsAnimationCompat, boundsCompat: androidx.core.view.WindowInsetsAnimationCompat.BoundsCompat): androidx.core.view.WindowInsetsAnimationCompat.BoundsCompat;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module button {
					export class MaterialButton extends androidx.appcompat.widget.AppCompatButton implements android.widget.Checkable, com.google.android.material.shape.Shapeable {
						public static class: java.lang.Class<com.google.android.material.button.MaterialButton>;
						public static ICON_GRAVITY_START: number;
						public static ICON_GRAVITY_TEXT_START: number;
						public static ICON_GRAVITY_END: number;
						public static ICON_GRAVITY_TEXT_END: number;
						public static ICON_GRAVITY_TOP: number;
						public static ICON_GRAVITY_TEXT_TOP: number;
						public setStrokeWidth(strokeWidth: number): void;
						public getInsetTop(): number;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public setSupportBackgroundTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public performClick(): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public setCornerRadius(cornerRadius: number): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setBackgroundTintList(tintList: android.content.res.ColorStateList): void;
						public onSaveInstanceState(): android.os.Parcelable;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public setBackgroundColor(color: number): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public setInsetTop(insetTop: number): void;
						public setChecked(param0: boolean): void;
						public setTextAlignment(textAlignment: number): void;
						public setStrokeWidthResource(strokeWidthResourceId: number): void;
						public getIconGravity(): number;
						public setRippleColorResource(rippleColorResourceId: number): void;
						public getAutoSizeTextAvailableSizes(): number[];
						public sendAccessibilityEvent(eventType: number): void;
						public getStrokeColor(): android.content.res.ColorStateList;
						public getIconPadding(): number;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public onPreDraw(): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setIcon(icon: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public onAttachedToWindow(): void;
						public setChecked(checked: boolean): void;
						public setStrokeColorResource(strokeColorResourceId: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public clearOnCheckedChangeListeners(): void;
						public setSupportCompoundDrawablesTintList(param0: android.content.res.ColorStateList): void;
						public setBackgroundDrawable(background: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public getIcon(): android.graphics.drawable.Drawable;
						public setCheckable(checkable: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public setBackgroundResource(param0: number): void;
						public getAutoSizeStepGranularity(): number;
						public getAutoSizeMinTextSize(): number;
						public setIconPadding(iconPadding: number): void;
						public setAutoSizeTextTypeUniformWithPresetSizes(param0: number[], param1: number): void;
						public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public getRippleColor(): android.content.res.ColorStateList;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public refreshDrawableState(): void;
						public addOnCheckedChangeListener(listener: com.google.android.material.button.MaterialButton.OnCheckedChangeListener): void;
						public getIconTintMode(): android.graphics.PorterDuff.Mode;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public setIconSize(iconSize: number): void;
						public setSupportCompoundDrawablesTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setIconGravity(iconGravity: number): void;
						public getIconSize(): number;
						public setIconTint(iconTint: android.content.res.ColorStateList): void;
						public setBackgroundTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public sendAccessibilityEvent(param0: number): void;
						public onCreateDrawableState(extraSpace: number): number[];
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public onTextChanged(charSequence: string, i: number, i1: number, i2: number): void;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
						public getInsetBottom(): number;
						public getBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public setBackground(background: android.graphics.drawable.Drawable): void;
						public setPressed(pressed: boolean): void;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setIconTintMode(iconTintMode: android.graphics.PorterDuff.Mode): void;
						public removeOnCheckedChangeListener(listener: com.google.android.material.button.MaterialButton.OnCheckedChangeListener): void;
						public setToggleCheckedStateOnClick(toggleCheckedStateOnClick: boolean): void;
						public getAutoSizeMaxTextSize(): number;
						public setBackgroundResource(backgroundResourceId: number): void;
						public toggle(): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public setIconTintResource(iconTintResourceId: number): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public getCornerRadius(): number;
						public setBackgroundTintList(tint: android.content.res.ColorStateList): void;
						public setIconResource(iconResourceId: number): void;
						public isCheckable(): boolean;
						public getSupportCompoundDrawablesTintMode(): android.graphics.PorterDuff.Mode;
						public setInsetBottom(insetBottom: number): void;
						public getStrokeWidth(): number;
						public isChecked(): boolean;
						public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setElevation(elevation: number): void;
						public setSupportBackgroundTintList(tint: android.content.res.ColorStateList): void;
						public setAutoSizeTextTypeWithDefaults(param0: number): void;
						public getIconTint(): android.content.res.ColorStateList;
						public getAutoSizeTextType(): number;
						public onInitializeAccessibilityEvent(accessibilityEvent: android.view.accessibility.AccessibilityEvent): void;
						public setRippleColor(rippleColor: android.content.res.ColorStateList): void;
						public setStrokeColor(strokeColor: android.content.res.ColorStateList): void;
						public setCornerRadiusResource(cornerRadiusResourceId: number): void;
						public getBackgroundTintList(): android.content.res.ColorStateList;
						public isToggleCheckedStateOnClick(): boolean;
						public onInitializeAccessibilityNodeInfo(param0: android.view.accessibility.AccessibilityNodeInfo): void;
						public getSupportCompoundDrawablesTintList(): android.content.res.ColorStateList;
						public setAutoSizeTextTypeUniformWithConfiguration(param0: number, param1: number, param2: number, param3: number): void;
					}
					export module MaterialButton {
						export class IconGravity extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButton.IconGravity>;
							/**
							 * Constructs a new instance of the com.google.android.material.button.MaterialButton$IconGravity interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class InspectionCompanion extends android.view.inspector.InspectionCompanion<com.google.android.material.button.MaterialButton> {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButton.InspectionCompanion>;
							public constructor();
							public mapProperties(propertyMapper: android.view.inspector.PropertyMapper): void;
							public readProperties(materialButton: com.google.android.material.button.MaterialButton, propertyReader: android.view.inspector.PropertyReader): void;
							public mapProperties(param0: android.view.inspector.PropertyMapper): void;
							public readProperties(param0: any, param1: android.view.inspector.PropertyReader): void;
						}
						export class OnCheckedChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButton.OnCheckedChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.button.MaterialButton$OnCheckedChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCheckedChanged(param0: com.google.android.material.button.MaterialButton, param1: boolean): void;
							});
							public constructor();
							public onCheckedChanged(param0: com.google.android.material.button.MaterialButton, param1: boolean): void;
						}
						export class OnPressedChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButton.OnPressedChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.button.MaterialButton$OnPressedChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onPressedChanged(param0: com.google.android.material.button.MaterialButton, param1: boolean): void;
							});
							public constructor();
							public onPressedChanged(param0: com.google.android.material.button.MaterialButton, param1: boolean): void;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButton.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.button.MaterialButton.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public constructor(superState: android.os.Parcelable);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public constructor(source: android.os.Parcel, loader: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
							public constructor(param0: android.os.Parcel);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module button {
					export class MaterialButtonHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.button.MaterialButtonHelper>;
						public setInsetTop(newInsetTop: number): void;
						public getInsetTop(): number;
						public setInsetBottom(newInsetBottom: number): void;
						public getMaskDrawable(): com.google.android.material.shape.Shapeable;
						public getInsetBottom(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module button {
					export class MaterialButtonToggleGroup extends android.widget.LinearLayout {
						public static class: java.lang.Class<com.google.android.material.button.MaterialButtonToggleGroup>;
						public uncheck(id: number): void;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchDraw(canvas: android.graphics.Canvas): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addOnButtonCheckedListener(listener: com.google.android.material.button.MaterialButtonToggleGroup.OnButtonCheckedListener): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public setEnabled(enabled: boolean): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public setSingleSelection(id: number): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public addView(child: android.view.View, index: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onViewRemoved(child: android.view.View): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public isSelectionRequired(): boolean;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public clearOnButtonCheckedListeners(): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public onFinishInflate(): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getChildDrawingOrder(childCount: number, i: number): number;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public getCheckedButtonIds(): java.util.List<java.lang.Integer>;
						public focusableViewAvailable(v: android.view.View): void;
						public clearChecked(): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public removeOnButtonCheckedListener(listener: com.google.android.material.button.MaterialButtonToggleGroup.OnButtonCheckedListener): void;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public isSingleSelection(): boolean;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public getCheckedButtonId(): number;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public setSelectionRequired(selectionRequired: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public setSingleSelection(singleSelection: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public check(id: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
					export module MaterialButtonToggleGroup {
						export class CornerData extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButtonToggleGroup.CornerData>;
							public static left(orig: com.google.android.material.button.MaterialButtonToggleGroup.CornerData): com.google.android.material.button.MaterialButtonToggleGroup.CornerData;
							public static top(orig: com.google.android.material.button.MaterialButtonToggleGroup.CornerData): com.google.android.material.button.MaterialButtonToggleGroup.CornerData;
							public static bottom(orig: com.google.android.material.button.MaterialButtonToggleGroup.CornerData): com.google.android.material.button.MaterialButtonToggleGroup.CornerData;
							public static right(orig: com.google.android.material.button.MaterialButtonToggleGroup.CornerData): com.google.android.material.button.MaterialButtonToggleGroup.CornerData;
							public static end(orig: com.google.android.material.button.MaterialButtonToggleGroup.CornerData, view: android.view.View): com.google.android.material.button.MaterialButtonToggleGroup.CornerData;
							public static start(orig: com.google.android.material.button.MaterialButtonToggleGroup.CornerData, view: android.view.View): com.google.android.material.button.MaterialButtonToggleGroup.CornerData;
						}
						export class OnButtonCheckedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButtonToggleGroup.OnButtonCheckedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.button.MaterialButtonToggleGroup$OnButtonCheckedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onButtonChecked(param0: com.google.android.material.button.MaterialButtonToggleGroup, param1: number, param2: boolean): void;
							});
							public constructor();
							public onButtonChecked(param0: com.google.android.material.button.MaterialButtonToggleGroup, param1: number, param2: boolean): void;
						}
						export class PressedStateTracker extends java.lang.Object implements com.google.android.material.button.MaterialButton.OnPressedChangeListener {
							public static class: java.lang.Class<com.google.android.material.button.MaterialButtonToggleGroup.PressedStateTracker>;
							public onPressedChanged(param0: com.google.android.material.button.MaterialButton, param1: boolean): void;
							public onPressedChanged(button: com.google.android.material.button.MaterialButton, isPressed: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module canvas {
					export class CanvasCompat extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.canvas.CanvasCompat>;
						public static saveLayerAlpha(canvas: android.graphics.Canvas, bounds: android.graphics.RectF, alpha: number): number;
						public static saveLayerAlpha(canvas: android.graphics.Canvas, left: number, top: number, right: number, bottom: number, alpha: number): number;
					}
					export module CanvasCompat {
						export class CanvasOperation extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.canvas.CanvasCompat.CanvasOperation>;
							/**
							 * Constructs a new instance of the com.google.android.material.canvas.CanvasCompat$CanvasOperation interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								run(param0: android.graphics.Canvas): void;
							});
							public constructor();
							public run(param0: android.graphics.Canvas): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module card {
					export class MaterialCardView extends androidx.cardview.widget.CardView implements android.widget.Checkable, com.google.android.material.shape.Shapeable {
						public static class: java.lang.Class<com.google.android.material.card.MaterialCardView>;
						public static CHECKED_ICON_GRAVITY_TOP_START: number;
						public static CHECKED_ICON_GRAVITY_BOTTOM_START: number;
						public static CHECKED_ICON_GRAVITY_TOP_END: number;
						public static CHECKED_ICON_GRAVITY_BOTTOM_END: number;
						public setCheckedIconGravity(checkedIconGravity: number): void;
						public isLayoutRequested(): boolean;
						public setStrokeWidth(strokeWidth: number): void;
						public setCheckedIcon(checkedIcon: android.graphics.drawable.Drawable): void;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public isDragged(): boolean;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public setPreventCornerOverlap(preventCornerOverlap: boolean): void;
						public getCardForegroundColor(): android.content.res.ColorStateList;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public getProgress(): number;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public onMeasure(param0: number, param1: number): void;
						public setCardBackgroundColor(param0: number): void;
						public setCheckedIconSizeResource(checkedIconSizeResId: number): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public setRippleColorResource(rippleColorResourceId: number): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public getContentPaddingBottom(): number;
						public sendAccessibilityEvent(eventType: number): void;
						public setPreventCornerOverlap(param0: boolean): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						/** @deprecated */
						public setBackgroundDrawable(background: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public setChecked(checked: boolean): void;
						public setUseCompatPadding(param0: boolean): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public setCardElevation(elevation: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setContentPadding(param0: number, param1: number, param2: number, param3: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public setCardBackgroundColor(color: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setBackground(drawable: android.graphics.drawable.Drawable): void;
						public clearChildFocus(child: android.view.View): void;
						public setCheckable(checkable: boolean): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public setCardElevation(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public setCheckedIconSize(checkedIconSize: number): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public getContentPaddingRight(): number;
						public getRippleColor(): android.content.res.ColorStateList;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public setMaxCardElevation(param0: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getCardBackgroundColor(): android.content.res.ColorStateList;
						public getTextAlignment(): number;
						public getCheckedIconMargin(): number;
						public getCheckedIconGravity(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public getRadius(): number;
						public onCreateDrawableState(extraSpace: number): number[];
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public setRadius(radius: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public getContentPaddingTop(): number;
						public setCardBackgroundColor(color: android.content.res.ColorStateList): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public setStrokeColor(strokeColor: number): void;
						public bringChildToFront(child: android.view.View): void;
						public setBackgroundDrawable(drawable: android.graphics.drawable.Drawable): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onInitializeAccessibilityEvent(event: android.view.accessibility.AccessibilityEvent): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public getCheckedIconTint(): android.content.res.ColorStateList;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public setBackground(background: android.graphics.drawable.Drawable): void;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public focusableViewAvailable(v: android.view.View): void;
						public setCheckedIconMargin(checkedIconMargin: number): void;
						public setContentPadding(left: number, top: number, right: number, bottom: number): void;
						public setUseCompatPadding(useCompatPadding: boolean): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public setRadius(param0: number): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public toggle(): void;
						public setCheckedIconResource(id: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getContentPaddingLeft(): number;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setMaxCardElevation(maxCardElevation: number): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public setCheckedIconMarginResource(checkedIconMarginResId: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public isCheckable(): boolean;
						public getStrokeWidth(): number;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public isChecked(): boolean;
						public getCheckedIcon(): android.graphics.drawable.Drawable;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public getStrokeColorStateList(): android.content.res.ColorStateList;
						public setCardBackgroundColor(param0: android.content.res.ColorStateList): void;
						public removeView(view: android.view.View): void;
						public setCheckedIconTint(checkedIconTint: android.content.res.ColorStateList): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setOnCheckedChangeListener(listener: com.google.android.material.card.MaterialCardView.OnCheckedChangeListener): void;
						public setDragged(dragged: boolean): void;
						public onInitializeAccessibilityEvent(accessibilityEvent: android.view.accessibility.AccessibilityEvent): void;
						public setStrokeColor(strokeColor: android.content.res.ColorStateList): void;
						public setRippleColor(rippleColor: android.content.res.ColorStateList): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setClickable(clickable: boolean): void;
						public setProgress(progress: number): void;
						public setCardForegroundColor(foregroundColor: android.content.res.ColorStateList): void;
						/** @deprecated */
						public getStrokeColor(): number;
						public getCheckedIconSize(): number;
					}
					export module MaterialCardView {
						export class CheckedIconGravity extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.card.MaterialCardView.CheckedIconGravity>;
							/**
							 * Constructs a new instance of the com.google.android.material.card.MaterialCardView$CheckedIconGravity interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class OnCheckedChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.card.MaterialCardView.OnCheckedChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.card.MaterialCardView$OnCheckedChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCheckedChanged(param0: com.google.android.material.card.MaterialCardView, param1: boolean): void;
							});
							public constructor();
							public onCheckedChanged(param0: com.google.android.material.card.MaterialCardView, param1: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module card {
					export class MaterialCardViewHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.card.MaterialCardViewHelper>;
						public static DEFAULT_FADE_ANIM_DURATION: number;
						public setChecked(checked: boolean, animate: boolean): void;
						public animateCheckedIcon(checked: boolean): void;
						public constructor(card: com.google.android.material.card.MaterialCardView, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setChecked(checked: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class Arrangement extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.Arrangement>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class Carousel extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.Carousel>;
						/**
						 * Constructs a new instance of the com.google.android.material.carousel.Carousel interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getContainerWidth(): number;
							getContainerHeight(): number;
							isHorizontal(): boolean;
						});
						public constructor();
						public getContainerWidth(): number;
						public isHorizontal(): boolean;
						public getContainerHeight(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class CarouselLayoutManager extends androidx.recyclerview.widget.RecyclerView.LayoutManager implements com.google.android.material.carousel.Carousel, androidx.recyclerview.widget.RecyclerView.SmoothScroller.ScrollVectorProvider {
						public static class: java.lang.Class<com.google.android.material.carousel.CarouselLayoutManager>;
						public static HORIZONTAL: number;
						public static VERTICAL: number;
						public scrollHorizontallyBy(param0: number, param1: androidx.recyclerview.widget.RecyclerView.Recycler, param2: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeVerticalScrollExtent(param0: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeVerticalScrollOffset(param0: androidx.recyclerview.widget.RecyclerView.State): number;
						public smoothScrollToPosition(param0: androidx.recyclerview.widget.RecyclerView, param1: androidx.recyclerview.widget.RecyclerView.State, param2: number): void;
						public getDecoratedBoundsWithMargins(view: android.view.View, outBounds: android.graphics.Rect): void;
						public measureChildWithMargins(child: android.view.View, widthUsed: number, heightUsed: number): void;
						public getDecoratedBoundsWithMargins(param0: android.view.View, param1: android.graphics.Rect): void;
						public requestChildRectangleOnScreen(param0: androidx.recyclerview.widget.RecyclerView, param1: android.view.View, param2: android.graphics.Rect, param3: boolean, param4: boolean): boolean;
						public measureChildWithMargins(param0: android.view.View, param1: number, param2: number): void;
						public onLayoutChildren(param0: androidx.recyclerview.widget.RecyclerView.Recycler, param1: androidx.recyclerview.widget.RecyclerView.State): void;
						public requestChildRectangleOnScreen(parent: androidx.recyclerview.widget.RecyclerView, child: android.view.View, rect: android.graphics.Rect, immediate: boolean, focusedChildVisible: boolean): boolean;
						public onLayoutCompleted(param0: androidx.recyclerview.widget.RecyclerView.State): void;
						public constructor(strategy: com.google.android.material.carousel.CarouselStrategy);
						public setDebuggingEnabled(recyclerView: androidx.recyclerview.widget.RecyclerView, enabled: boolean): void;
						public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
						public onInitializeAccessibilityEvent(event: android.view.accessibility.AccessibilityEvent): void;
						public getOrientation(): number;
						public constructor(strategy: com.google.android.material.carousel.CarouselStrategy, orientation: number);
						public constructor();
						public scrollToPosition(position: number): void;
						public computeVerticalScrollRange(state: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeHorizontalScrollRange(param0: androidx.recyclerview.widget.RecyclerView.State): number;
						public scrollVerticallyBy(param0: number, param1: androidx.recyclerview.widget.RecyclerView.Recycler, param2: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeVerticalScrollOffset(state: androidx.recyclerview.widget.RecyclerView.State): number;
						public setCarouselStrategy(carouselStrategy: com.google.android.material.carousel.CarouselStrategy): void;
						public computeScrollVectorForPosition(param0: number): android.graphics.PointF;
						public onLayoutCompleted(state: androidx.recyclerview.widget.RecyclerView.State): void;
						public generateDefaultLayoutParams(): androidx.recyclerview.widget.RecyclerView.LayoutParams;
						public setOrientation(orientation: number): void;
						public computeHorizontalScrollRange(state: androidx.recyclerview.widget.RecyclerView.State): number;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public scrollToPosition(param0: number): void;
						public computeVerticalScrollExtent(state: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeHorizontalScrollExtent(state: androidx.recyclerview.widget.RecyclerView.State): number;
						public getContainerWidth(): number;
						public isHorizontal(): boolean;
						public getContainerHeight(): number;
						public smoothScrollToPosition(recyclerView: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State, position: number): void;
						public canScrollVertically(): boolean;
						public onInitializeAccessibilityEvent(param0: androidx.recyclerview.widget.RecyclerView.Recycler, param1: androidx.recyclerview.widget.RecyclerView.State, param2: android.view.accessibility.AccessibilityEvent): void;
						public computeHorizontalScrollExtent(param0: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeScrollVectorForPosition(targetPosition: number): android.graphics.PointF;
						public computeHorizontalScrollOffset(param0: androidx.recyclerview.widget.RecyclerView.State): number;
						public onLayoutChildren(recycler: androidx.recyclerview.widget.RecyclerView.Recycler, state: androidx.recyclerview.widget.RecyclerView.State): void;
						public canScrollHorizontally(): boolean;
						public scrollHorizontallyBy(dx: number, recycler: androidx.recyclerview.widget.RecyclerView.Recycler, state: androidx.recyclerview.widget.RecyclerView.State): number;
						public scrollVerticallyBy(dy: number, recycler: androidx.recyclerview.widget.RecyclerView.Recycler, state: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeHorizontalScrollOffset(state: androidx.recyclerview.widget.RecyclerView.State): number;
						public computeVerticalScrollRange(param0: androidx.recyclerview.widget.RecyclerView.State): number;
						public requestChildRectangleOnScreen(param0: androidx.recyclerview.widget.RecyclerView, param1: android.view.View, param2: android.graphics.Rect, param3: boolean): boolean;
					}
					export module CarouselLayoutManager {
						export class ChildCalculations extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.carousel.CarouselLayoutManager.ChildCalculations>;
						}
						export class DebugItemDecoration extends androidx.recyclerview.widget.RecyclerView.ItemDecoration {
							public static class: java.lang.Class<com.google.android.material.carousel.CarouselLayoutManager.DebugItemDecoration>;
							public onDrawOver(param0: android.graphics.Canvas, param1: androidx.recyclerview.widget.RecyclerView, param2: androidx.recyclerview.widget.RecyclerView.State): void;
							public onDrawOver(param0: android.graphics.Canvas, param1: androidx.recyclerview.widget.RecyclerView): void;
							public onDrawOver(c: android.graphics.Canvas, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State): void;
						}
						export class KeylineRange extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.carousel.CarouselLayoutManager.KeylineRange>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export abstract class CarouselOrientationHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.CarouselOrientationHelper>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class CarouselSnapHelper extends androidx.recyclerview.widget.SnapHelper {
						public static class: java.lang.Class<com.google.android.material.carousel.CarouselSnapHelper>;
						public constructor();
						public createScroller(param0: androidx.recyclerview.widget.RecyclerView.LayoutManager): androidx.recyclerview.widget.RecyclerView.SmoothScroller;
						public constructor(disableFling: boolean);
						public calculateDistanceToFinalSnap(param0: androidx.recyclerview.widget.RecyclerView.LayoutManager, param1: android.view.View): number[];
						public calculateDistanceToFinalSnap(layoutManager: androidx.recyclerview.widget.RecyclerView.LayoutManager, view: android.view.View): number[];
						public findSnapView(layoutManager: androidx.recyclerview.widget.RecyclerView.LayoutManager): android.view.View;
						public findTargetSnapPosition(param0: androidx.recyclerview.widget.RecyclerView.LayoutManager, param1: number, param2: number): number;
						public findTargetSnapPosition(layoutManager: androidx.recyclerview.widget.RecyclerView.LayoutManager, velocityX: number, velocityY: number): number;
						public createScroller(layoutManager: androidx.recyclerview.widget.RecyclerView.LayoutManager): androidx.recyclerview.widget.RecyclerView.SmoothScroller;
						public attachToRecyclerView(param0: androidx.recyclerview.widget.RecyclerView): void;
						public attachToRecyclerView(recyclerView: androidx.recyclerview.widget.RecyclerView): void;
						public findSnapView(param0: androidx.recyclerview.widget.RecyclerView.LayoutManager): android.view.View;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export abstract class CarouselStrategy extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.CarouselStrategy>;
						public constructor();
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class CarouselStrategyHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.CarouselStrategyHelper>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class HeroCarouselStrategy extends com.google.android.material.carousel.CarouselStrategy {
						public static class: java.lang.Class<com.google.android.material.carousel.HeroCarouselStrategy>;
						public constructor();
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class KeylineState extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.KeylineState>;
					}
					export module KeylineState {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.carousel.KeylineState.Builder>;
						}
						export class Keyline extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.carousel.KeylineState.Keyline>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class KeylineStateList extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.KeylineStateList>;
						public getShiftedState(scrollOffset: number, minScrollOffset: number, maxScrollOffset: number): com.google.android.material.carousel.KeylineState;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class Maskable extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.Maskable>;
						/**
						 * Constructs a new instance of the com.google.android.material.carousel.Maskable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							setMaskXPercentage(param0: number): void;
							getMaskXPercentage(): number;
							setMaskRectF(param0: android.graphics.RectF): void;
							getMaskRectF(): android.graphics.RectF;
							setOnMaskChangedListener(param0: com.google.android.material.carousel.OnMaskChangedListener): void;
						});
						public constructor();
						/** @deprecated */
						public getMaskXPercentage(): number;
						/** @deprecated */
						public setMaskXPercentage(param0: number): void;
						public setMaskRectF(param0: android.graphics.RectF): void;
						public getMaskRectF(): android.graphics.RectF;
						public setOnMaskChangedListener(param0: com.google.android.material.carousel.OnMaskChangedListener): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class MaskableFrameLayout extends android.widget.FrameLayout implements com.google.android.material.carousel.Maskable, com.google.android.material.shape.Shapeable {
						public static class: java.lang.Class<com.google.android.material.carousel.MaskableFrameLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchDraw(canvas: android.graphics.Canvas): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setOnMaskChangedListener(onMaskChangedListener: com.google.android.material.carousel.OnMaskChangedListener): void;
						/** @deprecated */
						public setMaskXPercentage(param0: number): void;
						public setForceCompatClipping(forceCompatClipping: boolean): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setMaskRectF(param0: android.graphics.RectF): void;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setMaskRectF(maskRect: android.graphics.RectF): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public setOnMaskChangedListener(param0: com.google.android.material.carousel.OnMaskChangedListener): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						/** @deprecated */
						public getMaskXPercentage(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public getMaskRectF(): android.graphics.RectF;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public onDetachedFromWindow(): void;
						public onTouchEvent(event: android.view.MotionEvent): boolean;
						/** @deprecated */
						public setMaskXPercentage(percentage: number): void;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class MultiBrowseCarouselStrategy extends com.google.android.material.carousel.CarouselStrategy {
						public static class: java.lang.Class<com.google.android.material.carousel.MultiBrowseCarouselStrategy>;
						public constructor();
						public constructor(forceCompactArrangement: boolean);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module carousel {
					export class OnMaskChangedListener extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.carousel.OnMaskChangedListener>;
						/**
						 * Constructs a new instance of the com.google.android.material.carousel.OnMaskChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onMaskChanged(param0: android.graphics.RectF): void;
						});
						public constructor();
						public onMaskChanged(param0: android.graphics.RectF): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module checkbox {
					export class MaterialCheckBox extends androidx.appcompat.widget.AppCompatCheckBox {
						public static class: java.lang.Class<com.google.android.material.checkbox.MaterialCheckBox>;
						public static STATE_UNCHECKED: number;
						public static STATE_CHECKED: number;
						public static STATE_INDETERMINATE: number;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public setStateDescription(stateDescription: string): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public onCreateDrawableState(extraSpace: number): number[];
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public setSupportButtonTintList(param0: android.content.res.ColorStateList): void;
						public constructor(param0: android.content.Context);
						public getErrorAccessibilityLabel(): string;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setOnCheckedChangeListener(listener: android.widget.CompoundButton.OnCheckedChangeListener): void;
						public getButtonIconTintMode(): android.graphics.PorterDuff.Mode;
						public onSaveInstanceState(): android.os.Parcelable;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSupportButtonTintList(): android.content.res.ColorStateList;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public isUseMaterialThemeColors(): boolean;
						public setChecked(param0: boolean): void;
						public setErrorAccessibilityLabelResource(resId: number): void;
						public sendAccessibilityEvent(eventType: number): void;
						public setEnabled(enabled: boolean): void;
						public setButtonIconDrawableResource(resId: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public setButtonIconDrawable(drawable: android.graphics.drawable.Drawable): void;
						public toggle(): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public addOnErrorChangedListener(listener: com.google.android.material.checkbox.MaterialCheckBox.OnErrorChangedListener): void;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public getButtonIconDrawable(): android.graphics.drawable.Drawable;
						public setButtonIconTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setCheckedState(checkedState: number): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public setButtonDrawable(param0: android.graphics.drawable.Drawable): void;
						public setUseMaterialThemeColors(useMaterialThemeColors: boolean): void;
						public setSupportButtonTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public onAttachedToWindow(): void;
						public setChecked(checked: boolean): void;
						public clearOnErrorChangedListeners(): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setButtonTintList(tintList: android.content.res.ColorStateList): void;
						public setButtonDrawable(param0: number): void;
						public setButtonDrawable(drawable: android.graphics.drawable.Drawable): void;
						public getSupportButtonTintMode(): android.graphics.PorterDuff.Mode;
						public onDraw(canvas: android.graphics.Canvas): void;
						public setButtonDrawable(resId: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public addOnCheckedStateChangedListener(listener: com.google.android.material.checkbox.MaterialCheckBox.OnCheckedStateChangedListener): void;
						public setButtonTintList(tint: android.content.res.ColorStateList): void;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public isChecked(): boolean;
						public getButtonIconTintList(): android.content.res.ColorStateList;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public isErrorShown(): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setErrorShown(errorShown: boolean): void;
						public getButtonTintList(): android.content.res.ColorStateList;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public setButtonTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public removeOnCheckedStateChangedListener(listener: com.google.android.material.checkbox.MaterialCheckBox.OnCheckedStateChangedListener): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public removeOnErrorChangedListener(listener: com.google.android.material.checkbox.MaterialCheckBox.OnErrorChangedListener): void;
						public setCenterIfNoTextEnabled(centerIfNoTextEnabled: boolean): void;
						public clearOnCheckedStateChangedListeners(): void;
						public isCenterIfNoTextEnabled(): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setButtonIconTintList(tintList: android.content.res.ColorStateList): void;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public setErrorAccessibilityLabel(errorAccessibilityLabel: string): void;
						public getButtonDrawable(): android.graphics.drawable.Drawable;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public getCheckedState(): number;
					}
					export module MaterialCheckBox {
						export class CheckedState extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.checkbox.MaterialCheckBox.CheckedState>;
							/**
							 * Constructs a new instance of the com.google.android.material.checkbox.MaterialCheckBox$CheckedState interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class OnCheckedStateChangedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.checkbox.MaterialCheckBox.OnCheckedStateChangedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.checkbox.MaterialCheckBox$OnCheckedStateChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCheckedStateChangedListener(param0: com.google.android.material.checkbox.MaterialCheckBox, param1: number): void;
							});
							public constructor();
							public onCheckedStateChangedListener(param0: com.google.android.material.checkbox.MaterialCheckBox, param1: number): void;
						}
						export class OnErrorChangedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.checkbox.MaterialCheckBox.OnErrorChangedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.checkbox.MaterialCheckBox$OnErrorChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onErrorChanged(param0: com.google.android.material.checkbox.MaterialCheckBox, param1: boolean): void;
							});
							public constructor();
							public onErrorChanged(param0: com.google.android.material.checkbox.MaterialCheckBox, param1: boolean): void;
						}
						export class SavedState extends android.view.View.BaseSavedState {
							public static class: java.lang.Class<com.google.android.material.checkbox.MaterialCheckBox.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.checkbox.MaterialCheckBox.SavedState>;
							public describeContents(): number;
							public toString(): string;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module chip {
					export class Chip extends androidx.appcompat.widget.AppCompatCheckBox {
						public static class: java.lang.Class<com.google.android.material.chip.Chip>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public isEmojiCompatEnabled(): boolean;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public setSupportButtonTintList(param0: android.content.res.ColorStateList): void;
						/** @deprecated */
						public setChipCornerRadius(chipCornerRadius: number): void;
						public setShowMotionSpec(showMotionSpec: com.google.android.material.animation.MotionSpec): void;
						public setAccessibilityClassName(className: string): void;
						public setHideMotionSpec(hideMotionSpec: com.google.android.material.animation.MotionSpec): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setBackgroundColor(color: number): void;
						public setChecked(param0: boolean): void;
						public setText(resid: number): void;
						public setGravity(gravity: number): void;
						public setTextAppearance(context: android.content.Context, resId: number): void;
						public onChipDrawableSizeChange(): void;
						public setCloseIconTint(closeIconTint: android.content.res.ColorStateList): void;
						public sendAccessibilityEvent(eventType: number): void;
						public setCompoundDrawables(left: android.graphics.drawable.Drawable, top: android.graphics.drawable.Drawable, right: android.graphics.drawable.Drawable, bottom: android.graphics.drawable.Drawable): void;
						public setCompoundDrawablesWithIntrinsicBounds(left: number, top: number, right: number, bottom: number): void;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public onPreDraw(): boolean;
						public shouldEnsureMinTouchTargetSize(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public setTextEndPaddingResource(id: number): void;
						public setCheckableResource(id: number): void;
						public setChecked(checked: boolean): void;
						public ensureAccessibleTouchTarget(minTargetPx: number): boolean;
						public setOnCloseIconClickListener(listener: android.view.View.OnClickListener): void;
						public setMaxWidth(maxWidth: number): void;
						public getFocusedRect(r: android.graphics.Rect): void;
						public setBackgroundDrawable(background: android.graphics.drawable.Drawable): void;
						/** @deprecated */
						public setCheckedIconEnabled(checkedIconEnabled: boolean): void;
						/** @deprecated */
						public setCloseIconEnabledResource(id: number): void;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setTextAppearance(textAppearance: com.google.android.material.resources.TextAppearance): void;
						public setTextAppearance(resId: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setMaxLines(maxLines: number): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public setCheckedIconVisible(id: number): void;
						public setChipStartPaddingResource(id: number): void;
						public setCloseIconStartPadding(closeIconStartPadding: number): void;
						public getChipCornerRadius(): number;
						public setCompoundDrawablesRelativeWithIntrinsicBounds(start: number, top: number, end: number, bottom: number): void;
						public setCompoundDrawablesRelative(start: android.graphics.drawable.Drawable, top: android.graphics.drawable.Drawable, end: android.graphics.drawable.Drawable, bottom: android.graphics.drawable.Drawable): void;
						public isCloseIconVisible(): boolean;
						public getEllipsize(): android.text.TextUtils.TruncateAt;
						public dispatchKeyEvent(event: android.view.KeyEvent): boolean;
						public setCloseIconVisible(id: number): void;
						public setChipStrokeColor(chipStrokeColor: android.content.res.ColorStateList): void;
						public setCloseIconTintResource(id: number): void;
						public setText(resid: number, type: android.widget.TextView.BufferType): void;
						public getCloseIcon(): android.graphics.drawable.Drawable;
						/** @deprecated */
						public setCloseIconEnabled(closeIconEnabled: boolean): void;
						public constructor(param0: android.content.Context);
						public setOnCheckedChangeListener(listener: android.widget.CompoundButton.OnCheckedChangeListener): void;
						public setEllipsize(where: android.text.TextUtils.TruncateAt): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getCheckedIconTint(): android.content.res.ColorStateList;
						public isCheckedIconVisible(): boolean;
						public getChipStrokeWidth(): number;
						public getChipIcon(): android.graphics.drawable.Drawable;
						public getAccessibilityClassName(): string;
						public setChipDrawable(drawable: com.google.android.material.chip.ChipDrawable): void;
						public getTextStartPadding(): number;
						public getChipBackgroundColor(): android.content.res.ColorStateList;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public getChipEndPadding(): number;
						public setBackgroundResource(resid: number): void;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setIconStartPaddingResource(id: number): void;
						public setChipIconSizeResource(id: number): void;
						/** @deprecated */
						public isCloseIconEnabled(): boolean;
						public setChipStrokeColorResource(id: number): void;
						/** @deprecated */
						public setChipIconEnabledResource(id: number): void;
						/** @deprecated */
						public setChipCornerRadiusResource(id: number): void;
						public getCheckedIcon(): android.graphics.drawable.Drawable;
						public getHideMotionSpec(): com.google.android.material.animation.MotionSpec;
						public setChipIconTint(chipIconTint: android.content.res.ColorStateList): void;
						public setMaxLines(maxlines: number): void;
						public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
						public getChipStartPadding(): number;
						/** @deprecated */
						public isChipIconEnabled(): boolean;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setElevation(elevation: number): void;
						public setText(text: string): void;
						/** @deprecated */
						public getChipText(): string;
						public isChipIconVisible(): boolean;
						public setText(text: string[], start: number, len: number): void;
						public setCheckedIcon(checkedIcon: android.graphics.drawable.Drawable): void;
						/** @deprecated */
						public isCheckedIconEnabled(): boolean;
						public setInternalOnCheckedChangeListener(param0: com.google.android.material.internal.MaterialCheckable.OnCheckedChangeListener<any>): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public setTextAppearanceResource(id: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public onFocusChanged(focused: boolean, direction: number, previouslyFocusedRect: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getCloseIconStartPadding(): number;
						public setTextStartPadding(textStartPadding: number): void;
						public setCheckedIconTintResource(id: number): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public setText(text: string, type: android.widget.TextView.BufferType): void;
						public getBackgroundDrawable(): android.graphics.drawable.Drawable;
						public setCloseIcon(closeIcon: android.graphics.drawable.Drawable): void;
						/** @deprecated */
						public setChipTextResource(id: number): void;
						public setChipIconTintResource(id: number): void;
						public getTextEndPadding(): number;
						public setChipIconVisible(id: number): void;
						public setMaxWidth(maxpixels: number): void;
						public getShowMotionSpec(): com.google.android.material.animation.MotionSpec;
						public setIconStartPadding(iconStartPadding: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						/** @deprecated */
						public setChipText(chipText: string): void;
						public setCloseIconSizeResource(id: number): void;
						public setChipMinHeightResource(id: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public performCloseIconClick(): boolean;
						public setSupportButtonTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public onAttachedToWindow(): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getSupportButtonTintMode(): android.graphics.PorterDuff.Mode;
						public setChipBackgroundColor(chipBackgroundColor: android.content.res.ColorStateList): void;
						public setCloseIconVisible(closeIconVisible: boolean): void;
						public setTextEndPadding(textEndPadding: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public setChipStrokeWidth(chipStrokeWidth: number): void;
						public setMinLines(minLines: number): void;
						public setCheckable(checkable: boolean): void;
						public getChipIconSize(): number;
						public getCloseIconTint(): android.content.res.ColorStateList;
						public setChipEndPadding(chipEndPadding: number): void;
						public getChipMinHeight(): number;
						public onRtlPropertiesChanged(layoutDirection: number): void;
						public setCloseIconEndPaddingResource(id: number): void;
						public setBackgroundResource(param0: number): void;
						public setInternalOnCheckedChangeListener(listener: com.google.android.material.internal.MaterialCheckable.OnCheckedChangeListener<com.google.android.material.chip.Chip>): void;
						public setCompoundDrawablesRelativeWithIntrinsicBounds(start: android.graphics.drawable.Drawable, top: android.graphics.drawable.Drawable, end: android.graphics.drawable.Drawable, bottom: android.graphics.drawable.Drawable): void;
						public getCloseIconEndPadding(): number;
						public getRippleColor(): android.content.res.ColorStateList;
						public setTextStartPaddingResource(id: number): void;
						public onHoverEvent(event: android.view.MotionEvent): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setChipIconVisible(chipIconVisible: boolean): void;
						/** @deprecated */
						public setChipIconEnabled(chipIconEnabled: boolean): void;
						public setShowMotionSpecResource(id: number): void;
						public setIconEndPaddingResource(id: number): void;
						public setSingleLine(singleLine: boolean): void;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						/** @deprecated */
						public setTextAppearance(context: android.content.Context, resId: number): void;
						public setTextSize(size: number): void;
						public setBackgroundTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public sendAccessibilityEvent(param0: number): void;
						public setChipIconSize(chipIconSize: number): void;
						public setHideMotionSpecResource(id: number): void;
						public onCreateDrawableState(extraSpace: number): number[];
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						/** @deprecated */
						public setCheckedIconEnabledResource(id: number): void;
						public setChipStartPadding(chipStartPadding: number): void;
						public getSupportButtonTintList(): android.content.res.ColorStateList;
						public setCloseIconResource(id: number): void;
						public setIconEndPadding(iconEndPadding: number): void;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public setEnsureMinTouchTargetSize(flag: boolean): void;
						public setBackground(background: android.graphics.drawable.Drawable): void;
						public getCloseIconContentDescription(): string;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public onResolvePointerIcon(event: android.view.MotionEvent, pointerIndex: number): any;
						public setLayoutDirection(layoutDirection: number): void;
						public getChipDrawable(): android.graphics.drawable.Drawable;
						public setLines(lines: number): void;
						public setCheckedIconResource(id: number): void;
						public toggle(): void;
						public setChipIconResource(id: number): void;
						public setTextSize(unit: number, size: number): void;
						public getChipIconTint(): android.content.res.ColorStateList;
						public getCloseIconSize(): number;
						public setBackgroundTintList(tint: android.content.res.ColorStateList): void;
						public setCompoundDrawablesWithIntrinsicBounds(left: android.graphics.drawable.Drawable, top: android.graphics.drawable.Drawable, right: android.graphics.drawable.Drawable, bottom: android.graphics.drawable.Drawable): void;
						public setChipBackgroundColorResource(id: number): void;
						public isCheckable(): boolean;
						public drawableStateChanged(): void;
						public setChipStrokeWidthResource(id: number): void;
						public setChipMinHeight(minHeight: number): void;
						public getIconEndPadding(): number;
						public isChecked(): boolean;
						public setRippleColorResource(id: number): void;
						public setChipIcon(chipIcon: android.graphics.drawable.Drawable): void;
						public setSingleLine(): void;
						public setCloseIconSize(closeIconSize: number): void;
						public setCloseIconStartPaddingResource(id: number): void;
						public setCheckedIconTint(checkedIconTint: android.content.res.ColorStateList): void;
						public setMinLines(minlines: number): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public setCloseIconContentDescription(closeIconContentDescription: string): void;
						public setChipEndPaddingResource(id: number): void;
						public setCloseIconEndPadding(closeIconEndPadding: number): void;
						public setRippleColor(rippleColor: android.content.res.ColorStateList): void;
						public setCheckedIconVisible(checkedIconVisible: boolean): void;
						public getId(): number;
						public onTouchEvent(event: android.view.MotionEvent): boolean;
						public dispatchHoverEvent(event: android.view.MotionEvent): boolean;
						public getIconStartPadding(): number;
						public getChipStrokeColor(): android.content.res.ColorStateList;
					}
					export module Chip {
						export class ChipTouchHelper extends androidx.customview.widget.ExploreByTouchHelper {
							public static class: java.lang.Class<com.google.android.material.chip.Chip.ChipTouchHelper>;
							public onVirtualViewKeyboardFocusChanged(param0: number, param1: boolean): void;
							public getVirtualViewAt(param0: number, param1: number): number;
							public onPopulateNodeForHost(node: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onPopulateNodeForVirtualView(param0: number, param1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onPopulateNodeForVirtualView(virtualViewId: number, node: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onPerformActionForVirtualView(param0: number, param1: number, param2: android.os.Bundle): boolean;
							public onVirtualViewKeyboardFocusChanged(virtualViewId: number, hasFocus: boolean): void;
							public onPopulateNodeForHost(param0: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onPerformActionForVirtualView(virtualViewId: number, action: number, arguments: android.os.Bundle): boolean;
							public getVisibleVirtualViews(param0: java.util.List<java.lang.Integer>): void;
							public getVirtualViewAt(x: number, y: number): number;
							public getVisibleVirtualViews(virtualViewIds: java.util.List<java.lang.Integer>): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module chip {
					export class ChipDrawable extends com.google.android.material.shape.MaterialShapeDrawable implements androidx.core.graphics.drawable.TintAwareDrawable, android.graphics.drawable.Drawable.Callback, com.google.android.material.internal.TextDrawableHelper.TextDrawableDelegate {
						public static class: java.lang.Class<com.google.android.material.chip.ChipDrawable>;
						public onSizeChange(): void;
						public setCheckedIcon(checkedIcon: android.graphics.drawable.Drawable): void;
						public setVisible(visible: boolean, restart: boolean): boolean;
						/** @deprecated */
						public isCheckedIconEnabled(): boolean;
						public setTintList(param0: android.content.res.ColorStateList): void;
						public setTintList(tintList: android.content.res.ColorStateList): void;
						public setTextAppearanceResource(id: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public onLayoutDirectionChanged(layoutDirection: number): boolean;
						public getCloseIconState(): number[];
						public getChipTouchBounds(bounds: android.graphics.RectF): void;
						/** @deprecated */
						public setChipCornerRadius(chipCornerRadius: number): void;
						public setShowMotionSpec(showMotionSpec: com.google.android.material.animation.MotionSpec): void;
						public setCloseIconState(stateSet: number[]): boolean;
						public setHideMotionSpec(hideMotionSpec: com.google.android.material.animation.MotionSpec): void;
						public setTintList(tint: android.content.res.ColorStateList): void;
						public getMaxWidth(): number;
						public getCloseIconStartPadding(): number;
						public setTextStartPadding(textStartPadding: number): void;
						public setCheckedIconTintResource(id: number): void;
						public setCloseIcon(closeIcon: android.graphics.drawable.Drawable): void;
						public setChipIconTintResource(id: number): void;
						public getTextEndPadding(): number;
						public setChipIconVisible(id: number): void;
						public getColorFilter(): android.graphics.ColorFilter;
						public setCloseIconTint(closeIconTint: android.content.res.ColorStateList): void;
						public setDelegate(delegate: com.google.android.material.chip.ChipDrawable.Delegate): void;
						public onTextSizeChange(): void;
						public getCloseIconTouchBounds(bounds: android.graphics.RectF): void;
						public getShowMotionSpec(): com.google.android.material.animation.MotionSpec;
						public setIconStartPadding(iconStartPadding: number): void;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public setEllipsize(truncateAt: android.text.TextUtils.TruncateAt): void;
						public setCloseIconSizeResource(id: number): void;
						public getOutline(outline: any): void;
						public setChipMinHeightResource(id: number): void;
						public setTextEndPaddingResource(id: number): void;
						public setCheckableResource(id: number): void;
						public getText(): string;
						public setChipBackgroundColor(chipBackgroundColor: android.content.res.ColorStateList): void;
						public getUseCompatRipple(): boolean;
						public setCloseIconVisible(closeIconVisible: boolean): void;
						public setMaxWidth(maxWidth: number): void;
						/** @deprecated */
						public setCheckedIconEnabled(checkedIconEnabled: boolean): void;
						public setTextEndPadding(textEndPadding: number): void;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setChipStrokeWidth(chipStrokeWidth: number): void;
						/** @deprecated */
						public setCloseIconEnabledResource(id: number): void;
						public setTextAppearance(textAppearance: com.google.android.material.resources.TextAppearance): void;
						public setUseCompatRipple(useCompatRipple: boolean): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setCheckable(checkable: boolean): void;
						public getChipIconSize(): number;
						public getCloseIconTint(): android.content.res.ColorStateList;
						public setChipEndPadding(chipEndPadding: number): void;
						public getChipMinHeight(): number;
						public setCheckedIconVisible(id: number): void;
						public onLevelChange(level: number): boolean;
						public setChipStartPaddingResource(id: number): void;
						public setCloseIconEndPaddingResource(id: number): void;
						public getIntrinsicWidth(): number;
						public setCloseIconStartPadding(closeIconStartPadding: number): void;
						public getChipCornerRadius(): number;
						public getOpacity(): number;
						public getCloseIconEndPadding(): number;
						public getRippleColor(): android.content.res.ColorStateList;
						public setTextStartPaddingResource(id: number): void;
						public static createFromAttributes(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number): com.google.android.material.chip.ChipDrawable;
						public setChipIconVisible(chipIconVisible: boolean): void;
						/** @deprecated */
						public setChipIconEnabled(chipIconEnabled: boolean): void;
						public isCloseIconVisible(): boolean;
						public setShowMotionSpecResource(id: number): void;
						public getState(): number[];
						public setIconEndPaddingResource(id: number): void;
						public getEllipsize(): android.text.TextUtils.TruncateAt;
						public setCloseIconVisible(id: number): void;
						public setChipStrokeColor(chipStrokeColor: android.content.res.ColorStateList): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStateChange(state: number[]): boolean;
						public setTextSize(size: number): void;
						public setCloseIconTintResource(id: number): void;
						public setChipIconSize(chipIconSize: number): void;
						public setHideMotionSpecResource(id: number): void;
						public getCloseIcon(): android.graphics.drawable.Drawable;
						/** @deprecated */
						public setCloseIconEnabled(closeIconEnabled: boolean): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						/** @deprecated */
						public setCheckedIconEnabledResource(id: number): void;
						public isStateful(): boolean;
						public setChipStartPadding(chipStartPadding: number): void;
						public setCloseIconResource(id: number): void;
						public setIconEndPadding(iconEndPadding: number): void;
						public getCheckedIconTint(): android.content.res.ColorStateList;
						public isCheckedIconVisible(): boolean;
						public getChipStrokeWidth(): number;
						public getChipIcon(): android.graphics.drawable.Drawable;
						public getCloseIconContentDescription(): string;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
						public setTextColor(color: number): void;
						public getTextStartPadding(): number;
						public getChipBackgroundColor(): android.content.res.ColorStateList;
						public setCheckedIconResource(id: number): void;
						public getChipEndPadding(): number;
						public setChipIconResource(id: number): void;
						public setIconStartPaddingResource(id: number): void;
						public getChipIconTint(): android.content.res.ColorStateList;
						public getTextAppearance(): com.google.android.material.resources.TextAppearance;
						public setChipIconSizeResource(id: number): void;
						/** @deprecated */
						public isCloseIconEnabled(): boolean;
						public getCloseIconSize(): number;
						public getAlpha(): number;
						public setChipBackgroundColorResource(id: number): void;
						public static createFromResource(context: android.content.Context, id: number): com.google.android.material.chip.ChipDrawable;
						public setChipStrokeColorResource(id: number): void;
						/** @deprecated */
						public setChipIconEnabledResource(id: number): void;
						public isCheckable(): boolean;
						/** @deprecated */
						public setChipCornerRadiusResource(id: number): void;
						public isCloseIconStateful(): boolean;
						public setChipStrokeWidthResource(id: number): void;
						public invalidateDrawable(who: android.graphics.drawable.Drawable): void;
						public getCheckedIcon(): android.graphics.drawable.Drawable;
						public getHideMotionSpec(): com.google.android.material.animation.MotionSpec;
						public getIconEndPadding(): number;
						public setChipIconTint(chipIconTint: android.content.res.ColorStateList): void;
						public setRippleColorResource(id: number): void;
						public setChipIcon(chipIcon: android.graphics.drawable.Drawable): void;
						public setAlpha(alpha: number): void;
						public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
						public setCloseIconSize(closeIconSize: number): void;
						public setCloseIconStartPaddingResource(id: number): void;
						public setCheckedIconTint(checkedIconTint: android.content.res.ColorStateList): void;
						public getChipStartPadding(): number;
						/** @deprecated */
						public isChipIconEnabled(): boolean;
						public getIntrinsicHeight(): number;
						public setTextResource(id: number): void;
						public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setTextColor(color: android.content.res.ColorStateList): void;
						public setChipMinHeight(chipMinHeight: number): void;
						public setCloseIconContentDescription(closeIconContentDescription: string): void;
						public setChipEndPaddingResource(id: number): void;
						public setTint(param0: number): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setCloseIconEndPadding(closeIconEndPadding: number): void;
						public setText(text: string): void;
						public setRippleColor(rippleColor: android.content.res.ColorStateList): void;
						public setCheckedIconVisible(checkedIconVisible: boolean): void;
						public getIconStartPadding(): number;
						public getChipStrokeColor(): android.content.res.ColorStateList;
						public onStateChange(param0: number[]): boolean;
						public isChipIconVisible(): boolean;
						public setTint(tintColor: number): void;
					}
					export module ChipDrawable {
						export class Delegate extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.chip.ChipDrawable.Delegate>;
							/**
							 * Constructs a new instance of the com.google.android.material.chip.ChipDrawable$Delegate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onChipDrawableSizeChange(): void;
							});
							public constructor();
							public onChipDrawableSizeChange(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module chip {
					export class ChipGroup extends com.google.android.material.internal.FlowLayout {
						public static class: java.lang.Class<com.google.android.material.chip.ChipGroup>;
						public isLayoutRequested(): boolean;
						public setChipSpacingVerticalResource(id: number): void;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						/** @deprecated */
						public setShowDividerVertical(dividerMode: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChipSpacingHorizontal(chipSpacingHorizontal: number): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public setChipSpacingResource(id: number): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public setSingleLine(id: number): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						/** @deprecated */
						public setShowDividerHorizontal(dividerMode: number): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public setSingleSelection(id: number): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setChipSpacingHorizontalResource(id: number): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public clearCheck(): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public isSelectionRequired(): boolean;
						public setSingleLine(singleLine: boolean): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						/** @deprecated */
						public setDividerDrawableVertical(divider: android.graphics.drawable.Drawable): void;
						public onStopNestedScroll(child: android.view.View): void;
						/** @deprecated */
						public setFlexWrap(flexWrap: number): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public setChipSpacingVertical(chipSpacingVertical: number): void;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public onFinishInflate(): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public isSingleLine(): boolean;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public setOnCheckedStateChangeListener(listener: com.google.android.material.chip.ChipGroup.OnCheckedStateChangeListener): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public getCheckedChipId(): number;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						/** @deprecated */
						public setOnCheckedChangeListener(listener: com.google.android.material.chip.ChipGroup.OnCheckedChangeListener): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public isSingleSelection(): boolean;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public checkLayoutParams(p: android.view.ViewGroup.LayoutParams): boolean;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getCheckedChipIds(): java.util.List<java.lang.Integer>;
						public generateLayoutParams(p: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
						/** @deprecated */
						public setDividerDrawableHorizontal(divider: android.graphics.drawable.Drawable): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChipSpacingVertical(): number;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public setSelectionRequired(selectionRequired: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public setSingleSelection(singleSelection: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public setOnHierarchyChangeListener(listener: android.view.ViewGroup.OnHierarchyChangeListener): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public getChipSpacingHorizontal(): number;
						public check(id: number): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
						public generateDefaultLayoutParams(): android.view.ViewGroup.LayoutParams;
						public setChipSpacing(chipSpacing: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public generateLayoutParams(lp: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
					}
					export module ChipGroup {
						export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
							public static class: java.lang.Class<com.google.android.material.chip.ChipGroup.LayoutParams>;
							public constructor(c: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(source: android.view.ViewGroup.MarginLayoutParams);
							public constructor(source: android.view.ViewGroup.LayoutParams);
							public constructor(width: number, height: number);
						}
						export class OnCheckedChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.chip.ChipGroup.OnCheckedChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.chip.ChipGroup$OnCheckedChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCheckedChanged(param0: com.google.android.material.chip.ChipGroup, param1: number): void;
							});
							public constructor();
							public onCheckedChanged(param0: com.google.android.material.chip.ChipGroup, param1: number): void;
						}
						export class OnCheckedStateChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.chip.ChipGroup.OnCheckedStateChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.chip.ChipGroup$OnCheckedStateChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCheckedChanged(param0: com.google.android.material.chip.ChipGroup, param1: java.util.List<java.lang.Integer>): void;
							});
							public constructor();
							public onCheckedChanged(param0: com.google.android.material.chip.ChipGroup, param1: java.util.List<java.lang.Integer>): void;
						}
						export class PassThroughHierarchyChangeListener extends java.lang.Object implements android.view.ViewGroup.OnHierarchyChangeListener {
							public static class: java.lang.Class<com.google.android.material.chip.ChipGroup.PassThroughHierarchyChangeListener>;
							public onChildViewAdded(param0: android.view.View, param1: android.view.View): void;
							public onChildViewAdded(parent: android.view.View, child: android.view.View): void;
							public onChildViewRemoved(param0: android.view.View, param1: android.view.View): void;
							public onChildViewRemoved(parent: android.view.View, child: android.view.View): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export class CircularRevealCompat extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealCompat>;
						public static createCircularReveal(view: com.google.android.material.circularreveal.CircularRevealWidget, centerX: number, centerY: number, endRadius: number): android.animation.Animator;
						public static createCircularReveal(view: com.google.android.material.circularreveal.CircularRevealWidget, centerX: number, centerY: number, startRadius: number, endRadius: number): android.animation.Animator;
						public static createCircularRevealListener(view: com.google.android.material.circularreveal.CircularRevealWidget): android.animation.Animator.AnimatorListener;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export class CircularRevealFrameLayout extends android.widget.FrameLayout implements com.google.android.material.circularreveal.CircularRevealWidget {
						public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealFrameLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public actualDraw(canvas: android.graphics.Canvas): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public actualDraw(param0: android.graphics.Canvas): void;
						public actualIsOpaque(): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public buildCircularRevealCache(): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isOpaque(): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setCircularRevealScrimColor(param0: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setCircularRevealScrimColor(color: number): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public destroyCircularRevealCache(): void;
						public draw(param0: android.graphics.Canvas): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getCircularRevealScrimColor(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export class CircularRevealGridLayout extends android.widget.GridLayout implements com.google.android.material.circularreveal.CircularRevealWidget {
						public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealGridLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public actualDraw(canvas: android.graphics.Canvas): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public actualDraw(param0: android.graphics.Canvas): void;
						public actualIsOpaque(): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public buildCircularRevealCache(): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isOpaque(): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setCircularRevealScrimColor(param0: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setCircularRevealScrimColor(color: number): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public destroyCircularRevealCache(): void;
						public draw(param0: android.graphics.Canvas): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getCircularRevealScrimColor(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export class CircularRevealHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealHelper>;
						public static BITMAP_SHADER: number;
						public static CLIP_PATH: number;
						public static REVEAL_ANIMATOR: number;
						public static STRATEGY: number;
						public destroyCircularRevealCache(): void;
						public setCircularRevealScrimColor(color: number): void;
						public draw(canvas: android.graphics.Canvas): void;
						public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
						public constructor(delegate: com.google.android.material.circularreveal.CircularRevealHelper.Delegate);
						public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getCircularRevealScrimColor(): number;
						public buildCircularRevealCache(): void;
						public isOpaque(): boolean;
					}
					export module CircularRevealHelper {
						export class Delegate extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealHelper.Delegate>;
							/**
							 * Constructs a new instance of the com.google.android.material.circularreveal.CircularRevealHelper$Delegate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								actualDraw(param0: android.graphics.Canvas): void;
								actualIsOpaque(): boolean;
							});
							public constructor();
							public actualDraw(param0: android.graphics.Canvas): void;
							public actualIsOpaque(): boolean;
						}
						export class Strategy extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealHelper.Strategy>;
							/**
							 * Constructs a new instance of the com.google.android.material.circularreveal.CircularRevealHelper$Strategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export class CircularRevealLinearLayout extends android.widget.LinearLayout implements com.google.android.material.circularreveal.CircularRevealWidget {
						public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealLinearLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public actualDraw(canvas: android.graphics.Canvas): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public actualDraw(param0: android.graphics.Canvas): void;
						public actualIsOpaque(): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public buildCircularRevealCache(): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isOpaque(): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setCircularRevealScrimColor(param0: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setCircularRevealScrimColor(color: number): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public destroyCircularRevealCache(): void;
						public draw(param0: android.graphics.Canvas): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getCircularRevealScrimColor(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export class CircularRevealRelativeLayout extends android.widget.RelativeLayout implements com.google.android.material.circularreveal.CircularRevealWidget {
						public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealRelativeLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public actualDraw(canvas: android.graphics.Canvas): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public actualDraw(param0: android.graphics.Canvas): void;
						public actualIsOpaque(): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public buildCircularRevealCache(): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isOpaque(): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setCircularRevealScrimColor(param0: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setCircularRevealScrimColor(color: number): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public destroyCircularRevealCache(): void;
						public draw(param0: android.graphics.Canvas): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getCircularRevealScrimColor(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export class CircularRevealWidget extends java.lang.Object implements com.google.android.material.circularreveal.CircularRevealHelper.Delegate {
						public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealWidget>;
						/**
						 * Constructs a new instance of the com.google.android.material.circularreveal.CircularRevealWidget interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							draw(param0: android.graphics.Canvas): void;
							isOpaque(): boolean;
							buildCircularRevealCache(): void;
							destroyCircularRevealCache(): void;
							getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
							setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
							getCircularRevealScrimColor(): number;
							setCircularRevealScrimColor(param0: number): void;
							getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
							setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
							actualDraw(param0: android.graphics.Canvas): void;
							actualIsOpaque(): boolean;
						});
						public constructor();
						public draw(param0: android.graphics.Canvas): void;
						public destroyCircularRevealCache(): void;
						public actualDraw(param0: android.graphics.Canvas): void;
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public setCircularRevealScrimColor(param0: number): void;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
						public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
						public actualIsOpaque(): boolean;
						public getCircularRevealScrimColor(): number;
						public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public buildCircularRevealCache(): void;
						public isOpaque(): boolean;
					}
					export module CircularRevealWidget {
						export class CircularRevealEvaluator extends android.animation.TypeEvaluator<com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo> {
							public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealWidget.CircularRevealEvaluator>;
							public static CIRCULAR_REVEAL: android.animation.TypeEvaluator<com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo>;
							public constructor();
							public evaluate(fraction: number, startValue: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo, endValue: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						}
						export class CircularRevealProperty extends android.util.Property<com.google.android.material.circularreveal.CircularRevealWidget,com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo> {
							public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealWidget.CircularRevealProperty>;
							public static CIRCULAR_REVEAL: android.util.Property<com.google.android.material.circularreveal.CircularRevealWidget,com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo>;
							public get(param0: any): any;
							public set(object: any, value: any): void;
							public set(object: com.google.android.material.circularreveal.CircularRevealWidget, value: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
							public get(object: com.google.android.material.circularreveal.CircularRevealWidget): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						}
						export class CircularRevealScrimColorProperty extends android.util.Property<com.google.android.material.circularreveal.CircularRevealWidget,java.lang.Integer> {
							public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealWidget.CircularRevealScrimColorProperty>;
							public static CIRCULAR_REVEAL_SCRIM_COLOR: android.util.Property<com.google.android.material.circularreveal.CircularRevealWidget,java.lang.Integer>;
							public get(param0: any): any;
							public set(object: any, value: any): void;
							public get(object: com.google.android.material.circularreveal.CircularRevealWidget): java.lang.Integer;
							public set(object: com.google.android.material.circularreveal.CircularRevealWidget, value: java.lang.Integer): void;
						}
						export class RevealInfo extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo>;
							public static INVALID_RADIUS: number;
							public centerX: number;
							public centerY: number;
							public radius: number;
							public constructor(other: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo);
							public set(other: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
							public set(centerX: number, centerY: number, radius: number): void;
							public constructor(centerX: number, centerY: number, radius: number);
							public isInvalid(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export module cardview {
						export class CircularRevealCardView extends com.google.android.material.card.MaterialCardView implements com.google.android.material.circularreveal.CircularRevealWidget {
							public static class: java.lang.Class<com.google.android.material.circularreveal.cardview.CircularRevealCardView>;
							public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
							public addView(child: android.view.View, index: number): void;
							public addView(child: android.view.View, width: number, height: number): void;
							public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
							public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
							public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
							public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public getCircularRevealScrimColor(): number;
							public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
							public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
							public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
							public childDrawableStateChanged(param0: android.view.View): void;
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public setCircularRevealScrimColor(param0: number): void;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
							public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
							public clearChildFocus(param0: android.view.View): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
							public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
							public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public buildCircularRevealCache(): void;
							public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
							public focusSearch(direction: number): android.view.View;
							public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
							public actualIsOpaque(): boolean;
							public focusableViewAvailable(v: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public focusSearch(focused: android.view.View, direction: number): android.view.View;
							public childDrawableStateChanged(child: android.view.View): void;
							public removeView(view: android.view.View): void;
							public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
							public toggle(): void;
							public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public showContextMenuForChild(originalView: android.view.View): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
							public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
							public requestTransparentRegion(param0: android.view.View): void;
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
							public getParentForAccessibility(): android.view.ViewParent;
							public getTextDirection(): number;
							public setChecked(checked: boolean): void;
							public isLayoutRequested(): boolean;
							public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public sendAccessibilityEvent(eventType: number): void;
							public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
							public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public destroyCircularRevealCache(): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
							public requestChildFocus(child: android.view.View, focused: android.view.View): void;
							public draw(param0: android.graphics.Canvas): void;
							public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public setChecked(param0: boolean): void;
							public actualDraw(canvas: android.graphics.Canvas): void;
							public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							/** @deprecated */
							public requestFitSystemWindows(): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public isChecked(): boolean;
							public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
							public addView(child: android.view.View): void;
							public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
							public setCircularRevealScrimColor(color: number): void;
							public bringChildToFront(param0: android.view.View): void;
							public requestTransparentRegion(child: android.view.View): void;
							public recomputeViewAttributes(child: android.view.View): void;
							public clearChildFocus(child: android.view.View): void;
							public constructor(context: android.content.Context);
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
							public requestFitSystemWindows(): void;
							public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
							public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
							public getTextAlignment(): number;
							public bringChildToFront(child: android.view.View): void;
							public onStopNestedScroll(child: android.view.View): void;
							public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
							public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public isOpaque(): boolean;
							public actualDraw(param0: android.graphics.Canvas): void;
							public createContextMenu(menu: android.view.ContextMenu): void;
							public sendAccessibilityEvent(param0: number): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
							public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
							public draw(canvas: android.graphics.Canvas): void;
							public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module circularreveal {
					export module coordinatorlayout {
						export class CircularRevealCoordinatorLayout extends androidx.coordinatorlayout.widget.CoordinatorLayout implements com.google.android.material.circularreveal.CircularRevealWidget {
							public static class: java.lang.Class<com.google.android.material.circularreveal.coordinatorlayout.CircularRevealCoordinatorLayout>;
							public addView(child: android.view.View, index: number): void;
							public addView(child: android.view.View, width: number, height: number): void;
							public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
							public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public onStopNestedScroll(param0: android.view.View, param1: number): void;
							public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public getCircularRevealScrimColor(): number;
							public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
							public childDrawableStateChanged(param0: android.view.View): void;
							public constructor(param0: android.content.Context);
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public setCircularRevealScrimColor(param0: number): void;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
							public clearChildFocus(param0: android.view.View): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number, param5: number): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
							public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
							public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public buildCircularRevealCache(): void;
							public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
							public focusSearch(direction: number): android.view.View;
							public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
							public actualIsOpaque(): boolean;
							public focusableViewAvailable(v: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public focusSearch(focused: android.view.View, direction: number): android.view.View;
							public childDrawableStateChanged(child: android.view.View): void;
							public removeView(view: android.view.View): void;
							public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public showContextMenuForChild(originalView: android.view.View): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number, param3: number): void;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
							public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
							public requestTransparentRegion(param0: android.view.View): void;
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
							public getParentForAccessibility(): android.view.ViewParent;
							public getTextDirection(): number;
							public isLayoutRequested(): boolean;
							public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public sendAccessibilityEvent(eventType: number): void;
							public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
							public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public destroyCircularRevealCache(): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
							public requestChildFocus(child: android.view.View, focused: android.view.View): void;
							public draw(param0: android.graphics.Canvas): void;
							public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number[]): void;
							public actualDraw(canvas: android.graphics.Canvas): void;
							public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							/** @deprecated */
							public requestFitSystemWindows(): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
							public addView(child: android.view.View): void;
							public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
							public setCircularRevealScrimColor(color: number): void;
							public bringChildToFront(param0: android.view.View): void;
							public requestTransparentRegion(child: android.view.View): void;
							public recomputeViewAttributes(child: android.view.View): void;
							public clearChildFocus(child: android.view.View): void;
							public constructor(context: android.content.Context);
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public requestFitSystemWindows(): void;
							public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
							public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
							public getTextAlignment(): number;
							public bringChildToFront(child: android.view.View): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[], param4: number): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number, param3: number): boolean;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
							public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public isOpaque(): boolean;
							public actualDraw(param0: android.graphics.Canvas): void;
							public createContextMenu(menu: android.view.ContextMenu): void;
							public sendAccessibilityEvent(param0: number): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
							public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
							public draw(canvas: android.graphics.Canvas): void;
							public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ColorContrast extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ColorContrast>;
						public static applyToActivitiesIfAvailable(application: android.app.Application, colorContrastOptions: com.google.android.material.color.ColorContrastOptions): void;
						public static applyToActivityIfAvailable(activity: android.app.Activity, colorContrastOptions: com.google.android.material.color.ColorContrastOptions): void;
						public static isContrastAvailable(): boolean;
						public static wrapContextIfAvailable(context: android.content.Context, colorContrastOptions: com.google.android.material.color.ColorContrastOptions): android.content.Context;
					}
					export module ColorContrast {
						export class ColorContrastActivityLifecycleCallbacks extends java.lang.Object implements android.app.Application.ActivityLifecycleCallbacks {
							public static class: java.lang.Class<com.google.android.material.color.ColorContrast.ColorContrastActivityLifecycleCallbacks>;
							public onActivitySaveInstanceState(activity: android.app.Activity, outState: android.os.Bundle): void;
							public onActivityStopped(activity: android.app.Activity): void;
							public onActivityStarted(activity: android.app.Activity): void;
							public onActivityResumed(activity: android.app.Activity): void;
							public onActivityStarted(param0: android.app.Activity): void;
							public onActivityPreCreated(activity: android.app.Activity, savedInstanceState: android.os.Bundle): void;
							public onActivityPaused(activity: android.app.Activity): void;
							public onActivityStopped(param0: android.app.Activity): void;
							public onActivityDestroyed(param0: android.app.Activity): void;
							public onActivityCreated(param0: android.app.Activity, param1: android.os.Bundle): void;
							public onActivityResumed(param0: android.app.Activity): void;
							public onActivitySaveInstanceState(param0: android.app.Activity, param1: android.os.Bundle): void;
							public onActivityCreated(activity: android.app.Activity, savedInstanceState: android.os.Bundle): void;
							public onActivityDestroyed(activity: android.app.Activity): void;
							public onActivityPaused(param0: android.app.Activity): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ColorContrastOptions extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ColorContrastOptions>;
						public getMediumContrastThemeOverlay(): number;
						public getHighContrastThemeOverlay(): number;
					}
					export module ColorContrastOptions {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorContrastOptions.Builder>;
							public constructor();
							public setMediumContrastThemeOverlay(mediumContrastThemeOverlayResourceId: number): com.google.android.material.color.ColorContrastOptions.Builder;
							public build(): com.google.android.material.color.ColorContrastOptions;
							public setHighContrastThemeOverlay(highContrastThemeOverlayResourceId: number): com.google.android.material.color.ColorContrastOptions.Builder;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ColorResourcesLoaderCreator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ColorResourcesLoaderCreator>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ColorResourcesOverride extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ColorResourcesOverride>;
						/**
						 * Constructs a new instance of the com.google.android.material.color.ColorResourcesOverride interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							applyIfPossible(param0: android.content.Context, param1: java.util.Map<java.lang.Integer,java.lang.Integer>): boolean;
							wrapContextIfPossible(param0: android.content.Context, param1: java.util.Map<java.lang.Integer,java.lang.Integer>): android.content.Context;
							getInstance(): com.google.android.material.color.ColorResourcesOverride;
						});
						public constructor();
						public applyIfPossible(param0: android.content.Context, param1: java.util.Map<java.lang.Integer,java.lang.Integer>): boolean;
						public wrapContextIfPossible(param0: android.content.Context, param1: java.util.Map<java.lang.Integer,java.lang.Integer>): android.content.Context;
						public static getInstance(): com.google.android.material.color.ColorResourcesOverride;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ColorResourcesTableCreator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator>;
					}
					export module ColorResourcesTableCreator {
						export class ColorResource extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.ColorResource>;
						}
						export class PackageChunk extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.PackageChunk>;
						}
						export class PackageInfo extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.PackageInfo>;
						}
						export class ResChunkHeader extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.ResChunkHeader>;
						}
						export class ResEntry extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.ResEntry>;
						}
						export class ResTable extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.ResTable>;
						}
						export class StringPoolChunk extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.StringPoolChunk>;
						}
						export class StringStyledSpan extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.StringStyledSpan>;
						}
						export class TypeChunk extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.TypeChunk>;
						}
						export class TypeSpecChunk extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ColorResourcesTableCreator.TypeSpecChunk>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ColorRoles extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ColorRoles>;
						public getOnAccentContainer(): number;
						public getAccent(): number;
						public getOnAccent(): number;
						public getAccentContainer(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class DynamicColors extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.DynamicColors>;
						public static applyToActivitiesIfAvailable(application: android.app.Application): void;
						public static applyToActivityIfAvailable(activity: android.app.Activity): void;
						public static wrapContextIfAvailable(originalContext: android.content.Context, theme: number): android.content.Context;
						/** @deprecated */
						public static applyIfAvailable(activity: android.app.Activity, theme: number): void;
						public static applyToActivityIfAvailable(activity: android.app.Activity, dynamicColorsOptions: com.google.android.material.color.DynamicColorsOptions): void;
						public static wrapContextIfAvailable(originalContext: android.content.Context): android.content.Context;
						public static wrapContextIfAvailable(originalContext: android.content.Context, dynamicColorsOptions: com.google.android.material.color.DynamicColorsOptions): android.content.Context;
						public static isDynamicColorAvailable(): boolean;
						/** @deprecated */
						public static applyToActivitiesIfAvailable(application: android.app.Application, theme: number): void;
						/** @deprecated */
						public static applyToActivitiesIfAvailable(application: android.app.Application, precondition: com.google.android.material.color.DynamicColors.Precondition): void;
						public static applyToActivitiesIfAvailable(application: android.app.Application, dynamicColorsOptions: com.google.android.material.color.DynamicColorsOptions): void;
						/** @deprecated */
						public static applyIfAvailable(activity: android.app.Activity): void;
						/** @deprecated */
						public static applyIfAvailable(activity: android.app.Activity, precondition: com.google.android.material.color.DynamicColors.Precondition): void;
						/** @deprecated */
						public static applyToActivitiesIfAvailable(application: android.app.Application, theme: number, precondition: com.google.android.material.color.DynamicColors.Precondition): void;
					}
					export module DynamicColors {
						export class DeviceSupportCondition extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.DynamicColors.DeviceSupportCondition>;
							/**
							 * Constructs a new instance of the com.google.android.material.color.DynamicColors$DeviceSupportCondition interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								isSupported(): boolean;
							});
							public constructor();
							public isSupported(): boolean;
						}
						export class DynamicColorsActivityLifecycleCallbacks extends java.lang.Object implements android.app.Application.ActivityLifecycleCallbacks {
							public static class: java.lang.Class<com.google.android.material.color.DynamicColors.DynamicColorsActivityLifecycleCallbacks>;
							public onActivitySaveInstanceState(activity: android.app.Activity, outState: android.os.Bundle): void;
							public onActivityStopped(activity: android.app.Activity): void;
							public onActivityStarted(activity: android.app.Activity): void;
							public onActivityResumed(activity: android.app.Activity): void;
							public onActivityStarted(param0: android.app.Activity): void;
							public onActivityPreCreated(activity: android.app.Activity, savedInstanceState: android.os.Bundle): void;
							public onActivityPaused(activity: android.app.Activity): void;
							public onActivityStopped(param0: android.app.Activity): void;
							public onActivityDestroyed(param0: android.app.Activity): void;
							public onActivityCreated(param0: android.app.Activity, param1: android.os.Bundle): void;
							public onActivityResumed(param0: android.app.Activity): void;
							public onActivitySaveInstanceState(param0: android.app.Activity, param1: android.os.Bundle): void;
							public onActivityCreated(activity: android.app.Activity, savedInstanceState: android.os.Bundle): void;
							public onActivityDestroyed(activity: android.app.Activity): void;
							public onActivityPaused(param0: android.app.Activity): void;
						}
						export class OnAppliedCallback extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.DynamicColors.OnAppliedCallback>;
							/**
							 * Constructs a new instance of the com.google.android.material.color.DynamicColors$OnAppliedCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onApplied(param0: android.app.Activity): void;
							});
							public constructor();
							public onApplied(param0: android.app.Activity): void;
						}
						export class Precondition extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.DynamicColors.Precondition>;
							/**
							 * Constructs a new instance of the com.google.android.material.color.DynamicColors$Precondition interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								shouldApplyDynamicColors(param0: android.app.Activity, param1: number): boolean;
							});
							public constructor();
							public shouldApplyDynamicColors(param0: android.app.Activity, param1: number): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class DynamicColorsOptions extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.DynamicColorsOptions>;
						public getContentBasedSeedColor(): java.lang.Integer;
						public getThemeOverlay(): number;
						public getPrecondition(): com.google.android.material.color.DynamicColors.Precondition;
						public getOnAppliedCallback(): com.google.android.material.color.DynamicColors.OnAppliedCallback;
					}
					export module DynamicColorsOptions {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.DynamicColorsOptions.Builder>;
							public constructor();
							public setContentBasedSource(contentBasedSource: number): com.google.android.material.color.DynamicColorsOptions.Builder;
							public build(): com.google.android.material.color.DynamicColorsOptions;
							public setPrecondition(precondition: com.google.android.material.color.DynamicColors.Precondition): com.google.android.material.color.DynamicColorsOptions.Builder;
							public setOnAppliedCallback(onAppliedCallback: com.google.android.material.color.DynamicColors.OnAppliedCallback): com.google.android.material.color.DynamicColorsOptions.Builder;
							public setContentBasedSource(contentBasedSource: android.graphics.Bitmap): com.google.android.material.color.DynamicColorsOptions.Builder;
							public setThemeOverlay(themeOverlay: number): com.google.android.material.color.DynamicColorsOptions.Builder;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class HarmonizedColorAttributes extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.HarmonizedColorAttributes>;
						public static create(attributes: number[]): com.google.android.material.color.HarmonizedColorAttributes;
						public getThemeOverlay(): number;
						public static createMaterialDefaults(): com.google.android.material.color.HarmonizedColorAttributes;
						public static create(attributes: number[], themeOverlay: number): com.google.android.material.color.HarmonizedColorAttributes;
						public getAttributes(): number[];
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class HarmonizedColors extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.HarmonizedColors>;
						public static wrapContextIfAvailable(context: android.content.Context, options: com.google.android.material.color.HarmonizedColorsOptions): android.content.Context;
						public static isHarmonizedColorAvailable(): boolean;
						public static applyToContextIfAvailable(context: android.content.Context, options: com.google.android.material.color.HarmonizedColorsOptions): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class HarmonizedColorsOptions extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.HarmonizedColorsOptions>;
						public static createMaterialDefaults(): com.google.android.material.color.HarmonizedColorsOptions;
						public getColorAttributeToHarmonizeWith(): number;
						public getColorResourceIds(): number[];
						public getColorAttributes(): com.google.android.material.color.HarmonizedColorAttributes;
					}
					export module HarmonizedColorsOptions {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.HarmonizedColorsOptions.Builder>;
							public constructor();
							public setColorResourceIds(colorResourceIds: number[]): com.google.android.material.color.HarmonizedColorsOptions.Builder;
							public build(): com.google.android.material.color.HarmonizedColorsOptions;
							public setColorAttributeToHarmonizeWith(colorAttributeToHarmonizeWith: number): com.google.android.material.color.HarmonizedColorsOptions.Builder;
							public setColorAttributes(colorAttributes: com.google.android.material.color.HarmonizedColorAttributes): com.google.android.material.color.HarmonizedColorsOptions.Builder;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class MaterialColorUtilitiesHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.MaterialColorUtilitiesHelper>;
						public static createColorResourcesIdsToColorValues(colorScheme: com.google.android.material.color.utilities.DynamicScheme): java.util.Map<java.lang.Integer,java.lang.Integer>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class MaterialColors extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.MaterialColors>;
						public static ALPHA_FULL: number;
						public static ALPHA_MEDIUM: number;
						public static ALPHA_DISABLED: number;
						public static ALPHA_LOW: number;
						public static ALPHA_DISABLED_LOW: number;
						public static getColorStateListOrNull(context: android.content.Context, colorAttributeResId: number): android.content.res.ColorStateList;
						public static layer(backgroundColor: number, overlayColor: number, overlayAlpha: number): number;
						public static compositeARGBWithAlpha(originalARGB: number, alpha: number): number;
						public static layer(view: android.view.View, backgroundColorAttributeResId: number, overlayColorAttributeResId: number): number;
						public static layer(backgroundColor: number, overlayColor: number): number;
						public static getColor(view: android.view.View, colorAttributeResId: number): number;
						public static layer(view: android.view.View, backgroundColorAttributeResId: number, overlayColorAttributeResId: number, overlayAlpha: number): number;
						public static getColorRoles(context: android.content.Context, color: number): com.google.android.material.color.ColorRoles;
						public static getColor(view: android.view.View, colorAttributeResId: number, defaultValue: number): number;
						public static getColorStateList(context: android.content.Context, colorAttributeResId: number, defaultValue: android.content.res.ColorStateList): android.content.res.ColorStateList;
						public static getColorRoles(color: number, isLightTheme: boolean): com.google.android.material.color.ColorRoles;
						public static getColor(context: android.content.Context, colorAttributeResId: number, defaultValue: number): number;
						public static isColorLight(color: number): boolean;
						public static harmonizeWithPrimary(context: android.content.Context, colorToHarmonize: number): number;
						public static harmonize(colorToHarmonize: number, colorToHarmonizeWith: number): number;
						public static getSurfaceContainerFromSeed(context: android.content.Context, seedColor: number): number;
						public static getSurfaceContainerHighFromSeed(context: android.content.Context, seedColor: number): number;
						public static getColor(context: android.content.Context, colorAttributeResId: number, errorMessageComponent: string): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ResourcesLoaderColorResourcesOverride extends java.lang.Object implements com.google.android.material.color.ColorResourcesOverride {
						public static class: java.lang.Class<com.google.android.material.color.ResourcesLoaderColorResourcesOverride>;
						public applyIfPossible(param0: android.content.Context, param1: java.util.Map<java.lang.Integer,java.lang.Integer>): boolean;
						public wrapContextIfPossible(param0: android.content.Context, param1: java.util.Map<java.lang.Integer,java.lang.Integer>): android.content.Context;
						public static getInstance(): com.google.android.material.color.ColorResourcesOverride;
						public applyIfPossible(context: android.content.Context, colorResourceIdsToColorValues: java.util.Map<java.lang.Integer,java.lang.Integer>): boolean;
						public wrapContextIfPossible(context: android.content.Context, colorResourceIdsToColorValues: java.util.Map<java.lang.Integer,java.lang.Integer>): android.content.Context;
					}
					export module ResourcesLoaderColorResourcesOverride {
						export class ResourcesLoaderColorResourcesOverrideSingleton extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.ResourcesLoaderColorResourcesOverride.ResourcesLoaderColorResourcesOverrideSingleton>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ResourcesLoaderUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ResourcesLoaderUtils>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export class ThemeUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.color.ThemeUtils>;
						public static applyThemeOverlay(context: android.content.Context, theme: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Blend extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Blend>;
							public static cam16Ucs(from: number, to: number, amount: number): number;
							public static hctHue(from: number, to: number, amount: number): number;
							public static harmonize(designColor: number, sourceColor: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Cam16 extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Cam16>;
							public getM(): number;
							public getHue(): number;
							public getBstar(): number;
							public getJ(): number;
							public static fromUcs(jstar: number, param1: number, astar: number): com.google.android.material.color.utilities.Cam16;
							public getQ(): number;
							public getAstar(): number;
							public static fromInt(argb: number): com.google.android.material.color.utilities.Cam16;
							public getS(): number;
							public toInt(): number;
							public getChroma(): number;
							public getJstar(): number;
							public static fromUcsInViewingConditions(jstar: number, param1: number, astar: number, param3: com.google.android.material.color.utilities.ViewingConditions): com.google.android.material.color.utilities.Cam16;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class ColorUtils extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.ColorUtils>;
							public static isOpaque(argb: number): boolean;
							public static xyzFromArgb(argb: number): number[];
							public static blueFromArgb(argb: number): number;
							public static argbFromXyz(x: number, param1: number, y: number): number;
							public static lstarFromArgb(argb: number): number;
							public static whitePointD65(): number[];
							public static lstarFromY(y: number): number;
							public static yFromLstar(lstar: number): number;
							public static argbFromRgb(red: number, green: number, blue: number): number;
							public static delinearized(rgbComponent: number): number;
							public static linearized(rgbComponent: number): number;
							public static greenFromArgb(argb: number): number;
							public static labFromArgb(argb: number): number[];
							public static alphaFromArgb(argb: number): number;
							public static argbFromLab(l: number, param1: number, a: number): number;
							public static argbFromLstar(lstar: number): number;
							public static argbFromLinrgb(linrgb: number[]): number;
							public static redFromArgb(argb: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Contrast extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Contrast>;
							public static RATIO_MIN: number;
							public static RATIO_MAX: number;
							public static RATIO_30: number;
							public static RATIO_45: number;
							public static RATIO_70: number;
							public static ratioOfYs(y1: number, param1: number): number;
							public static lighterUnsafe(tone: number, param1: number): number;
							public static ratioOfTones(t1: number, param1: number): number;
							public static darker(tone: number, param1: number): number;
							public static darkerUnsafe(tone: number, param1: number): number;
							public static lighter(tone: number, param1: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class CorePalette extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.CorePalette>;
							public a1: com.google.android.material.color.utilities.TonalPalette;
							public a2: com.google.android.material.color.utilities.TonalPalette;
							public a3: com.google.android.material.color.utilities.TonalPalette;
							public n1: com.google.android.material.color.utilities.TonalPalette;
							public n2: com.google.android.material.color.utilities.TonalPalette;
							public error: com.google.android.material.color.utilities.TonalPalette;
							public static of(argb: number): com.google.android.material.color.utilities.CorePalette;
							public static contentOf(argb: number): com.google.android.material.color.utilities.CorePalette;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class DislikeAnalyzer extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.DislikeAnalyzer>;
							public static isDisliked(hct: com.google.android.material.color.utilities.Hct): boolean;
							public static fixIfDisliked(hct: com.google.android.material.color.utilities.Hct): com.google.android.material.color.utilities.Hct;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class DynamicColor extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.DynamicColor>;
							public hue: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/;
							public chroma: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/;
							public tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/;
							public opacity: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/;
							public background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/;
							public toneMinContrast: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/;
							public toneMaxContrast: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/;
							public toneDeltaConstraint: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.ToneDeltaConstraint>*/;
							public static fromArgb(argb: number): com.google.android.material.color.utilities.DynamicColor;
							public static toneMinContrastDefault(tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/, scheme: com.google.android.material.color.utilities.DynamicScheme, toneDeltaConstraint: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.ToneDeltaConstraint>*/): number;
							public static fromPalette(palette: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.TonalPalette>*/, tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/, toneDeltaConstraint: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.ToneDeltaConstraint>*/): com.google.android.material.color.utilities.DynamicColor;
							public static fromPalette(palette: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.TonalPalette>*/, tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/): com.google.android.material.color.utilities.DynamicColor;
							public static tonePrefersLightForeground(tone: number): boolean;
							public getHct(scheme: com.google.android.material.color.utilities.DynamicScheme): com.google.android.material.color.utilities.Hct;
							public static calculateDynamicTone(scheme: com.google.android.material.color.utilities.DynamicScheme, toneStandard: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, toneToJudge: any /* any<com.google.android.material.color.utilities.DynamicColor,java.lang.Double>*/, desiredTone: any /* any<java.lang.Double,java.lang.Double,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/, toneDeltaConstraint: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.ToneDeltaConstraint>*/, minRatio: any /* any<java.lang.Double,java.lang.Double>*/, maxRatio: any /* any<java.lang.Double,java.lang.Double>*/): number;
							public static fromArgb(argb: number, tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/): com.google.android.material.color.utilities.DynamicColor;
							public static toneMaxContrastDefault(tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/, scheme: com.google.android.material.color.utilities.DynamicScheme, toneDeltaConstraint: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.ToneDeltaConstraint>*/): number;
							public constructor(hue: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, chroma: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, opacity: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/, toneMinContrast: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, toneMaxContrast: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, toneDeltaConstraint: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.ToneDeltaConstraint>*/);
							public getTone(scheme: com.google.android.material.color.utilities.DynamicScheme): number;
							public static fromArgb(argb: number, tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/): com.google.android.material.color.utilities.DynamicColor;
							public static toneAllowsLightForeground(tone: number): boolean;
							public static fromPalette(palette: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.TonalPalette>*/, tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/): com.google.android.material.color.utilities.DynamicColor;
							public static fromArgb(argb: number, tone: any /* any<com.google.android.material.color.utilities.DynamicScheme,java.lang.Double>*/, background: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.DynamicColor>*/, toneDeltaConstraint: any /* any<com.google.android.material.color.utilities.DynamicScheme,com.google.android.material.color.utilities.ToneDeltaConstraint>*/): com.google.android.material.color.utilities.DynamicColor;
							public static contrastingTone(bgTone: number, param1: number): number;
							public getArgb(scheme: com.google.android.material.color.utilities.DynamicScheme): number;
							public static enableLightForeground(tone: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class DynamicScheme extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.DynamicScheme>;
							public sourceColorArgb: number;
							public sourceColorHct: com.google.android.material.color.utilities.Hct;
							public variant: com.google.android.material.color.utilities.Variant;
							public isDark: boolean;
							public contrastLevel: number;
							public primaryPalette: com.google.android.material.color.utilities.TonalPalette;
							public secondaryPalette: com.google.android.material.color.utilities.TonalPalette;
							public tertiaryPalette: com.google.android.material.color.utilities.TonalPalette;
							public neutralPalette: com.google.android.material.color.utilities.TonalPalette;
							public neutralVariantPalette: com.google.android.material.color.utilities.TonalPalette;
							public errorPalette: com.google.android.material.color.utilities.TonalPalette;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public static getRotatedHue(sourceColorHct: com.google.android.material.color.utilities.Hct, hues: number[], rotations: number[]): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Hct extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Hct>;
							public toInt(): number;
							public getHue(): number;
							public setTone(newTone: number): void;
							public getChroma(): number;
							public setHue(newHue: number): void;
							public getTone(): number;
							public inViewingConditions(vc: com.google.android.material.color.utilities.ViewingConditions): com.google.android.material.color.utilities.Hct;
							public static from(hue: number, param1: number, chroma: number): com.google.android.material.color.utilities.Hct;
							public static fromInt(argb: number): com.google.android.material.color.utilities.Hct;
							public setChroma(newChroma: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class HctSolver extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.HctSolver>;
							public static solveToCam(hueDegrees: number, param1: number, chroma: number): com.google.android.material.color.utilities.Cam16;
							public static solveToInt(hueDegrees: number, param1: number, chroma: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class MaterialDynamicColors extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.MaterialDynamicColors>;
							public inverseSurface(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceContainerHighest(): com.google.android.material.color.utilities.DynamicColor;
							public tertiaryPaletteKeyColor(): com.google.android.material.color.utilities.DynamicColor;
							public inversePrimary(): com.google.android.material.color.utilities.DynamicColor;
							public onPrimary(): com.google.android.material.color.utilities.DynamicColor;
							public textPrimaryInverseDisableOnly(): com.google.android.material.color.utilities.DynamicColor;
							public primaryFixed(): com.google.android.material.color.utilities.DynamicColor;
							public tertiaryContainer(): com.google.android.material.color.utilities.DynamicColor;
							public textPrimaryInverse(): com.google.android.material.color.utilities.DynamicColor;
							public secondaryContainer(): com.google.android.material.color.utilities.DynamicColor;
							public secondary(): com.google.android.material.color.utilities.DynamicColor;
							public textSecondaryAndTertiaryInverseDisabled(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceContainerLowest(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceTint(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceContainer(): com.google.android.material.color.utilities.DynamicColor;
							public onError(): com.google.android.material.color.utilities.DynamicColor;
							public secondaryPaletteKeyColor(): com.google.android.material.color.utilities.DynamicColor;
							public onSurfaceVariant(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceDim(): com.google.android.material.color.utilities.DynamicColor;
							public tertiaryFixed(): com.google.android.material.color.utilities.DynamicColor;
							public textSecondaryAndTertiaryInverse(): com.google.android.material.color.utilities.DynamicColor;
							public primaryPaletteKeyColor(): com.google.android.material.color.utilities.DynamicColor;
							public onPrimaryFixedVariant(): com.google.android.material.color.utilities.DynamicColor;
							public error(): com.google.android.material.color.utilities.DynamicColor;
							public onTertiaryFixedVariant(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceBright(): com.google.android.material.color.utilities.DynamicColor;
							public onPrimaryContainer(): com.google.android.material.color.utilities.DynamicColor;
							public onBackground(): com.google.android.material.color.utilities.DynamicColor;
							public onPrimaryFixed(): com.google.android.material.color.utilities.DynamicColor;
							public tertiaryFixedDim(): com.google.android.material.color.utilities.DynamicColor;
							public neutralVariantPaletteKeyColor(): com.google.android.material.color.utilities.DynamicColor;
							public textHintInverse(): com.google.android.material.color.utilities.DynamicColor;
							public outline(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceContainerHigh(): com.google.android.material.color.utilities.DynamicColor;
							public controlActivated(): com.google.android.material.color.utilities.DynamicColor;
							public controlHighlight(): com.google.android.material.color.utilities.DynamicColor;
							public onErrorContainer(): com.google.android.material.color.utilities.DynamicColor;
							public onSecondary(): com.google.android.material.color.utilities.DynamicColor;
							public outlineVariant(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceVariant(): com.google.android.material.color.utilities.DynamicColor;
							public onTertiaryFixed(): com.google.android.material.color.utilities.DynamicColor;
							public constructor();
							public highestSurface(s: com.google.android.material.color.utilities.DynamicScheme): com.google.android.material.color.utilities.DynamicColor;
							public inverseOnSurface(): com.google.android.material.color.utilities.DynamicColor;
							public surfaceContainerLow(): com.google.android.material.color.utilities.DynamicColor;
							public secondaryFixedDim(): com.google.android.material.color.utilities.DynamicColor;
							public shadow(): com.google.android.material.color.utilities.DynamicColor;
							public onTertiaryContainer(): com.google.android.material.color.utilities.DynamicColor;
							public surface(): com.google.android.material.color.utilities.DynamicColor;
							public secondaryFixed(): com.google.android.material.color.utilities.DynamicColor;
							public neutralPaletteKeyColor(): com.google.android.material.color.utilities.DynamicColor;
							public onSecondaryFixedVariant(): com.google.android.material.color.utilities.DynamicColor;
							public primary(): com.google.android.material.color.utilities.DynamicColor;
							public scrim(): com.google.android.material.color.utilities.DynamicColor;
							public controlNormal(): com.google.android.material.color.utilities.DynamicColor;
							public background(): com.google.android.material.color.utilities.DynamicColor;
							public onSecondaryContainer(): com.google.android.material.color.utilities.DynamicColor;
							public tertiary(): com.google.android.material.color.utilities.DynamicColor;
							public onSurface(): com.google.android.material.color.utilities.DynamicColor;
							public onTertiary(): com.google.android.material.color.utilities.DynamicColor;
							public errorContainer(): com.google.android.material.color.utilities.DynamicColor;
							public primaryFixedDim(): com.google.android.material.color.utilities.DynamicColor;
							public onSecondaryFixed(): com.google.android.material.color.utilities.DynamicColor;
							public primaryContainer(): com.google.android.material.color.utilities.DynamicColor;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class MathUtils extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.MathUtils>;
							public static matrixMultiply(row: number[], matrix: number[][]): number[];
							public static signum(num: number): number;
							public static lerp(start: number, param1: number, stop: number): number;
							public static differenceDegrees(a: number, param1: number): number;
							public static sanitizeDegreesInt(degrees: number): number;
							public static sanitizeDegreesDouble(degrees: number): number;
							public static clampDouble(min: number, param1: number, max: number): number;
							public static rotationDirection(from: number, param1: number): number;
							public static clampInt(min: number, max: number, input: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class PointProvider extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.PointProvider>;
							/**
							 * Constructs a new instance of the com.google.android.material.color.utilities.PointProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								fromInt(param0: number): number[];
								toInt(param0: number[]): number;
								distance(param0: number[], param1: number[]): number;
							});
							public constructor();
							public fromInt(param0: number): number[];
							public toInt(param0: number[]): number;
							public distance(param0: number[], param1: number[]): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class PointProviderLab extends java.lang.Object implements com.google.android.material.color.utilities.PointProvider {
							public static class: java.lang.Class<com.google.android.material.color.utilities.PointProviderLab>;
							public constructor();
							public fromInt(param0: number): number[];
							public fromInt(argb: number): number[];
							public toInt(lab: number[]): number;
							public distance(one: number[], two: number[]): number;
							public toInt(param0: number[]): number;
							public distance(param0: number[], param1: number[]): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Quantizer extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Quantizer>;
							/**
							 * Constructs a new instance of the com.google.android.material.color.utilities.Quantizer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								quantize(param0: number[], param1: number): com.google.android.material.color.utilities.QuantizerResult;
							});
							public constructor();
							public quantize(param0: number[], param1: number): com.google.android.material.color.utilities.QuantizerResult;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class QuantizerCelebi extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerCelebi>;
							public static quantize(pixels: number[], maxColors: number): java.util.Map<java.lang.Integer,java.lang.Integer>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class QuantizerMap extends java.lang.Object implements com.google.android.material.color.utilities.Quantizer {
							public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerMap>;
							public constructor();
							public quantize(param0: number[], param1: number): com.google.android.material.color.utilities.QuantizerResult;
							public quantize(pixels: number[], colorCount: number): com.google.android.material.color.utilities.QuantizerResult;
							public getColorToCount(): java.util.Map<java.lang.Integer,java.lang.Integer>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class QuantizerResult extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerResult>;
							public colorToCount: java.util.Map<java.lang.Integer,java.lang.Integer>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class QuantizerWsmeans extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerWsmeans>;
							public static quantize(inputPixels: number[], startingClusters: number[], maxColors: number): java.util.Map<java.lang.Integer,java.lang.Integer>;
						}
						export module QuantizerWsmeans {
							export class Distance extends java.lang.Comparable<com.google.android.material.color.utilities.QuantizerWsmeans.Distance> {
								public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerWsmeans.Distance>;
								public compareTo(other: com.google.android.material.color.utilities.QuantizerWsmeans.Distance): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class QuantizerWu extends java.lang.Object implements com.google.android.material.color.utilities.Quantizer {
							public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerWu>;
							public constructor();
							public quantize(param0: number[], param1: number): com.google.android.material.color.utilities.QuantizerResult;
							public quantize(pixels: number[], colorCount: number): com.google.android.material.color.utilities.QuantizerResult;
						}
						export module QuantizerWu {
							export class Box extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerWu.Box>;
							}
							export class CreateBoxesResult extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerWu.CreateBoxesResult>;
							}
							export class Direction {
								public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerWu.Direction>;
								public static RED: com.google.android.material.color.utilities.QuantizerWu.Direction;
								public static GREEN: com.google.android.material.color.utilities.QuantizerWu.Direction;
								public static BLUE: com.google.android.material.color.utilities.QuantizerWu.Direction;
								public static valueOf(name: string): com.google.android.material.color.utilities.QuantizerWu.Direction;
								public static values(): com.google.android.material.color.utilities.QuantizerWu.Direction[];
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							}
							export class MaximizeResult extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.color.utilities.QuantizerWu.MaximizeResult>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Scheme extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Scheme>;
							public getOnError(): number;
							public getBackground(): number;
							public withTertiaryContainer(tertiaryContainer: number): com.google.android.material.color.utilities.Scheme;
							public getOnSurfaceVariant(): number;
							public getOnPrimaryContainer(): number;
							public withOnError(onError: number): com.google.android.material.color.utilities.Scheme;
							public setInverseOnSurface(inverseOnSurface: number): void;
							public getInverseOnSurface(): number;
							public setSurfaceVariant(surfaceVariant: number): void;
							public setOutlineVariant(outlineVariant: number): void;
							public setInverseSurface(inverseSurface: number): void;
							public setPrimaryContainer(primaryContainer: number): void;
							public withOnPrimaryContainer(onPrimaryContainer: number): com.google.android.material.color.utilities.Scheme;
							public withShadow(shadow: number): com.google.android.material.color.utilities.Scheme;
							public getTertiary(): number;
							public withError(error: number): com.google.android.material.color.utilities.Scheme;
							public setOutline(outline: number): void;
							public setOnTertiary(onTertiary: number): void;
							public withOnBackground(onBackground: number): com.google.android.material.color.utilities.Scheme;
							public withSecondaryContainer(secondaryContainer: number): com.google.android.material.color.utilities.Scheme;
							public setScrim(scrim: number): void;
							public setOnSecondaryContainer(onSecondaryContainer: number): void;
							public setOnErrorContainer(onErrorContainer: number): void;
							public getShadow(): number;
							public setSecondary(secondary: number): void;
							public setOnSecondary(onSecondary: number): void;
							public toString(): string;
							public setError(error: number): void;
							public setBackground(background: number): void;
							public setSurface(surface: number): void;
							public getOnTertiary(): number;
							public withScrim(scrim: number): com.google.android.material.color.utilities.Scheme;
							public setOnTertiaryContainer(onTertiaryContainer: number): void;
							public withOutlineVariant(outlineVariant: number): com.google.android.material.color.utilities.Scheme;
							public constructor();
							public setInversePrimary(inversePrimary: number): void;
							public getTertiaryContainer(): number;
							public getSurface(): number;
							public withSecondary(secondary: number): com.google.android.material.color.utilities.Scheme;
							public getOnErrorContainer(): number;
							public withInversePrimary(inversePrimary: number): com.google.android.material.color.utilities.Scheme;
							public withOnPrimary(onPrimary: number): com.google.android.material.color.utilities.Scheme;
							public getPrimaryContainer(): number;
							public getOnPrimary(): number;
							public static lightContent(argb: number): com.google.android.material.color.utilities.Scheme;
							public setOnError(onError: number): void;
							public getSurfaceVariant(): number;
							public setPrimary(primary: number): void;
							public getSecondaryContainer(): number;
							public setOnBackground(onBackground: number): void;
							public setOnSurface(onSurface: number): void;
							public getInversePrimary(): number;
							public setOnSurfaceVariant(onSurfaceVariant: number): void;
							public withInverseSurface(inverseSurface: number): com.google.android.material.color.utilities.Scheme;
							public setSecondaryContainer(secondaryContainer: number): void;
							public withOnTertiary(onTertiary: number): com.google.android.material.color.utilities.Scheme;
							public getOutlineVariant(): number;
							public setTertiary(tertiary: number): void;
							public withSurface(surface: number): com.google.android.material.color.utilities.Scheme;
							public withOnTertiaryContainer(onTertiaryContainer: number): com.google.android.material.color.utilities.Scheme;
							public withOnSecondary(onSecondary: number): com.google.android.material.color.utilities.Scheme;
							public static darkContent(argb: number): com.google.android.material.color.utilities.Scheme;
							public setErrorContainer(errorContainer: number): void;
							public getOnSecondary(): number;
							public getInverseSurface(): number;
							public withTertiary(tertiary: number): com.google.android.material.color.utilities.Scheme;
							public getOnSurface(): number;
							public static light(argb: number): com.google.android.material.color.utilities.Scheme;
							public withBackground(background: number): com.google.android.material.color.utilities.Scheme;
							public getOutline(): number;
							public withSurfaceVariant(surfaceVariant: number): com.google.android.material.color.utilities.Scheme;
							public getPrimary(): number;
							public withOnErrorContainer(onErrorContainer: number): com.google.android.material.color.utilities.Scheme;
							public withPrimary(primary: number): com.google.android.material.color.utilities.Scheme;
							public setTertiaryContainer(tertiaryContainer: number): void;
							public withPrimaryContainer(primaryContainer: number): com.google.android.material.color.utilities.Scheme;
							public setOnPrimaryContainer(onPrimaryContainer: number): void;
							public constructor(primary: number, onPrimary: number, primaryContainer: number, onPrimaryContainer: number, secondary: number, onSecondary: number, secondaryContainer: number, onSecondaryContainer: number, tertiary: number, onTertiary: number, tertiaryContainer: number, onTertiaryContainer: number, error: number, onError: number, errorContainer: number, onErrorContainer: number, background: number, onBackground: number, surface: number, onSurface: number, surfaceVariant: number, onSurfaceVariant: number, outline: number, outlineVariant: number, shadow: number, scrim: number, inverseSurface: number, inverseOnSurface: number, inversePrimary: number);
							public getOnSecondaryContainer(): number;
							public hashCode(): number;
							public equals(obj: any): boolean;
							public getError(): number;
							public withOutline(outline: number): com.google.android.material.color.utilities.Scheme;
							public getScrim(): number;
							public withInverseOnSurface(inverseOnSurface: number): com.google.android.material.color.utilities.Scheme;
							public static dark(argb: number): com.google.android.material.color.utilities.Scheme;
							public equals(object: any): boolean;
							public getErrorContainer(): number;
							public withErrorContainer(errorContainer: number): com.google.android.material.color.utilities.Scheme;
							public withOnSurface(onSurface: number): com.google.android.material.color.utilities.Scheme;
							public getOnBackground(): number;
							public setShadow(shadow: number): void;
							public getSecondary(): number;
							public withOnSurfaceVariant(onSurfaceVariant: number): com.google.android.material.color.utilities.Scheme;
							public setOnPrimary(onPrimary: number): void;
							public getOnTertiaryContainer(): number;
							public withOnSecondaryContainer(onSecondaryContainer: number): com.google.android.material.color.utilities.Scheme;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeContent extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeContent>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeExpressive extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeExpressive>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeFidelity extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeFidelity>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeFruitSalad extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeFruitSalad>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeMonochrome extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeMonochrome>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeNeutral extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeNeutral>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeRainbow extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeRainbow>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeTonalSpot extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeTonalSpot>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class SchemeVibrant extends com.google.android.material.color.utilities.DynamicScheme {
							public static class: java.lang.Class<com.google.android.material.color.utilities.SchemeVibrant>;
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, variant: com.google.android.material.color.utilities.Variant, isDark: boolean, contrastLevel: number, param4: com.google.android.material.color.utilities.TonalPalette, primaryPalette: com.google.android.material.color.utilities.TonalPalette, secondaryPalette: com.google.android.material.color.utilities.TonalPalette, tertiaryPalette: com.google.android.material.color.utilities.TonalPalette, neutralPalette: com.google.android.material.color.utilities.TonalPalette);
							public constructor(sourceColorHct: com.google.android.material.color.utilities.Hct, isDark: boolean, contrastLevel: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Score extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Score>;
							public static score(colorsToPopulation: java.util.Map<java.lang.Integer,java.lang.Integer>): java.util.List<java.lang.Integer>;
							public static score(colorsToPopulation: java.util.Map<java.lang.Integer,java.lang.Integer>, maxColorCount: number, fallbackColorArgb: number): java.util.List<java.lang.Integer>;
							public static score(colorsToPopulation: java.util.Map<java.lang.Integer,java.lang.Integer>, maxColorCount: number, fallbackColorArgb: number, filter: boolean): java.util.List<java.lang.Integer>;
							public static score(colorsToPopulation: java.util.Map<java.lang.Integer,java.lang.Integer>, maxColorCount: number): java.util.List<java.lang.Integer>;
						}
						export module Score {
							export class ScoredComparator extends java.util.Comparator<com.google.android.material.color.utilities.Score.ScoredHCT> {
								public static class: java.lang.Class<com.google.android.material.color.utilities.Score.ScoredComparator>;
								public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
								public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public static reverseOrder(): java.util.Comparator<any>;
								public static naturalOrder(): java.util.Comparator<any>;
								public equals(param0: any): boolean;
								public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public constructor();
								public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public compare(entry1: com.google.android.material.color.utilities.Score.ScoredHCT, entry2: com.google.android.material.color.utilities.Score.ScoredHCT): number;
								public equals(obj: any): boolean;
								public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
								public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
								public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
								public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
								public compare(param0: any, param1: any): number;
								public reversed(): java.util.Comparator<any>;
								public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
							}
							export class ScoredHCT extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.color.utilities.Score.ScoredHCT>;
								public hct: com.google.android.material.color.utilities.Hct;
								public score: number;
								public constructor(hct: com.google.android.material.color.utilities.Hct, score: number);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class TemperatureCache extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.TemperatureCache>;
							public getComplement(): com.google.android.material.color.utilities.Hct;
							public getAnalogousColors(count: number, divisions: number): java.util.List<com.google.android.material.color.utilities.Hct>;
							public getAnalogousColors(): java.util.List<com.google.android.material.color.utilities.Hct>;
							public getRelativeTemperature(hct: com.google.android.material.color.utilities.Hct): number;
							public constructor(input: com.google.android.material.color.utilities.Hct);
							public static rawTemperature(color: com.google.android.material.color.utilities.Hct): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class TonalPalette extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.TonalPalette>;
							public getHct(tone: number): com.google.android.material.color.utilities.Hct;
							public static fromHct(hct: com.google.android.material.color.utilities.Hct): com.google.android.material.color.utilities.TonalPalette;
							public static fromHueAndChroma(hue: number, param1: number): com.google.android.material.color.utilities.TonalPalette;
							public getHue(): number;
							public getKeyColor(): com.google.android.material.color.utilities.Hct;
							public getChroma(): number;
							public static fromInt(argb: number): com.google.android.material.color.utilities.TonalPalette;
							public tone(tone: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class ToneDeltaConstraint extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.ToneDeltaConstraint>;
							public delta: number;
							public keepAway: com.google.android.material.color.utilities.DynamicColor;
							public keepAwayPolarity: com.google.android.material.color.utilities.TonePolarity;
							public constructor(delta: number, param1: com.google.android.material.color.utilities.DynamicColor, keepAway: com.google.android.material.color.utilities.TonePolarity);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class TonePolarity {
							public static class: java.lang.Class<com.google.android.material.color.utilities.TonePolarity>;
							public static DARKER: com.google.android.material.color.utilities.TonePolarity;
							public static LIGHTER: com.google.android.material.color.utilities.TonePolarity;
							public static NO_PREFERENCE: com.google.android.material.color.utilities.TonePolarity;
							public static valueOf(name: string): com.google.android.material.color.utilities.TonePolarity;
							public static values(): com.google.android.material.color.utilities.TonePolarity[];
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class Variant {
							public static class: java.lang.Class<com.google.android.material.color.utilities.Variant>;
							public static MONOCHROME: com.google.android.material.color.utilities.Variant;
							public static NEUTRAL: com.google.android.material.color.utilities.Variant;
							public static TONAL_SPOT: com.google.android.material.color.utilities.Variant;
							public static VIBRANT: com.google.android.material.color.utilities.Variant;
							public static EXPRESSIVE: com.google.android.material.color.utilities.Variant;
							public static FIDELITY: com.google.android.material.color.utilities.Variant;
							public static CONTENT: com.google.android.material.color.utilities.Variant;
							public static RAINBOW: com.google.android.material.color.utilities.Variant;
							public static FRUIT_SALAD: com.google.android.material.color.utilities.Variant;
							public static valueOf(name: string): com.google.android.material.color.utilities.Variant;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static values(): com.google.android.material.color.utilities.Variant[];
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module color {
					export module utilities {
						export class ViewingConditions extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.color.utilities.ViewingConditions>;
							public static DEFAULT: com.google.android.material.color.utilities.ViewingConditions;
							public static make(whitePoint: number[], adaptingLuminance: number, param2: number, backgroundLstar: number, param4: boolean): com.google.android.material.color.utilities.ViewingConditions;
							public static defaultWithBackgroundLstar(lstar: number): com.google.android.material.color.utilities.ViewingConditions;
							public getN(): number;
							public getAw(): number;
							public getNbb(): number;
							public getFlRoot(): number;
							public getRgbD(): number[];
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class CalendarConstraints extends java.lang.Object implements android.os.Parcelable {
						public static class: java.lang.Class<com.google.android.material.datepicker.CalendarConstraints>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.datepicker.CalendarConstraints>;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public getEndMs(): number;
						public equals(obj: any): boolean;
						public describeContents(): number;
						public getStartMs(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public hashCode(): number;
						public getOpenAtMs(): java.lang.Long;
						public getDateValidator(): com.google.android.material.datepicker.CalendarConstraints.DateValidator;
						public equals(o: any): boolean;
					}
					export module CalendarConstraints {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.datepicker.CalendarConstraints.Builder>;
							public constructor();
							public setFirstDayOfWeek(firstDayOfWeek: number): com.google.android.material.datepicker.CalendarConstraints.Builder;
							public build(): com.google.android.material.datepicker.CalendarConstraints;
							public setOpenAt(month: number): com.google.android.material.datepicker.CalendarConstraints.Builder;
							public setEnd(month: number): com.google.android.material.datepicker.CalendarConstraints.Builder;
							public setStart(month: number): com.google.android.material.datepicker.CalendarConstraints.Builder;
							public setValidator(validator: com.google.android.material.datepicker.CalendarConstraints.DateValidator): com.google.android.material.datepicker.CalendarConstraints.Builder;
						}
						export class DateValidator extends java.lang.Object implements android.os.Parcelable {
							public static class: java.lang.Class<com.google.android.material.datepicker.CalendarConstraints.DateValidator>;
							/**
							 * Constructs a new instance of the com.google.android.material.datepicker.CalendarConstraints$DateValidator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								isValid(param0: number): boolean;
								describeContents(): number;
								writeToParcel(param0: android.os.Parcel, param1: number): void;
							});
							public constructor();
							public static PARCELABLE_WRITE_RETURN_VALUE: number;
							public static CONTENTS_FILE_DESCRIPTOR: number;
							public describeContents(): number;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public isValid(param0: number): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class CalendarItemStyle extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.CalendarItemStyle>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class CalendarStyle extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.CalendarStyle>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class CompositeDateValidator extends java.lang.Object implements com.google.android.material.datepicker.CalendarConstraints.DateValidator {
						public static class: java.lang.Class<com.google.android.material.datepicker.CompositeDateValidator>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.datepicker.CompositeDateValidator>;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public describeContents(): number;
						public equals(obj: any): boolean;
						public isValid(date: number): boolean;
						public isValid(param0: number): boolean;
						public static anyOf(validators: java.util.List<com.google.android.material.datepicker.CalendarConstraints.DateValidator>): com.google.android.material.datepicker.CalendarConstraints.DateValidator;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public hashCode(): number;
						public equals(o: any): boolean;
						public static allOf(validators: java.util.List<com.google.android.material.datepicker.CalendarConstraints.DateValidator>): com.google.android.material.datepicker.CalendarConstraints.DateValidator;
					}
					export module CompositeDateValidator {
						export class Operator extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.datepicker.CompositeDateValidator.Operator>;
							/**
							 * Constructs a new instance of the com.google.android.material.datepicker.CompositeDateValidator$Operator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								isValid(param0: java.util.List<com.google.android.material.datepicker.CalendarConstraints.DateValidator>, param1: number): boolean;
								getId(): number;
							});
							public constructor();
							public getId(): number;
							public isValid(param0: java.util.List<com.google.android.material.datepicker.CalendarConstraints.DateValidator>, param1: number): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export abstract class DateFormatTextWatcher extends com.google.android.material.internal.TextWatcherAdapter {
						public static class: java.lang.Class<com.google.android.material.datepicker.DateFormatTextWatcher>;
						public runValidation(view: android.view.View, validation: java.lang.Runnable): void;
						public onTextChanged(s: string, start: number, before: number, count: number): void;
						public afterTextChanged(param0: android.text.Editable): void;
						public beforeTextChanged(s: string, start: number, count: number, after: number): void;
						public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public afterTextChanged(s: android.text.Editable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class DateSelector<S>  extends android.os.Parcelable {
						public static class: java.lang.Class<com.google.android.material.datepicker.DateSelector<any>>;
						/**
						 * Constructs a new instance of the com.google.android.material.datepicker.DateSelector<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getSelection(): any;
							isSelectionComplete(): boolean;
							setSelection(param0: any): void;
							select(param0: number): void;
							getSelectedDays(): java.util.Collection<java.lang.Long>;
							getSelectedRanges(): java.util.Collection<androidx.core.util.Pair<java.lang.Long,java.lang.Long>>;
							getSelectionDisplayString(param0: android.content.Context): string;
							getSelectionContentDescription(param0: android.content.Context): string;
							getError(): string;
							getDefaultTitleResId(): number;
							getDefaultThemeResId(param0: android.content.Context): number;
							setTextInputFormat(param0: java.text.SimpleDateFormat): void;
							onCreateTextInputView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle, param3: com.google.android.material.datepicker.CalendarConstraints, param4: com.google.android.material.datepicker.OnSelectionChangedListener<any>): android.view.View;
							showKeyboardWithAutoHideBehavior(...editTexts: android.widget.EditText[]): void;
							lambda$showKeyboardWithAutoHideBehavior$1(viewToFocus: android.view.View): void;
							lambda$showKeyboardWithAutoHideBehavior$0(editTexts: android.widget.EditText[], view: android.view.View, hasFocus: boolean): void;
							describeContents(): number;
							writeToParcel(param0: android.os.Parcel, param1: number): void;
						});
						public constructor();
						public static PARCELABLE_WRITE_RETURN_VALUE: number;
						public static CONTENTS_FILE_DESCRIPTOR: number;
						public describeContents(): number;
						public getDefaultTitleResId(): number;
						public setTextInputFormat(param0: java.text.SimpleDateFormat): void;
						public getSelectedDays(): java.util.Collection<java.lang.Long>;
						public onCreateTextInputView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle, param3: com.google.android.material.datepicker.CalendarConstraints, param4: com.google.android.material.datepicker.OnSelectionChangedListener<any>): android.view.View;
						public select(param0: number): void;
						public static showKeyboardWithAutoHideBehavior(...editTexts: android.widget.EditText[]): void;
						public getSelectionDisplayString(param0: android.content.Context): string;
						public getSelectedRanges(): java.util.Collection<androidx.core.util.Pair<java.lang.Long,java.lang.Long>>;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public setSelection(param0: any): void;
						public getError(): string;
						public getDefaultThemeResId(param0: android.content.Context): number;
						public getSelection(): any;
						public isSelectionComplete(): boolean;
						public getSelectionContentDescription(param0: android.content.Context): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class DateStrings extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.DateStrings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class DateValidatorPointBackward extends java.lang.Object implements com.google.android.material.datepicker.CalendarConstraints.DateValidator {
						public static class: java.lang.Class<com.google.android.material.datepicker.DateValidatorPointBackward>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.datepicker.DateValidatorPointBackward>;
						public static now(): com.google.android.material.datepicker.DateValidatorPointBackward;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public describeContents(): number;
						public equals(obj: any): boolean;
						public isValid(date: number): boolean;
						public isValid(param0: number): boolean;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public hashCode(): number;
						public equals(o: any): boolean;
						public static before(point: number): com.google.android.material.datepicker.DateValidatorPointBackward;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class DateValidatorPointForward extends java.lang.Object implements com.google.android.material.datepicker.CalendarConstraints.DateValidator {
						public static class: java.lang.Class<com.google.android.material.datepicker.DateValidatorPointForward>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.datepicker.DateValidatorPointForward>;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public static now(): com.google.android.material.datepicker.DateValidatorPointForward;
						public describeContents(): number;
						public equals(obj: any): boolean;
						public isValid(date: number): boolean;
						public isValid(param0: number): boolean;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public hashCode(): number;
						public equals(o: any): boolean;
						public static from(point: number): com.google.android.material.datepicker.DateValidatorPointForward;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export abstract class DayViewDecorator extends java.lang.Object implements android.os.Parcelable {
						public static class: java.lang.Class<com.google.android.material.datepicker.DayViewDecorator>;
						public constructor();
						public initialize(context: android.content.Context): void;
						public describeContents(): number;
						public getCompoundDrawableLeft(context: android.content.Context, year: number, month: number, day: number, valid: boolean, selected: boolean): android.graphics.drawable.Drawable;
						public getTextColor(context: android.content.Context, year: number, month: number, day: number, valid: boolean, selected: boolean): android.content.res.ColorStateList;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public getCompoundDrawableTop(context: android.content.Context, year: number, month: number, day: number, valid: boolean, selected: boolean): android.graphics.drawable.Drawable;
						public getCompoundDrawableRight(context: android.content.Context, year: number, month: number, day: number, valid: boolean, selected: boolean): android.graphics.drawable.Drawable;
						public getBackgroundColor(context: android.content.Context, year: number, month: number, day: number, valid: boolean, selected: boolean): android.content.res.ColorStateList;
						public getContentDescription(context: android.content.Context, year: number, month: number, day: number, valid: boolean, selected: boolean, originalContentDescription: string): string;
						public getCompoundDrawableBottom(context: android.content.Context, year: number, month: number, day: number, valid: boolean, selected: boolean): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class DaysOfWeekAdapter extends android.widget.BaseAdapter {
						public static class: java.lang.Class<com.google.android.material.datepicker.DaysOfWeekAdapter>;
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public constructor();
						public isEnabled(position: number): boolean;
						public getView(position: number, convertView: android.view.View, parent: android.view.ViewGroup): android.view.View;
						public getCount(): number;
						public getDropDownView(position: number, convertView: android.view.View, parent: android.view.ViewGroup): android.view.View;
						public constructor(firstDayOfWeek: number);
						public getItem(position: number): java.lang.Integer;
						public getItemId(position: number): number;
						public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MaterialCalendar<S>  extends com.google.android.material.datepicker.PickerFragment<any> {
						public static class: java.lang.Class<com.google.android.material.datepicker.MaterialCalendar<any>>;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultRegistry, param2: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public constructor();
						public getSavedStateRegistry(): androidx.savedstate.SavedStateRegistry;
						public onConfigurationChanged(param0: android.content.res.Configuration): void;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public static newInstance(dateSelector: com.google.android.material.datepicker.DateSelector<any>, themeResId: number, calendarConstraints: com.google.android.material.datepicker.CalendarConstraints, dayViewDecorator: com.google.android.material.datepicker.DayViewDecorator): com.google.android.material.datepicker.MaterialCalendar<any>;
						public onSaveInstanceState(bundle: android.os.Bundle): void;
						public addOnSelectionChangedListener(listener: com.google.android.material.datepicker.OnSelectionChangedListener<any>): boolean;
						public onLowMemory(): void;
						public onCreateView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle): android.view.View;
						public constructor(param0: number);
						public onCreate(bundle: android.os.Bundle): void;
						public getLifecycle(): androidx.lifecycle.Lifecycle;
						public static newInstance(dateSelector: com.google.android.material.datepicker.DateSelector<any>, themeResId: number, calendarConstraints: com.google.android.material.datepicker.CalendarConstraints): com.google.android.material.datepicker.MaterialCalendar<any>;
						public onCreate(param0: android.os.Bundle): void;
						public getDefaultViewModelProviderFactory(): androidx.lifecycle.ViewModelProvider.Factory;
						public onCreateView(layoutInflater: android.view.LayoutInflater, viewGroup: android.view.ViewGroup, bundle: android.os.Bundle): android.view.View;
						public onSaveInstanceState(param0: android.os.Bundle): void;
						public getViewModelStore(): androidx.lifecycle.ViewModelStore;
						public getDateSelector(): com.google.android.material.datepicker.DateSelector<any>;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
					}
					export module MaterialCalendar {
						export class CalendarSelector {
							public static class: java.lang.Class<com.google.android.material.datepicker.MaterialCalendar.CalendarSelector>;
							public static DAY: com.google.android.material.datepicker.MaterialCalendar.CalendarSelector;
							public static YEAR: com.google.android.material.datepicker.MaterialCalendar.CalendarSelector;
							public static valueOf(name: string): com.google.android.material.datepicker.MaterialCalendar.CalendarSelector;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static values(): com.google.android.material.datepicker.MaterialCalendar.CalendarSelector[];
						}
						export class OnDayClickListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.datepicker.MaterialCalendar.OnDayClickListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.datepicker.MaterialCalendar$OnDayClickListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onDayClick(param0: number): void;
							});
							public constructor();
							public onDayClick(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MaterialCalendarGridView extends android.widget.GridView {
						public static class: java.lang.Class<com.google.android.material.datepicker.MaterialCalendarGridView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public onFocusChanged(gainFocus: boolean, direction: number, previouslyFocusedRect: android.graphics.Rect): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onTouchModeChanged(isInTouchMode: boolean): void;
						public afterTextChanged(s: android.text.Editable): void;
						public beforeTextChanged(s: string, start: number, count: number, after: number): void;
						public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public removeView(child: android.view.View): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestLayout(): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setAdapter(param0: any): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public onDraw(canvas: android.graphics.Canvas): void;
						public getAdapter(): any;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public getAdapter(): android.widget.ListAdapter;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setSelection(position: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public onFilterComplete(param0: number): void;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public afterTextChanged(param0: android.text.Editable): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public onFilterComplete(count: number): void;
						public onGlobalLayout(): void;
						public onTouchModeChanged(param0: boolean): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onTextChanged(s: string, start: number, before: number, count: number): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public getAdapter(): com.google.android.material.datepicker.MonthAdapter;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setAdapter(adapter: android.widget.ListAdapter): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MaterialDatePicker<S>  extends androidx.fragment.app.DialogFragment {
						public static class: java.lang.Class<com.google.android.material.datepicker.MaterialDatePicker<any>>;
						public static INPUT_MODE_CALENDAR: number;
						public static INPUT_MODE_TEXT: number;
						public getInputMode(): number;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultRegistry, param2: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public getSavedStateRegistry(): androidx.savedstate.SavedStateRegistry;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public onSaveInstanceState(bundle: android.os.Bundle): void;
						public onLowMemory(): void;
						public static todayInUtcMilliseconds(): number;
						public addOnCancelListener(onCancelListener: android.content.DialogInterface.OnCancelListener): boolean;
						public onCancel(param0: android.content.DialogInterface): void;
						public onCreate(bundle: android.os.Bundle): void;
						public onDismiss(dialogInterface: android.content.DialogInterface): void;
						public onCreate(param0: android.os.Bundle): void;
						public getDefaultViewModelProviderFactory(): androidx.lifecycle.ViewModelProvider.Factory;
						public addOnPositiveButtonClickListener(onPositiveButtonClickListener: com.google.android.material.datepicker.MaterialPickerOnPositiveButtonClickListener<any>): boolean;
						public static thisMonthInUtcMilliseconds(): number;
						public getSelection(): any;
						public onDismiss(param0: android.content.DialogInterface): void;
						public clearOnPositiveButtonClickListeners(): void;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
						public removeOnCancelListener(onCancelListener: android.content.DialogInterface.OnCancelListener): boolean;
						public constructor();
						public removeOnPositiveButtonClickListener(onPositiveButtonClickListener: com.google.android.material.datepicker.MaterialPickerOnPositiveButtonClickListener<any>): boolean;
						public removeOnNegativeButtonClickListener(onNegativeButtonClickListener: android.view.View.OnClickListener): boolean;
						public clearOnNegativeButtonClickListeners(): void;
						public onConfigurationChanged(param0: android.content.res.Configuration): void;
						public removeOnDismissListener(onDismissListener: android.content.DialogInterface.OnDismissListener): boolean;
						public onStop(): void;
						public onCreateDialog(param0: android.os.Bundle): android.app.Dialog;
						public addOnDismissListener(onDismissListener: android.content.DialogInterface.OnDismissListener): boolean;
						public onCreateView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle): android.view.View;
						public onCreateDialog(bundle: android.os.Bundle): android.app.Dialog;
						public constructor(param0: number);
						public onCancel(dialogInterface: android.content.DialogInterface): void;
						public getHeaderText(): string;
						public getLifecycle(): androidx.lifecycle.Lifecycle;
						public clearOnCancelListeners(): void;
						public onCreateView(layoutInflater: android.view.LayoutInflater, viewGroup: android.view.ViewGroup, bundle: android.os.Bundle): android.view.View;
						public onSaveInstanceState(param0: android.os.Bundle): void;
						public addOnNegativeButtonClickListener(onNegativeButtonClickListener: android.view.View.OnClickListener): boolean;
						public getViewModelStore(): androidx.lifecycle.ViewModelStore;
						public onStart(): void;
						public clearOnDismissListeners(): void;
					}
					export module MaterialDatePicker {
						export class Builder<S>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.datepicker.MaterialDatePicker.Builder<any>>;
							public build(): com.google.android.material.datepicker.MaterialDatePicker<S>;
							public setTitleText(charSequence: string): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setTitleText(titleTextResId: number): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setPositiveButtonText(text: string): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setTheme(themeResId: number): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public static dateRangePicker(): com.google.android.material.datepicker.MaterialDatePicker.Builder<androidx.core.util.Pair<java.lang.Long,java.lang.Long>>;
							public setNegativeButtonText(text: string): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setTextInputFormat(format: java.text.SimpleDateFormat): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setNegativeButtonText(textId: number): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setSelection(selection: S): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setCalendarConstraints(bounds: com.google.android.material.datepicker.CalendarConstraints): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public setInputMode(inputMode: number): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public static customDatePicker(dateSelector: com.google.android.material.datepicker.DateSelector<any>): com.google.android.material.datepicker.MaterialDatePicker.Builder<any>;
							public setDayViewDecorator(dayViewDecorator: com.google.android.material.datepicker.DayViewDecorator): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
							public static datePicker(): com.google.android.material.datepicker.MaterialDatePicker.Builder<java.lang.Long>;
							public setPositiveButtonText(textId: number): com.google.android.material.datepicker.MaterialDatePicker.Builder<S>;
						}
						export class InputMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.datepicker.MaterialDatePicker.InputMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.datepicker.MaterialDatePicker$InputMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MaterialPickerOnPositiveButtonClickListener<S>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.MaterialPickerOnPositiveButtonClickListener<any>>;
						/**
						 * Constructs a new instance of the com.google.android.material.datepicker.MaterialPickerOnPositiveButtonClickListener<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onPositiveButtonClick(param0: S): void;
						});
						public constructor();
						public onPositiveButtonClick(param0: S): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MaterialStyledDatePickerDialog extends android.app.DatePickerDialog {
						public static class: java.lang.Class<com.google.android.material.datepicker.MaterialStyledDatePickerDialog>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public dismiss(): void;
						public dispatchGenericMotionEvent(ev: android.view.MotionEvent): boolean;
						public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
						public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
						public constructor(context: android.content.Context);
						public onCreate(savedInstanceState: android.os.Bundle): void;
						public constructor(context: android.content.Context, listener: android.app.DatePickerDialog.OnDateSetListener, year: number, month: number, dayOfMonth: number);
						public onCreatePanelView(param0: number): android.view.View;
						public constructor(context: android.content.Context, themeResId: number, listener: android.app.DatePickerDialog.OnDateSetListener, year: number, monthOfYear: number, dayOfMonth: number);
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public dispatchPopulateAccessibilityEvent(event: android.view.accessibility.AccessibilityEvent): boolean;
						public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
						public onContentChanged(): void;
						public onClick(param0: android.content.DialogInterface, param1: number): void;
						public cancel(): void;
						public constructor(context: android.content.Context, cancelable: boolean, cancelListener: android.content.DialogInterface.OnCancelListener);
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchTouchEvent(ev: android.view.MotionEvent): boolean;
						public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public onCreateContextMenu(menu: android.view.ContextMenu, v: android.view.View, menuInfo: android.view.ContextMenu.ContextMenuInfo): void;
						public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
						public onActionModeFinished(param0: android.view.ActionMode): void;
						public onProvideKeyboardShortcuts(data: java.util.List<any>, menu: android.view.Menu, deviceId: number): void;
						public onAttachedToWindow(): void;
						public constructor(context: android.content.Context, themeResId: number);
						public onWindowFocusChanged(hasFocus: boolean): void;
						public onDateChanged(view: android.widget.DatePicker, year: number, month: number, dayOfMonth: number): void;
						public onSearchRequested(): boolean;
						public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
						public onCreatePanelMenu(featureId: number, menu: android.view.Menu): boolean;
						public onWindowAttributesChanged(params: android.view.WindowManager.LayoutParams): void;
						public onSearchRequested(searchEvent: any): boolean;
						public onPanelClosed(featureId: number, menu: android.view.Menu): void;
						public onClick(dialog: android.content.DialogInterface, which: number): void;
						public onSearchRequested(param0: any): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public onActionModeStarted(param0: android.view.ActionMode): void;
						public onActionModeStarted(mode: android.view.ActionMode): void;
						public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
						public onMenuOpened(featureId: number, menu: android.view.Menu): boolean;
						public dispatchTrackballEvent(ev: android.view.MotionEvent): boolean;
						public onDateChanged(param0: android.widget.DatePicker, param1: number, param2: number, param3: number): void;
						public onDetachedFromWindow(): void;
						public onPanelClosed(param0: number, param1: android.view.Menu): void;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public onMenuItemSelected(featureId: number, item: android.view.MenuItem): boolean;
						public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
						public onPreparePanel(featureId: number, view: android.view.View, menu: android.view.Menu): boolean;
						public dispatchKeyEvent(event: android.view.KeyEvent): boolean;
						public onCreatePanelView(featureId: number): android.view.View;
						public onWindowFocusChanged(param0: boolean): void;
						public onActionModeFinished(mode: android.view.ActionMode): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MaterialTextInputPicker<S>  extends com.google.android.material.datepicker.PickerFragment<any> {
						public static class: java.lang.Class<com.google.android.material.datepicker.MaterialTextInputPicker<any>>;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultRegistry, param2: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public constructor();
						public getSavedStateRegistry(): androidx.savedstate.SavedStateRegistry;
						public onConfigurationChanged(param0: android.content.res.Configuration): void;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public onSaveInstanceState(bundle: android.os.Bundle): void;
						public onLowMemory(): void;
						public onCreateView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle): android.view.View;
						public constructor(param0: number);
						public onCreate(bundle: android.os.Bundle): void;
						public getLifecycle(): androidx.lifecycle.Lifecycle;
						public onCreate(param0: android.os.Bundle): void;
						public getDefaultViewModelProviderFactory(): androidx.lifecycle.ViewModelProvider.Factory;
						public onCreateView(layoutInflater: android.view.LayoutInflater, viewGroup: android.view.ViewGroup, bundle: android.os.Bundle): android.view.View;
						public onSaveInstanceState(param0: android.os.Bundle): void;
						public getViewModelStore(): androidx.lifecycle.ViewModelStore;
						public getDateSelector(): com.google.android.material.datepicker.DateSelector<any>;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class Month extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.Month>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.datepicker.Month>;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public equals(obj: any): boolean;
						public describeContents(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public hashCode(): number;
						public equals(o: any): boolean;
						public compareTo(other: com.google.android.material.datepicker.Month): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MonthAdapter extends android.widget.BaseAdapter {
						public static class: java.lang.Class<com.google.android.material.datepicker.MonthAdapter>;
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public isEnabled(position: number): boolean;
						public getItem(position: number): java.lang.Long;
						public getView(position: number, convertView: android.view.View, parent: android.view.ViewGroup): android.widget.TextView;
						public updateSelectedStates(monthGrid: com.google.android.material.datepicker.MaterialCalendarGridView): void;
						public getCount(): number;
						public getDropDownView(position: number, convertView: android.view.View, parent: android.view.ViewGroup): android.view.View;
						public hasStableIds(): boolean;
						public getItemId(position: number): number;
						public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class MonthsPagerAdapter extends androidx.recyclerview.widget.RecyclerView.Adapter<com.google.android.material.datepicker.MonthsPagerAdapter.ViewHolder> {
						public static class: java.lang.Class<com.google.android.material.datepicker.MonthsPagerAdapter>;
						public onBindViewHolder(viewHolder: com.google.android.material.datepicker.MonthsPagerAdapter.ViewHolder, position: number): void;
						public onBindViewHolder(param0: any, param1: number, param2: java.util.List<any>): void;
						public onCreateViewHolder(param0: android.view.ViewGroup, param1: number): any;
						public getItemId(param0: number): number;
						public getItemCount(): number;
						public onCreateViewHolder(viewGroup: android.view.ViewGroup, viewType: number): com.google.android.material.datepicker.MonthsPagerAdapter.ViewHolder;
						public onBindViewHolder(param0: any, param1: number): void;
						public getItemId(position: number): number;
					}
					export module MonthsPagerAdapter {
						export class ViewHolder extends androidx.recyclerview.widget.RecyclerView.ViewHolder {
							public static class: java.lang.Class<com.google.android.material.datepicker.MonthsPagerAdapter.ViewHolder>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export abstract class OnSelectionChangedListener<S>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.OnSelectionChangedListener<any>>;
						public onIncompleteSelectionChanged(): void;
						public constructor();
						public onSelectionChanged(param0: S): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export abstract class PickerFragment<S>  extends androidx.fragment.app.Fragment {
						public static class: java.lang.Class<com.google.android.material.datepicker.PickerFragment<any>>;
						public onSelectionChangedListeners: java.util.LinkedHashSet<com.google.android.material.datepicker.OnSelectionChangedListener<any>>;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultRegistry, param2: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public getSavedStateRegistry(): androidx.savedstate.SavedStateRegistry;
						public onConfigurationChanged(param0: android.content.res.Configuration): void;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public getLifecycle(): androidx.lifecycle.Lifecycle;
						public getDefaultViewModelProviderFactory(): androidx.lifecycle.ViewModelProvider.Factory;
						public onLowMemory(): void;
						public getViewModelStore(): androidx.lifecycle.ViewModelStore;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class RangeDateSelector extends com.google.android.material.datepicker.DateSelector<androidx.core.util.Pair<java.lang.Long,java.lang.Long>> {
						public static class: java.lang.Class<com.google.android.material.datepicker.RangeDateSelector>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.datepicker.RangeDateSelector>;
						public getSelection(): androidx.core.util.Pair<java.lang.Long,java.lang.Long>;
						public getDefaultTitleResId(): number;
						public setTextInputFormat(param0: java.text.SimpleDateFormat): void;
						public setSelection(selection: androidx.core.util.Pair<java.lang.Long,java.lang.Long>): void;
						public getSelectedDays(): java.util.Collection<java.lang.Long>;
						public getSelectionContentDescription(context: android.content.Context): string;
						public getSelectionDisplayString(context: android.content.Context): string;
						public onCreateTextInputView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle, param3: com.google.android.material.datepicker.CalendarConstraints, param4: com.google.android.material.datepicker.OnSelectionChangedListener<any>): android.view.View;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public onCreateTextInputView(layoutInflater: android.view.LayoutInflater, viewGroup: android.view.ViewGroup, bundle: android.os.Bundle, constraints: com.google.android.material.datepicker.CalendarConstraints, listener: com.google.android.material.datepicker.OnSelectionChangedListener<androidx.core.util.Pair<java.lang.Long,java.lang.Long>>): android.view.View;
						public select(param0: number): void;
						public getSelectedRanges(): java.util.Collection<androidx.core.util.Pair<java.lang.Long,java.lang.Long>>;
						public setTextInputFormat(format: java.text.SimpleDateFormat): void;
						public getDefaultThemeResId(param0: android.content.Context): number;
						public getSelection(): any;
						public constructor();
						public describeContents(): number;
						public getDefaultThemeResId(context: android.content.Context): number;
						public select(selection: number): void;
						public static showKeyboardWithAutoHideBehavior(...editTexts: android.widget.EditText[]): void;
						public getSelectionDisplayString(param0: android.content.Context): string;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public setSelection(param0: any): void;
						public getError(): string;
						public isSelectionComplete(): boolean;
						public getSelectionContentDescription(param0: android.content.Context): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class SingleDateSelector extends com.google.android.material.datepicker.DateSelector<java.lang.Long> {
						public static class: java.lang.Class<com.google.android.material.datepicker.SingleDateSelector>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.datepicker.SingleDateSelector>;
						public getSelection(): java.lang.Long;
						public getDefaultTitleResId(): number;
						public setTextInputFormat(param0: java.text.SimpleDateFormat): void;
						public getSelectedDays(): java.util.Collection<java.lang.Long>;
						public getSelectionContentDescription(context: android.content.Context): string;
						public getSelectionDisplayString(context: android.content.Context): string;
						public onCreateTextInputView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle, param3: com.google.android.material.datepicker.CalendarConstraints, param4: com.google.android.material.datepicker.OnSelectionChangedListener<any>): android.view.View;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public select(param0: number): void;
						public onCreateTextInputView(layoutInflater: android.view.LayoutInflater, viewGroup: android.view.ViewGroup, bundle: android.os.Bundle, constraints: com.google.android.material.datepicker.CalendarConstraints, listener: com.google.android.material.datepicker.OnSelectionChangedListener<java.lang.Long>): android.view.View;
						public getSelectedRanges(): java.util.Collection<androidx.core.util.Pair<java.lang.Long,java.lang.Long>>;
						public setTextInputFormat(format: java.text.SimpleDateFormat): void;
						public getDefaultThemeResId(param0: android.content.Context): number;
						public getSelection(): any;
						public constructor();
						public describeContents(): number;
						public getDefaultThemeResId(context: android.content.Context): number;
						public select(selection: number): void;
						public static showKeyboardWithAutoHideBehavior(...editTexts: android.widget.EditText[]): void;
						public getSelectionDisplayString(param0: android.content.Context): string;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public setSelection(param0: any): void;
						public getError(): string;
						public setSelection(selection: java.lang.Long): void;
						public isSelectionComplete(): boolean;
						public getSelectionContentDescription(param0: android.content.Context): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class SmoothCalendarLayoutManager extends androidx.recyclerview.widget.LinearLayoutManager {
						public static class: java.lang.Class<com.google.android.material.datepicker.SmoothCalendarLayoutManager>;
						public computeScrollVectorForPosition(param0: number): android.graphics.PointF;
						public smoothScrollToPosition(param0: androidx.recyclerview.widget.RecyclerView, param1: androidx.recyclerview.widget.RecyclerView.State, param2: number): void;
						public prepareForDrop(param0: android.view.View, param1: android.view.View, param2: number, param3: number): void;
						public smoothScrollToPosition(recyclerView: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State, position: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class TimeSource extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.TimeSource>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class UtcDates extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.datepicker.UtcDates>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module datepicker {
					export class YearGridAdapter extends androidx.recyclerview.widget.RecyclerView.Adapter<com.google.android.material.datepicker.YearGridAdapter.ViewHolder> {
						public static class: java.lang.Class<com.google.android.material.datepicker.YearGridAdapter>;
						public onBindViewHolder(param0: any, param1: number, param2: java.util.List<any>): void;
						public onCreateViewHolder(param0: android.view.ViewGroup, param1: number): any;
						public getItemCount(): number;
						public onBindViewHolder(viewHolder: com.google.android.material.datepicker.YearGridAdapter.ViewHolder, position: number): void;
						public onCreateViewHolder(viewGroup: android.view.ViewGroup, viewType: number): com.google.android.material.datepicker.YearGridAdapter.ViewHolder;
						public onBindViewHolder(param0: any, param1: number): void;
					}
					export module YearGridAdapter {
						export class ViewHolder extends androidx.recyclerview.widget.RecyclerView.ViewHolder {
							public static class: java.lang.Class<com.google.android.material.datepicker.YearGridAdapter.ViewHolder>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module dialog {
					export class InsetDialogOnTouchListener extends java.lang.Object implements android.view.View.OnTouchListener {
						public static class: java.lang.Class<com.google.android.material.dialog.InsetDialogOnTouchListener>;
						public onTouch(param0: android.view.View, param1: android.view.MotionEvent): boolean;
						public constructor(dialog: android.app.Dialog, insets: android.graphics.Rect);
						public onTouch(view: android.view.View, event: android.view.MotionEvent): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module dialog {
					export class MaterialAlertDialogBuilder extends androidx.appcompat.app.AlertDialog.Builder {
						public static class: java.lang.Class<com.google.android.material.dialog.MaterialAlertDialogBuilder>;
						public setPositiveButtonIcon(icon: android.graphics.drawable.Drawable): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setMultiChoiceItems(items: string[], checkedItems: boolean[], listener: android.content.DialogInterface.OnMultiChoiceClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public constructor(context: android.content.Context);
						public setSingleChoiceItems(param0: number, param1: number, param2: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public constructor(param0: android.content.Context);
						public setItems(itemsId: number, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setItems(items: string[], listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setTitle(title: string): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setTitle(param0: string): androidx.appcompat.app.AlertDialog.Builder;
						public setNegativeButton(textId: number, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setCustomTitle(param0: android.view.View): androidx.appcompat.app.AlertDialog.Builder;
						public setIconAttribute(attrId: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setSingleChoiceItems(adapter: android.widget.ListAdapter, checkedItem: number, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setNegativeButton(text: string, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setBackgroundInsetTop(backgroundInsetTop: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setNeutralButton(text: string, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setCancelable(param0: boolean): androidx.appcompat.app.AlertDialog.Builder;
						public constructor(context: android.content.Context, overrideThemeResId: number);
						public setCursor(cursor: android.database.Cursor, listener: android.content.DialogInterface.OnClickListener, labelColumn: string): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public create(): androidx.appcompat.app.AlertDialog;
						public setMessage(message: string): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setBackgroundInsetEnd(backgroundInsetEnd: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public constructor(param0: android.content.Context, param1: number);
						public setIcon(iconId: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setSingleChoiceItems(param0: android.widget.ListAdapter, param1: number, param2: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public getBackground(): android.graphics.drawable.Drawable;
						public setPositiveButton(text: string, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setView(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): androidx.appcompat.app.AlertDialog.Builder;
						public setView(layoutResId: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setNegativeButtonIcon(icon: android.graphics.drawable.Drawable): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setOnCancelListener(onCancelListener: android.content.DialogInterface.OnCancelListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setView(view: android.view.View): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setCursor(param0: android.database.Cursor, param1: android.content.DialogInterface.OnClickListener, param2: string): androidx.appcompat.app.AlertDialog.Builder;
						public setBackgroundInsetBottom(backgroundInsetBottom: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setSingleChoiceItems(param0: string[], param1: number, param2: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setOnDismissListener(onDismissListener: android.content.DialogInterface.OnDismissListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setSingleChoiceItems(param0: android.database.Cursor, param1: number, param2: string, param3: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setIcon(param0: android.graphics.drawable.Drawable): androidx.appcompat.app.AlertDialog.Builder;
						public setNegativeButtonIcon(param0: android.graphics.drawable.Drawable): androidx.appcompat.app.AlertDialog.Builder;
						public setItems(param0: string[], param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setView(param0: android.view.View): androidx.appcompat.app.AlertDialog.Builder;
						public setMultiChoiceItems(param0: string[], param1: boolean[], param2: android.content.DialogInterface.OnMultiChoiceClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setBackground(background: android.graphics.drawable.Drawable): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setNeutralButtonIcon(param0: android.graphics.drawable.Drawable): androidx.appcompat.app.AlertDialog.Builder;
						public setSingleChoiceItems(itemsId: number, checkedItem: number, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setOnItemSelectedListener(listener: android.widget.AdapterView.OnItemSelectedListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setOnItemSelectedListener(param0: android.widget.AdapterView.OnItemSelectedListener): androidx.appcompat.app.AlertDialog.Builder;
						public setTitle(titleId: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setNegativeButton(param0: number, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setSingleChoiceItems(items: string[], checkedItem: number, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setOnKeyListener(onKeyListener: android.content.DialogInterface.OnKeyListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setOnCancelListener(param0: android.content.DialogInterface.OnCancelListener): androidx.appcompat.app.AlertDialog.Builder;
						public setNeutralButton(textId: number, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setMessage(param0: string): androidx.appcompat.app.AlertDialog.Builder;
						public setIcon(icon: android.graphics.drawable.Drawable): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setIconAttribute(param0: number): androidx.appcompat.app.AlertDialog.Builder;
						public setNegativeButton(param0: string, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setMessage(messageId: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setMultiChoiceItems(cursor: android.database.Cursor, isCheckedColumn: string, labelColumn: string, listener: android.content.DialogInterface.OnMultiChoiceClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setAdapter(adapter: android.widget.ListAdapter, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setPositiveButton(param0: string, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setPositiveButtonIcon(param0: android.graphics.drawable.Drawable): androidx.appcompat.app.AlertDialog.Builder;
						public setOnKeyListener(param0: android.content.DialogInterface.OnKeyListener): androidx.appcompat.app.AlertDialog.Builder;
						public setPositiveButton(textId: number, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setCustomTitle(customTitleView: android.view.View): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setNeutralButton(param0: number, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setNeutralButton(param0: string, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setMultiChoiceItems(param0: number, param1: boolean[], param2: android.content.DialogInterface.OnMultiChoiceClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setBackgroundInsetStart(backgroundInsetStart: number): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setCancelable(cancelable: boolean): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setMultiChoiceItems(itemsId: number, checkedItems: boolean[], listener: android.content.DialogInterface.OnMultiChoiceClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setNeutralButtonIcon(icon: android.graphics.drawable.Drawable): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setItems(param0: number, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setView(param0: number): androidx.appcompat.app.AlertDialog.Builder;
						public setAdapter(param0: android.widget.ListAdapter, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setIcon(param0: number): androidx.appcompat.app.AlertDialog.Builder;
						public setPositiveButton(param0: number, param1: android.content.DialogInterface.OnClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setOnDismissListener(param0: android.content.DialogInterface.OnDismissListener): androidx.appcompat.app.AlertDialog.Builder;
						public setMultiChoiceItems(param0: android.database.Cursor, param1: string, param2: string, param3: android.content.DialogInterface.OnMultiChoiceClickListener): androidx.appcompat.app.AlertDialog.Builder;
						public setTitle(param0: number): androidx.appcompat.app.AlertDialog.Builder;
						public setSingleChoiceItems(cursor: android.database.Cursor, checkedItem: number, labelColumn: string, listener: android.content.DialogInterface.OnClickListener): com.google.android.material.dialog.MaterialAlertDialogBuilder;
						public setMessage(param0: number): androidx.appcompat.app.AlertDialog.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module dialog {
					export class MaterialDialogs extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.dialog.MaterialDialogs>;
						public static getDialogBackgroundInsets(context: android.content.Context, defaultStyleAttribute: number, defaultStyleResource: number): android.graphics.Rect;
						public static insetDrawable(drawable: android.graphics.drawable.Drawable, backgroundInsets: android.graphics.Rect): android.graphics.drawable.InsetDrawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module divider {
					export class MaterialDivider extends android.view.View {
						public static class: java.lang.Class<com.google.android.material.divider.MaterialDivider>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public setDividerInsetEnd(insetEnd: number): void;
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getDividerThickness(): number;
						public setDividerInsetEndResource(insetEndId: number): void;
						public setDividerColor(color: number): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onDraw(canvas: android.graphics.Canvas): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setDividerColorResource(colorId: number): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public getDividerInsetStart(): number;
						public sendAccessibilityEvent(eventType: number): void;
						public setDividerInsetStart(insetStart: number): void;
						public setDividerInsetStartResource(insetStartId: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getDividerInsetEnd(): number;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setDividerThickness(thickness: number): void;
						public setDividerThicknessResource(thicknessId: number): void;
						public getDividerColor(): number;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module divider {
					export class MaterialDividerItemDecoration extends androidx.recyclerview.widget.RecyclerView.ItemDecoration {
						public static class: java.lang.Class<com.google.android.material.divider.MaterialDividerItemDecoration>;
						public static HORIZONTAL: number;
						public static VERTICAL: number;
						public setOrientation(orientation: number): void;
						public setDividerInsetEnd(insetEnd: number): void;
						public onDraw(param0: android.graphics.Canvas, param1: androidx.recyclerview.widget.RecyclerView, param2: androidx.recyclerview.widget.RecyclerView.State): void;
						public constructor(context: android.content.Context, orientation: number);
						public getItemOffsets(param0: android.graphics.Rect, param1: number, param2: androidx.recyclerview.widget.RecyclerView): void;
						public getDividerThickness(): number;
						public setDividerColor(color: number): void;
						public getOrientation(): number;
						public constructor();
						public getDividerInsetStart(): number;
						public setLastItemDecorated(lastItemDecorated: boolean): void;
						public setDividerInsetEndResource(context: android.content.Context, insetEndId: number): void;
						public onDraw(param0: android.graphics.Canvas, param1: androidx.recyclerview.widget.RecyclerView): void;
						public shouldDrawDivider(position: number, adapter: androidx.recyclerview.widget.RecyclerView.Adapter<any>): boolean;
						public setDividerThicknessResource(context: android.content.Context, thicknessId: number): void;
						public getItemOffsets(param0: android.graphics.Rect, param1: android.view.View, param2: androidx.recyclerview.widget.RecyclerView, param3: androidx.recyclerview.widget.RecyclerView.State): void;
						public getItemOffsets(outRect: android.graphics.Rect, view: android.view.View, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State): void;
						public setDividerColorResource(context: android.content.Context, colorId: number): void;
						public setDividerInsetStart(insetStart: number): void;
						public setDividerInsetStartResource(context: android.content.Context, insetStartId: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, orientation: number);
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, orientation: number);
						public onDraw(canvas: android.graphics.Canvas, parent: androidx.recyclerview.widget.RecyclerView, state: androidx.recyclerview.widget.RecyclerView.State): void;
						public getDividerInsetEnd(): number;
						public isLastItemDecorated(): boolean;
						public setDividerThickness(thickness: number): void;
						public getDividerColor(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module drawable {
					export class DrawableUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.drawable.DrawableUtils>;
						public static INTRINSIC_SIZE: number;
						public static parseDrawableXml(context: android.content.Context, id: number, startTag: string): android.util.AttributeSet;
						public static getCheckedState(state: number[]): number[];
						public static setOutlineToPath(outline: any, path: android.graphics.Path): void;
						public static compositeTwoLayeredDrawable(bottomLayerDrawable: android.graphics.drawable.Drawable, topLayerDrawable: android.graphics.drawable.Drawable): android.graphics.drawable.Drawable;
						public static updateTintFilter(drawable: android.graphics.drawable.Drawable, tint: android.content.res.ColorStateList, tintMode: android.graphics.PorterDuff.Mode): android.graphics.PorterDuffColorFilter;
						public static setRippleDrawableRadius(drawable: android.graphics.drawable.RippleDrawable, radius: number): void;
						public static createTintableDrawableIfNeeded(drawable: android.graphics.drawable.Drawable, tintList: android.content.res.ColorStateList, tintMode: android.graphics.PorterDuff.Mode): android.graphics.drawable.Drawable;
						public static setTint(drawable: android.graphics.drawable.Drawable, color: number): void;
						public static createTintableMutatedDrawableIfNeeded(drawable: android.graphics.drawable.Drawable, tintList: android.content.res.ColorStateList, tintMode: android.graphics.PorterDuff.Mode): android.graphics.drawable.Drawable;
						public static compositeTwoLayeredDrawable(bottomLayerDrawable: android.graphics.drawable.Drawable, topLayerDrawable: android.graphics.drawable.Drawable, topLayerDesiredWidth: number, topLayerDesiredHeight: number): android.graphics.drawable.Drawable;
						public static getUncheckedState(state: number[]): number[];
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module drawable {
					export class ScaledDrawableWrapper {
						public static class: java.lang.Class<com.google.android.material.drawable.ScaledDrawableWrapper>;
						public getIntrinsicWidth(): number;
						public constructor(drawable: android.graphics.drawable.Drawable, width: number, height: number);
						public getIntrinsicHeight(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module elevation {
					export class ElevationOverlayProvider extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.elevation.ElevationOverlayProvider>;
						public compositeOverlayIfNeeded(backgroundColor: number, elevation: number): number;
						public getThemeSurfaceColor(): number;
						public isThemeElevationOverlayEnabled(): boolean;
						public compositeOverlayIfNeeded(backgroundColor: number, elevation: number, overlayView: android.view.View): number;
						public compositeOverlay(backgroundColor: number, elevation: number): number;
						public constructor(context: android.content.Context);
						public compositeOverlayWithThemeSurfaceColorIfNeeded(elevation: number, overlayView: android.view.View): number;
						public calculateOverlayAlpha(elevation: number): number;
						public compositeOverlayWithThemeSurfaceColorIfNeeded(elevation: number): number;
						public calculateOverlayAlphaFraction(elevation: number): number;
						public constructor(elevationOverlayEnabled: boolean, elevationOverlayColor: number, elevationOverlayAccentColor: number, colorSurface: number, displayDensity: number);
						public getParentAbsoluteElevation(overlayView: android.view.View): number;
						public getThemeElevationOverlayColor(): number;
						public compositeOverlay(backgroundColor: number, elevation: number, overlayView: android.view.View): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module elevation {
					export class SurfaceColors {
						public static class: java.lang.Class<com.google.android.material.elevation.SurfaceColors>;
						public static SURFACE_0: com.google.android.material.elevation.SurfaceColors;
						public static SURFACE_1: com.google.android.material.elevation.SurfaceColors;
						public static SURFACE_2: com.google.android.material.elevation.SurfaceColors;
						public static SURFACE_3: com.google.android.material.elevation.SurfaceColors;
						public static SURFACE_4: com.google.android.material.elevation.SurfaceColors;
						public static SURFACE_5: com.google.android.material.elevation.SurfaceColors;
						public getColor(context: android.content.Context): number;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.android.material.elevation.SurfaceColors;
						public static values(): com.google.android.material.elevation.SurfaceColors[];
						public static getColorForElevation(context: android.content.Context, elevation: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module expandable {
					export class ExpandableTransformationWidget extends java.lang.Object implements com.google.android.material.expandable.ExpandableWidget {
						public static class: java.lang.Class<com.google.android.material.expandable.ExpandableTransformationWidget>;
						/**
						 * Constructs a new instance of the com.google.android.material.expandable.ExpandableTransformationWidget interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getExpandedComponentIdHint(): number;
							setExpandedComponentIdHint(param0: number): void;
							isExpanded(): boolean;
							setExpanded(param0: boolean): boolean;
						});
						public constructor();
						public getExpandedComponentIdHint(): number;
						public setExpandedComponentIdHint(param0: number): void;
						public isExpanded(): boolean;
						public setExpanded(param0: boolean): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module expandable {
					export class ExpandableWidget extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.expandable.ExpandableWidget>;
						/**
						 * Constructs a new instance of the com.google.android.material.expandable.ExpandableWidget interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							isExpanded(): boolean;
							setExpanded(param0: boolean): boolean;
						});
						public constructor();
						public isExpanded(): boolean;
						public setExpanded(param0: boolean): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module expandable {
					export class ExpandableWidgetHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.expandable.ExpandableWidgetHelper>;
						public onRestoreInstanceState(state: android.os.Bundle): void;
						public getExpandedComponentIdHint(): number;
						public constructor(widget: com.google.android.material.expandable.ExpandableWidget);
						public setExpanded(expanded: boolean): boolean;
						public setExpandedComponentIdHint(expandedComponentIdHint: number): void;
						public isExpanded(): boolean;
						public onSaveInstanceState(): android.os.Bundle;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export class AnimatorTracker extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.AnimatorTracker>;
						public onNextAnimationStart(animator: android.animation.Animator): void;
						public clear(): void;
						public cancelCurrent(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export abstract class BaseMotionStrategy extends java.lang.Object implements com.google.android.material.floatingactionbutton.MotionStrategy {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.BaseMotionStrategy>;
						public getCurrentMotionSpec(): com.google.android.material.animation.MotionSpec;
						public getListeners(): java.util.List<android.animation.Animator.AnimatorListener>;
						public createAnimator(): android.animation.AnimatorSet;
						public performNow(): void;
						public addAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public onChange(param0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						public shouldCancel(): boolean;
						public onAnimationStart(animator: android.animation.Animator): void;
						public getDefaultMotionSpecResource(): number;
						public addAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
						public onAnimationCancel(): void;
						public setMotionSpec(param0: com.google.android.material.animation.MotionSpec): void;
						public removeAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public setMotionSpec(motionSpec: com.google.android.material.animation.MotionSpec): void;
						public onAnimationEnd(): void;
						public removeAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
						public onAnimationStart(param0: android.animation.Animator): void;
						public getMotionSpec(): com.google.android.material.animation.MotionSpec;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export class BorderDrawable extends android.graphics.drawable.Drawable {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.BorderDrawable>;
						public draw(param0: android.graphics.Canvas): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onBoundsChange(bounds: android.graphics.Rect): void;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						public onStateChange(state: number[]): boolean;
						public getBoundsAsRectF(): android.graphics.RectF;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public getConstantState(): android.graphics.drawable.Drawable.ConstantState;
						public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
						public getOpacity(): number;
						public setAlpha(param0: number): void;
						public isStateful(): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
						public getPadding(padding: android.graphics.Rect): boolean;
						public setAlpha(alpha: number): void;
						public getOutline(outline: any): void;
						public setBorderWidth(width: number): void;
					}
					export module BorderDrawable {
						export class BorderState extends android.graphics.drawable.Drawable.ConstantState {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.BorderDrawable.BorderState>;
							public newDrawable(res: android.content.res.Resources): android.graphics.drawable.Drawable;
							public newDrawable(): android.graphics.drawable.Drawable;
							public getChangingConfigurations(): number;
							public newDrawable(res: android.content.res.Resources, theme: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export class ExtendedFloatingActionButton extends com.google.android.material.button.MaterialButton implements androidx.coordinatorlayout.widget.CoordinatorLayout.AttachedBehavior {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton>;
						public originalTextCsl: android.content.res.ColorStateList;
						public setExtendMotionSpec(spec: com.google.android.material.animation.MotionSpec): void;
						public removeOnHideAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public removeOnShrinkAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public sendAccessibilityEvent(param0: number): void;
						public setSupportBackgroundTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public shrink(): void;
						public setHideMotionSpecResource(id: number): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public hide(callback: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton>;
						public getExtendMotionSpec(): com.google.android.material.animation.MotionSpec;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public show(callback: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						public setTextColor(colors: android.content.res.ColorStateList): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public setChecked(param0: boolean): void;
						public setHideMotionSpec(spec: com.google.android.material.animation.MotionSpec): void;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public getAutoSizeTextAvailableSizes(): number[];
						public getShowMotionSpec(): com.google.android.material.animation.MotionSpec;
						public sendAccessibilityEvent(eventType: number): void;
						public setShowMotionSpec(spec: com.google.android.material.animation.MotionSpec): void;
						public setTextColor(color: number): void;
						public getAutoSizeMaxTextSize(): number;
						public setExtended(extended: boolean): void;
						public setShrinkMotionSpec(spec: com.google.android.material.animation.MotionSpec): void;
						public extend(callback: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public toggle(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getShrinkMotionSpec(): com.google.android.material.animation.MotionSpec;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public removeOnExtendAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public onAttachedToWindow(): void;
						public setShrinkMotionSpecResource(id: number): void;
						public setChecked(checked: boolean): void;
						public shrink(callback: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public isExtended(): boolean;
						public getSupportCompoundDrawablesTintMode(): android.graphics.PorterDuff.Mode;
						public setSupportCompoundDrawablesTintList(param0: android.content.res.ColorStateList): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public getHideMotionSpec(): com.google.android.material.animation.MotionSpec;
						public isChecked(): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public addOnShowAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setPaddingRelative(start: number, top: number, end: number, bottom: number): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public addOnExtendAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public getAutoSizeStepGranularity(): number;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setSupportBackgroundTintList(tint: android.content.res.ColorStateList): void;
						public setAutoSizeTextTypeWithDefaults(param0: number): void;
						public hide(): void;
						public getAutoSizeMinTextSize(): number;
						public setAutoSizeTextTypeUniformWithPresetSizes(param0: number[], param1: number): void;
						public getAutoSizeTextType(): number;
						public silentlyUpdateTextColor(csl: android.content.res.ColorStateList): void;
						public extend(): void;
						public setPadding(left: number, top: number, right: number, bottom: number): void;
						public setExtendMotionSpecResource(id: number): void;
						public removeOnShowAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public setShowMotionSpecResource(id: number): void;
						public show(): void;
						public addOnShrinkAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public setSupportCompoundDrawablesTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setAnimateShowBeforeLayout(animateShowBeforeLayout: boolean): void;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public getSupportCompoundDrawablesTintList(): android.content.res.ColorStateList;
						public addOnHideAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public setAutoSizeTextTypeUniformWithConfiguration(param0: number, param1: number, param2: number, param3: number): void;
					}
					export module ExtendedFloatingActionButton {
						export class ChangeSizeStrategy extends com.google.android.material.floatingactionbutton.BaseMotionStrategy {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.ChangeSizeStrategy>;
							public getListeners(): java.util.List<android.animation.Animator.AnimatorListener>;
							public setMotionSpec(param0: com.google.android.material.animation.MotionSpec): void;
							public getMotionSpec(): com.google.android.material.animation.MotionSpec;
							public onAnimationStart(animator: android.animation.Animator): void;
							public shouldCancel(): boolean;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onChange(param0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
							public setMotionSpec(motionSpec: com.google.android.material.animation.MotionSpec): void;
							public onAnimationEnd(): void;
							public addAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
							public onAnimationCancel(): void;
							public removeAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
							public removeAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							public createAnimator(): android.animation.AnimatorSet;
							public getCurrentMotionSpec(): com.google.android.material.animation.MotionSpec;
							public addAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							public performNow(): void;
							public getDefaultMotionSpecResource(): number;
							public onChange(callback: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						}
						export class ExtendedFloatingActionButtonBehavior<T>  extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<any> {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.ExtendedFloatingActionButtonBehavior<any>>;
							public constructor();
							public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton, layoutDirection: number): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public getInsetDodgeRect(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.graphics.Rect): boolean;
							public onDependentViewChanged(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton, dependency: android.view.View): boolean;
							public extendOrShow(fab: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton): void;
							public setAutoShrinkEnabled(autoShrink: boolean): void;
							public setAutoHideEnabled(autoHide: boolean): void;
							public isAutoShrinkEnabled(): boolean;
							public onAttachedToLayoutParams(lp: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
							public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
							public onAttachedToLayoutParams(param0: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
							public isAutoHideEnabled(): boolean;
							public getInsetDodgeRect(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton, rect: android.graphics.Rect): boolean;
							public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
							public shrinkOrHide(fab: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton): void;
							public onDependentViewChanged(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): boolean;
						}
						export class HideStrategy extends com.google.android.material.floatingactionbutton.BaseMotionStrategy {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.HideStrategy>;
							public getListeners(): java.util.List<android.animation.Animator.AnimatorListener>;
							public setMotionSpec(param0: com.google.android.material.animation.MotionSpec): void;
							public getMotionSpec(): com.google.android.material.animation.MotionSpec;
							public constructor(this$0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton, animatorTracker: com.google.android.material.floatingactionbutton.AnimatorTracker);
							public onAnimationStart(animator: android.animation.Animator): void;
							public shouldCancel(): boolean;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onChange(param0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
							public setMotionSpec(motionSpec: com.google.android.material.animation.MotionSpec): void;
							public onAnimationEnd(): void;
							public addAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
							public onAnimationCancel(): void;
							public removeAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
							public removeAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							public getCurrentMotionSpec(): com.google.android.material.animation.MotionSpec;
							public createAnimator(): android.animation.AnimatorSet;
							public addAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							public performNow(): void;
							public getDefaultMotionSpecResource(): number;
							public onChange(callback: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						}
						export abstract class OnChangedCallback extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback>;
							public constructor();
							public onExtended(extendedFab: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton): void;
							public onShrunken(extendedFab: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton): void;
							public onShown(extendedFab: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton): void;
							public onHidden(extendedFab: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton): void;
						}
						export class ShowStrategy extends com.google.android.material.floatingactionbutton.BaseMotionStrategy {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.ShowStrategy>;
							public getListeners(): java.util.List<android.animation.Animator.AnimatorListener>;
							public onAnimationStart(animation: android.animation.Animator): void;
							public setMotionSpec(param0: com.google.android.material.animation.MotionSpec): void;
							public getMotionSpec(): com.google.android.material.animation.MotionSpec;
							public constructor(this$0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton, animatorTracker: com.google.android.material.floatingactionbutton.AnimatorTracker);
							public onAnimationStart(animator: android.animation.Animator): void;
							public shouldCancel(): boolean;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onChange(param0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
							public setMotionSpec(motionSpec: com.google.android.material.animation.MotionSpec): void;
							public onAnimationEnd(): void;
							public addAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
							public onAnimationCancel(): void;
							public removeAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
							public removeAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							public getCurrentMotionSpec(): com.google.android.material.animation.MotionSpec;
							public createAnimator(): android.animation.AnimatorSet;
							public addAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							public performNow(): void;
							public getDefaultMotionSpecResource(): number;
							public onChange(callback: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						}
						export class Size extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.Size>;
							/**
							 * Constructs a new instance of the com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton$Size interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getWidth(): number;
								getHeight(): number;
								getPaddingStart(): number;
								getPaddingEnd(): number;
								getLayoutParams(): android.view.ViewGroup.LayoutParams;
							});
							public constructor();
							public getWidth(): number;
							public getHeight(): number;
							public getPaddingEnd(): number;
							public getPaddingStart(): number;
							public getLayoutParams(): android.view.ViewGroup.LayoutParams;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export class FloatingActionButton extends com.google.android.material.internal.VisibilityAwareImageButton implements androidx.core.view.TintableBackgroundView, androidx.core.widget.TintableImageSourceView, com.google.android.material.expandable.ExpandableTransformationWidget, com.google.android.material.shape.Shapeable, androidx.coordinatorlayout.widget.CoordinatorLayout.AttachedBehavior {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButton>;
						public static SIZE_MINI: number;
						public static SIZE_NORMAL: number;
						public static SIZE_AUTO: number;
						public static NO_CUSTOM_SIZE: number;
						public getCustomSize(): number;
						public getExpandedComponentIdHint(): number;
						public removeOnHideAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public setSupportBackgroundTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public removeTransformationCallback(listener: com.google.android.material.animation.TransformationCallback<any>): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onSaveInstanceState(): android.os.Parcelable;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setImageDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setBackgroundColor(color: number): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public setExpanded(param0: boolean): boolean;
						/** @deprecated */
						public getRippleColor(): number;
						public setShapeAppearanceModel(shapeAppearance: com.google.android.material.shape.ShapeAppearanceModel): void;
						public getCompatHoveredFocusedTranslationZ(): number;
						public setCustomSize(size: number): void;
						public setCompatPressedTranslationZResource(id: number): void;
						public setShadowPaddingEnabled(shadowPaddingEnabled: boolean): void;
						public isOrWillBeShown(): boolean;
						public setScaleX(scaleX: number): void;
						public getShowMotionSpec(): com.google.android.material.animation.MotionSpec;
						public sendAccessibilityEvent(eventType: number): void;
						public getMeasuredContentRect(rect: android.graphics.Rect): void;
						public setShowMotionSpec(spec: com.google.android.material.animation.MotionSpec): void;
						public jumpDrawablesToCurrentState(): void;
						public getSize(): number;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public shouldEnsureMinTouchTargetSize(): boolean;
						public setCompatPressedTranslationZ(translationZ: number): void;
						public isExpanded(): boolean;
						public setScaleY(scaleY: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
						public setSupportImageTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						/** @deprecated */
						public setBackgroundDrawable(background: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public onAttachedToWindow(): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public show(listener: com.google.android.material.floatingactionbutton.FloatingActionButton.OnVisibilityChangedListener): void;
						public setBackgroundDrawable(background: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public getRippleColorStateList(): android.content.res.ColorStateList;
						public setSupportImageTintList(param0: android.content.res.ColorStateList): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public addOnShowAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public setSupportImageTintList(tint: android.content.res.ColorStateList): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setImageResource(resId: number): void;
						public setRippleColor(color: android.content.res.ColorStateList): void;
						public setTranslationZ(translationZ: number): void;
						public setShowMotionSpecResource(id: number): void;
						public show(): void;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public setTranslationY(translationY: number): void;
						public setTranslationX(translationX: number): void;
						public setExpandedComponentIdHint(expandedComponentIdHint: number): void;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public addOnHideAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						/** @deprecated */
						public getContentRect(rect: android.graphics.Rect): boolean;
						public setBackgroundTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public addTransformationCallback(listener: com.google.android.material.animation.TransformationCallback<any>): void;
						public sendAccessibilityEvent(param0: number): void;
						public setHideMotionSpecResource(id: number): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public getSupportImageTintList(): android.content.res.ColorStateList;
						public setCompatHoveredFocusedTranslationZ(translationZ: number): void;
						public setExpandedComponentIdHint(param0: number): void;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<com.google.android.material.floatingactionbutton.FloatingActionButton>;
						public getSupportImageTintMode(): android.graphics.PorterDuff.Mode;
						public setRippleColor(color: number): void;
						public getContentBackground(): android.graphics.drawable.Drawable;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onTouchEvent(ev: android.view.MotionEvent): boolean;
						public setCompatHoveredFocusedTranslationZResource(id: number): void;
						public setEnsureMinTouchTargetSize(flag: boolean): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public setHideMotionSpec(spec: com.google.android.material.animation.MotionSpec): void;
						public getBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public getUseCompatPadding(): boolean;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setExpanded(expanded: boolean): boolean;
						public clearCustomSize(): void;
						public setUseCompatPadding(useCompatPadding: boolean): void;
						public setSupportImageTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public setBackgroundResource(resid: number): void;
						public setVisibility(visibility: number): void;
						public getCompatElevation(): number;
						public setMaxImageSize(imageSize: number): void;
						public setBackgroundTintList(tint: android.content.res.ColorStateList): void;
						public hide(listener: com.google.android.material.floatingactionbutton.FloatingActionButton.OnVisibilityChangedListener): void;
						public setCompatElevation(elevation: number): void;
						public getCompatPressedTranslationZ(): number;
						public setSize(size: number): void;
						public drawableStateChanged(): void;
						public getHideMotionSpec(): com.google.android.material.animation.MotionSpec;
						public setCompatElevationResource(id: number): void;
						public isOrWillBeHidden(): boolean;
						public onDetachedFromWindow(): void;
						public setElevation(elevation: number): void;
						public setSupportBackgroundTintList(tint: android.content.res.ColorStateList): void;
						public hide(): void;
						public onTouchEvent(event: android.view.MotionEvent): boolean;
						public removeOnShowAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public getBackgroundTintList(): android.content.res.ColorStateList;
					}
					export module FloatingActionButton {
						export class BaseBehavior<T>  extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<any> {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButton.BaseBehavior<any>>;
							public constructor();
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public getInsetDodgeRect(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.graphics.Rect): boolean;
							public getInsetDodgeRect(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.floatingactionbutton.FloatingActionButton, rect: android.graphics.Rect): boolean;
							public setAutoHideEnabled(autoHide: boolean): void;
							public onAttachedToLayoutParams(lp: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
							public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
							public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.floatingactionbutton.FloatingActionButton, layoutDirection: number): boolean;
							public onAttachedToLayoutParams(param0: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
							public isAutoHideEnabled(): boolean;
							public setInternalAutoHideListener(listener: com.google.android.material.floatingactionbutton.FloatingActionButton.OnVisibilityChangedListener): void;
							public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
							public onDependentViewChanged(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.floatingactionbutton.FloatingActionButton, dependency: android.view.View): boolean;
							public onDependentViewChanged(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): boolean;
						}
						export class Behavior extends com.google.android.material.floatingactionbutton.FloatingActionButton.BaseBehavior<com.google.android.material.floatingactionbutton.FloatingActionButton> {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButton.Behavior>;
							public constructor();
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						}
						export abstract class OnVisibilityChangedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButton.OnVisibilityChangedListener>;
							public constructor();
							public onShown(fab: com.google.android.material.floatingactionbutton.FloatingActionButton): void;
							public onHidden(fab: com.google.android.material.floatingactionbutton.FloatingActionButton): void;
						}
						export class ShadowDelegateImpl extends java.lang.Object implements com.google.android.material.shadow.ShadowViewDelegate {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButton.ShadowDelegateImpl>;
							public setBackgroundDrawable(background: android.graphics.drawable.Drawable): void;
							public getRadius(): number;
							public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
							public isCompatPaddingEnabled(): boolean;
							public setShadowPadding(left: number, top: number, right: number, bottom: number): void;
							public setShadowPadding(param0: number, param1: number, param2: number, param3: number): void;
						}
						export class Size extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButton.Size>;
							/**
							 * Constructs a new instance of the com.google.android.material.floatingactionbutton.FloatingActionButton$Size interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class TransformationCallbackWrapper<T>  extends com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.InternalTransformationCallback {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButton.TransformationCallbackWrapper<any>>;
							public hashCode(): number;
							public equals(obj: any): boolean;
							public onTranslationChanged(): void;
							public onScaleChanged(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export class FloatingActionButtonImpl extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl>;
						public removeOnHideAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
						public addOnHideAnimationListener(listener: android.animation.Animator.AnimatorListener): void;
					}
					export module FloatingActionButtonImpl {
						export class DisabledElevationAnimation extends com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ShadowAnimatorImpl {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.DisabledElevationAnimation>;
							public onAnimationUpdate(animator: android.animation.ValueAnimator): void;
							public onAnimationRepeat(animation: android.animation.Animator): void;
							public getTargetShadowSize(): number;
							public onAnimationResume(animation: android.animation.Animator): void;
							public onAnimationStart(animation: android.animation.Animator): void;
							public onAnimationEnd(param0: android.animation.Animator): void;
							public onAnimationRepeat(param0: android.animation.Animator): void;
							public onAnimationCancel(animation: android.animation.Animator): void;
							public onAnimationPause(param0: android.animation.Animator): void;
							public onAnimationEnd(animator: android.animation.Animator): void;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onAnimationResume(param0: android.animation.Animator): void;
							public onAnimationPause(animation: android.animation.Animator): void;
							public onAnimationUpdate(param0: android.animation.ValueAnimator): void;
							public onAnimationCancel(param0: android.animation.Animator): void;
						}
						export class ElevateToHoveredFocusedTranslationZAnimation extends com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ShadowAnimatorImpl {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ElevateToHoveredFocusedTranslationZAnimation>;
							public onAnimationUpdate(animator: android.animation.ValueAnimator): void;
							public onAnimationRepeat(animation: android.animation.Animator): void;
							public getTargetShadowSize(): number;
							public onAnimationResume(animation: android.animation.Animator): void;
							public onAnimationStart(animation: android.animation.Animator): void;
							public onAnimationEnd(param0: android.animation.Animator): void;
							public onAnimationRepeat(param0: android.animation.Animator): void;
							public onAnimationCancel(animation: android.animation.Animator): void;
							public onAnimationPause(param0: android.animation.Animator): void;
							public onAnimationEnd(animator: android.animation.Animator): void;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onAnimationResume(param0: android.animation.Animator): void;
							public onAnimationPause(animation: android.animation.Animator): void;
							public onAnimationUpdate(param0: android.animation.ValueAnimator): void;
							public onAnimationCancel(param0: android.animation.Animator): void;
						}
						export class ElevateToPressedTranslationZAnimation extends com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ShadowAnimatorImpl {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ElevateToPressedTranslationZAnimation>;
							public onAnimationUpdate(animator: android.animation.ValueAnimator): void;
							public onAnimationRepeat(animation: android.animation.Animator): void;
							public getTargetShadowSize(): number;
							public onAnimationResume(animation: android.animation.Animator): void;
							public onAnimationStart(animation: android.animation.Animator): void;
							public onAnimationEnd(param0: android.animation.Animator): void;
							public onAnimationRepeat(param0: android.animation.Animator): void;
							public onAnimationCancel(animation: android.animation.Animator): void;
							public onAnimationPause(param0: android.animation.Animator): void;
							public onAnimationEnd(animator: android.animation.Animator): void;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onAnimationResume(param0: android.animation.Animator): void;
							public onAnimationPause(animation: android.animation.Animator): void;
							public onAnimationUpdate(param0: android.animation.ValueAnimator): void;
							public onAnimationCancel(param0: android.animation.Animator): void;
						}
						export class InternalTransformationCallback extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.InternalTransformationCallback>;
							/**
							 * Constructs a new instance of the com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalTransformationCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onTranslationChanged(): void;
								onScaleChanged(): void;
							});
							public constructor();
							public onTranslationChanged(): void;
							public onScaleChanged(): void;
						}
						export class InternalVisibilityChangedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.InternalVisibilityChangedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onShown(): void;
								onHidden(): void;
							});
							public constructor();
							public onShown(): void;
							public onHidden(): void;
						}
						export class ResetElevationAnimation extends com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ShadowAnimatorImpl {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ResetElevationAnimation>;
							public onAnimationUpdate(animator: android.animation.ValueAnimator): void;
							public onAnimationRepeat(animation: android.animation.Animator): void;
							public getTargetShadowSize(): number;
							public onAnimationResume(animation: android.animation.Animator): void;
							public onAnimationStart(animation: android.animation.Animator): void;
							public onAnimationEnd(param0: android.animation.Animator): void;
							public onAnimationRepeat(param0: android.animation.Animator): void;
							public onAnimationCancel(animation: android.animation.Animator): void;
							public onAnimationPause(param0: android.animation.Animator): void;
							public onAnimationEnd(animator: android.animation.Animator): void;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onAnimationResume(param0: android.animation.Animator): void;
							public onAnimationPause(animation: android.animation.Animator): void;
							public onAnimationUpdate(param0: android.animation.ValueAnimator): void;
							public onAnimationCancel(param0: android.animation.Animator): void;
						}
						export abstract class ShadowAnimatorImpl extends android.animation.AnimatorListenerAdapter implements android.animation.ValueAnimator.AnimatorUpdateListener {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.ShadowAnimatorImpl>;
							public onAnimationUpdate(animator: android.animation.ValueAnimator): void;
							public onAnimationRepeat(animation: android.animation.Animator): void;
							public getTargetShadowSize(): number;
							public onAnimationEnd(animation: android.animation.Animator): void;
							public onAnimationResume(animation: android.animation.Animator): void;
							public onAnimationStart(animation: android.animation.Animator): void;
							public onAnimationEnd(param0: android.animation.Animator): void;
							public onAnimationRepeat(param0: android.animation.Animator): void;
							public onAnimationCancel(animation: android.animation.Animator): void;
							public onAnimationPause(param0: android.animation.Animator): void;
							public onAnimationEnd(animator: android.animation.Animator): void;
							public onAnimationStart(param0: android.animation.Animator): void;
							public onAnimationResume(param0: android.animation.Animator): void;
							public onAnimationPause(animation: android.animation.Animator): void;
							public onAnimationUpdate(param0: android.animation.ValueAnimator): void;
							public onAnimationCancel(param0: android.animation.Animator): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export class FloatingActionButtonImplLollipop extends com.google.android.material.floatingactionbutton.FloatingActionButtonImpl {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImplLollipop>;
						public getElevation(): number;
					}
					export module FloatingActionButtonImplLollipop {
						export class AlwaysStatefulMaterialShapeDrawable extends com.google.android.material.shape.MaterialShapeDrawable {
							public static class: java.lang.Class<com.google.android.material.floatingactionbutton.FloatingActionButtonImplLollipop.AlwaysStatefulMaterialShapeDrawable>;
							public isStateful(): boolean;
							public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
							public setTintList(param0: android.content.res.ColorStateList): void;
							public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
							public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
							public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
							public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
							public setTint(param0: number): void;
							public setTint(tintColor: number): void;
							public setTintList(tintList: android.content.res.ColorStateList): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module floatingactionbutton {
					export class MotionStrategy extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.floatingactionbutton.MotionStrategy>;
						/**
						 * Constructs a new instance of the com.google.android.material.floatingactionbutton.MotionStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							performNow(): void;
							getCurrentMotionSpec(): com.google.android.material.animation.MotionSpec;
							getDefaultMotionSpecResource(): number;
							setMotionSpec(param0: com.google.android.material.animation.MotionSpec): void;
							getMotionSpec(): com.google.android.material.animation.MotionSpec;
							createAnimator(): android.animation.AnimatorSet;
							addAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							removeAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
							getListeners(): java.util.List<android.animation.Animator.AnimatorListener>;
							onAnimationStart(param0: android.animation.Animator): void;
							onAnimationEnd(): void;
							onAnimationCancel(): void;
							onChange(param0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
							shouldCancel(): boolean;
						});
						public constructor();
						public getCurrentMotionSpec(): com.google.android.material.animation.MotionSpec;
						public getListeners(): java.util.List<android.animation.Animator.AnimatorListener>;
						public createAnimator(): android.animation.AnimatorSet;
						public performNow(): void;
						public onChange(param0: com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.OnChangedCallback): void;
						public shouldCancel(): boolean;
						public getDefaultMotionSpecResource(): number;
						public addAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
						public onAnimationCancel(): void;
						public setMotionSpec(param0: com.google.android.material.animation.MotionSpec): void;
						public onAnimationEnd(): void;
						public removeAnimationListener(param0: android.animation.Animator.AnimatorListener): void;
						public onAnimationStart(param0: android.animation.Animator): void;
						public getMotionSpec(): com.google.android.material.animation.MotionSpec;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module imageview {
					export class ShapeableImageView extends androidx.appcompat.widget.AppCompatImageView implements com.google.android.material.shape.Shapeable {
						public static class: java.lang.Class<com.google.android.material.imageview.ShapeableImageView>;
						public setStrokeWidth(strokeWidth: number): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setContentPaddingRelative(start: number, top: number, end: number, bottom: number): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public getSupportImageTintList(): android.content.res.ColorStateList;
						public constructor(param0: android.content.Context);
						public getContentPaddingEnd(): number;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getSupportImageTintMode(): android.graphics.PorterDuff.Mode;
						public getContentPaddingTop(): number;
						public getPaddingBottom(): number;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public getPaddingRight(): number;
						public setStrokeWidthResource(strokeWidthResourceId: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyle: number);
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setContentPadding(left: number, top: number, right: number, bottom: number): void;
						public getContentPaddingBottom(): number;
						public sendAccessibilityEvent(eventType: number): void;
						public getStrokeColor(): android.content.res.ColorStateList;
						public setSupportImageTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public getPaddingEnd(): number;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public getContentPaddingLeft(): number;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
						public getPaddingTop(): number;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public getPaddingLeft(): number;
						public setStrokeColorResource(strokeColorResourceId: number): void;
						public getContentPaddingStart(): number;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public onDraw(canvas: android.graphics.Canvas): void;
						public getStrokeWidth(): number;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onSizeChanged(width: number, height: number, oldWidth: number, oldHeight: number): void;
						public setSupportImageTintList(param0: android.content.res.ColorStateList): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setPaddingRelative(start: number, top: number, end: number, bottom: number): void;
						public getContentPaddingRight(): number;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setStrokeColor(strokeColor: android.content.res.ColorStateList): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setPadding(left: number, top: number, right: number, bottom: number): void;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public getPaddingStart(): number;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					}
					export module ShapeableImageView {
						export class OutlineProvider extends android.view.ViewOutlineProvider {
							public static class: java.lang.Class<com.google.android.material.imageview.ShapeableImageView.OutlineProvider>;
							public getOutline(param0: android.view.View, param1: any): void;
							public getOutline(view: android.view.View, outline: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class BaselineLayout extends android.view.ViewGroup {
						public static class: java.lang.Class<com.google.android.material.internal.BaselineLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public getBaseline(): number;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class CheckableGroup<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.CheckableGroup<any>>;
						public uncheck(id: number): void;
						public constructor();
						public getCheckedIds(): java.util.Set<java.lang.Integer>;
						public check(id: number): void;
						public clearCheck(): void;
						public setSelectionRequired(selectionRequired: boolean): void;
						public setOnCheckedStateChangeListener(listener: com.google.android.material.internal.CheckableGroup.OnCheckedStateChangeListener): void;
						public getCheckedIdsSortedByChildOrder(parent: android.view.ViewGroup): java.util.List<java.lang.Integer>;
						public removeCheckable(checkable: T): void;
						public setSingleSelection(singleSelection: boolean): void;
						public isSingleSelection(): boolean;
						public getSingleCheckedId(): number;
						public isSelectionRequired(): boolean;
						public addCheckable(checkable: T): void;
					}
					export module CheckableGroup {
						export class OnCheckedStateChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.CheckableGroup.OnCheckedStateChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.internal.CheckableGroup$OnCheckedStateChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCheckedStateChanged(param0: java.util.Set<java.lang.Integer>): void;
							});
							public constructor();
							public onCheckedStateChanged(param0: java.util.Set<java.lang.Integer>): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class CheckableImageButton extends androidx.appcompat.widget.AppCompatImageButton implements android.widget.Checkable {
						public static class: java.lang.Class<com.google.android.material.internal.CheckableImageButton>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public setChecked(checked: boolean): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public onCreateDrawableState(extraSpace: number): number[];
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public getSupportImageTintList(): android.content.res.ColorStateList;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public isPressable(): boolean;
						public constructor(param0: android.content.Context);
						public isCheckable(): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getSupportImageTintMode(): android.graphics.PorterDuff.Mode;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onSaveInstanceState(): android.os.Parcelable;
						public isChecked(): boolean;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportImageTintList(param0: android.content.res.ColorStateList): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public setCheckable(checkable: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public setChecked(param0: boolean): void;
						public setPressable(pressable: boolean): void;
						public setPressed(pressed: boolean): void;
						public sendAccessibilityEvent(eventType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setSupportImageTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public toggle(): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
					}
					export module CheckableImageButton {
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.internal.CheckableImageButton.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.internal.CheckableImageButton.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public constructor(superState: android.os.Parcelable);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public constructor(source: android.os.Parcel, loader: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
							public constructor(param0: android.os.Parcel);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ClippableRoundedCornerLayout extends android.widget.FrameLayout {
						public static class: java.lang.Class<com.google.android.material.internal.ClippableRoundedCornerLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public resetClipBoundsAndCornerRadius(): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchDraw(canvas: android.graphics.Canvas): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public updateCornerRadius(cornerRadius: number): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public updateClipBoundsAndCornerRadius(rectF: android.graphics.RectF, cornerRadius: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public getCornerRadius(): number;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public updateClipBoundsAndCornerRadius(left: number, top: number, right: number, bottom: number, cornerRadius: number): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public updateClipBoundsAndCornerRadius(rect: android.graphics.Rect, cornerRadius: number): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class CollapsingTextHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.CollapsingTextHelper>;
						public setFadeModeStartFraction(fadeModeStartFraction: number): void;
						public draw(canvas: android.graphics.Canvas): void;
						public setPositionInterpolator(interpolator: android.animation.TimeInterpolator): void;
						public getCollapsedTypeface(): android.graphics.Typeface;
						public setRtlTextDirectionHeuristicsEnabled(rtlTextDirectionHeuristicsEnabled: boolean): void;
						public setCollapsedTypeface(typeface: android.graphics.Typeface): void;
						public getExpandedTextColor(): android.content.res.ColorStateList;
						public setExpandedBounds(left: number, top: number, right: number, bottom: number): void;
						public isStateful(): boolean;
						public getExpansionFraction(): number;
						public setTextSizeInterpolator(interpolator: android.animation.TimeInterpolator): void;
						public setCollapsedBounds(bounds: android.graphics.Rect): void;
						public getCollapsedTextGravity(): number;
						public getHyphenationFrequency(): number;
						public setCollapsedTextGravity(gravity: number): void;
						public maybeUpdateFontWeightAdjustment(configuration: android.content.res.Configuration): void;
						public setFadeModeEnabled(fadeModeEnabled: boolean): void;
						public setCollapsedAndExpandedTextColor(textColor: android.content.res.ColorStateList): void;
						public recalculate(forceRecalculate: boolean): void;
						public getExpandedTextSize(): number;
						public setLineSpacingMultiplier(spacingMultiplier: number): void;
						public getLineCount(): number;
						public setExpandedTextGravity(gravity: number): void;
						public setExpandedTextSize(textSize: number): void;
						public setExpandedTypeface(typeface: android.graphics.Typeface): void;
						public setState(state: number[]): boolean;
						public isRtlTextDirectionHeuristicsEnabled(): boolean;
						public setExpandedTextAppearance(resId: number): void;
						public getLineSpacingMultiplier(): number;
						public constructor(view: android.view.View);
						public setLineSpacingAdd(spacingAdd: number): void;
						public setCollapsedBounds(left: number, top: number, right: number, bottom: number): void;
						public setHyphenationFrequency(hyphenationFrequency: number): void;
						public setStaticLayoutBuilderConfigurer(staticLayoutBuilderConfigurer: com.google.android.material.internal.StaticLayoutBuilderConfigurer): void;
						public setExpandedBounds(bounds: android.graphics.Rect): void;
						public getCollapsedTextActualBounds(bounds: android.graphics.RectF, labelWidth: number, textGravity: number): void;
						public getTitleTextEllipsize(): android.text.TextUtils.TruncateAt;
						public getMaxLines(): number;
						public getExpandedLineCount(): number;
						public setCollapsedTextAppearance(resId: number): void;
						public setCollapsedTextColor(textColor: android.content.res.ColorStateList): void;
						public getText(): string;
						public setCurrentOffsetY(currentOffsetY: number): void;
						public getCollapsedTextHeight(): number;
						public getExpandedTextFullHeight(): number;
						public getExpandedTextGravity(): number;
						public setCollapsedTextSize(textSize: number): void;
						public setTitleTextEllipsize(ellipsize: android.text.TextUtils.TruncateAt): void;
						public setMaxLines(maxLines: number): void;
						public setTypefaces(typeface: android.graphics.Typeface): void;
						public getExpandedTypeface(): android.graphics.Typeface;
						public setText(text: string): void;
						public getExpandedTextHeight(): number;
						public getCollapsedTextSize(): number;
						public recalculate(): void;
						public getLineSpacingAdd(): number;
						public setExpandedTextColor(textColor: android.content.res.ColorStateList): void;
						public setExpandedLetterSpacing(letterSpacing: number): void;
						public setExpansionFraction(fraction: number): void;
						public getPositionInterpolator(): android.animation.TimeInterpolator;
						public getCurrentCollapsedTextColor(): number;
						public getFadeModeThresholdFraction(): number;
						public getCollapsedTextColor(): android.content.res.ColorStateList;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ContextUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.ContextUtils>;
						public constructor();
						public static getActivity(context: android.content.Context): android.app.Activity;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class DescendantOffsetUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.DescendantOffsetUtils>;
						public constructor();
						public static offsetDescendantRect(parent: android.view.ViewGroup, descendant: android.view.View, rect: android.graphics.Rect): void;
						public static getDescendantRect(parent: android.view.ViewGroup, descendant: android.view.View, out: android.graphics.Rect): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class EdgeToEdgeUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.EdgeToEdgeUtils>;
						public static applyEdgeToEdge(window: android.view.Window, edgeToEdgeEnabled: boolean, statusBarOverlapBackgroundColor: java.lang.Integer, navigationBarOverlapBackgroundColor: java.lang.Integer): void;
						public static setLightStatusBar(window: android.view.Window, isLight: boolean): void;
						public static applyEdgeToEdge(window: android.view.Window, edgeToEdgeEnabled: boolean): void;
						public static setLightNavigationBar(window: android.view.Window, isLight: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ExpandCollapseAnimationHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.ExpandCollapseAnimationHelper>;
						public setExpandedViewOffsetY(expandedViewOffsetY: number): com.google.android.material.internal.ExpandCollapseAnimationHelper;
						public addEndAnchoredViews(views: java.util.Collection<android.view.View>): com.google.android.material.internal.ExpandCollapseAnimationHelper;
						public getExpandAnimator(): android.animation.Animator;
						public constructor(collapsedView: android.view.View, expandedView: android.view.View);
						public setCollapsedViewOffsetY(collapsedViewOffsetY: number): com.google.android.material.internal.ExpandCollapseAnimationHelper;
						public setDuration(duration: number): com.google.android.material.internal.ExpandCollapseAnimationHelper;
						public addEndAnchoredViews(...views: android.view.View[]): com.google.android.material.internal.ExpandCollapseAnimationHelper;
						public getCollapseAnimator(): android.animation.Animator;
						public addListener(listener: android.animation.AnimatorListenerAdapter): com.google.android.material.internal.ExpandCollapseAnimationHelper;
						public setAdditionalUpdateListener(additionalUpdateListener: android.animation.ValueAnimator.AnimatorUpdateListener): com.google.android.material.internal.ExpandCollapseAnimationHelper;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class Experimental extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.google.android.material.internal.Experimental>;
						/**
						 * Constructs a new instance of the com.google.android.material.internal.Experimental interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): string;
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public value(): string;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class FadeThroughDrawable extends android.graphics.drawable.Drawable {
						public static class: java.lang.Class<com.google.android.material.internal.FadeThroughDrawable>;
						public draw(param0: android.graphics.Canvas): void;
						public draw(canvas: android.graphics.Canvas): void;
						public getMinimumHeight(): number;
						public constructor();
						public getIntrinsicWidth(): number;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						public getIntrinsicHeight(): number;
						public getMinimumWidth(): number;
						public constructor(fadeOutDrawable: android.graphics.drawable.Drawable, fadeInDrawable: android.graphics.drawable.Drawable);
						public setBounds(left: number, top: number, right: number, bottom: number): void;
						public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
						public getOpacity(): number;
						public setAlpha(param0: number): void;
						public setBounds(bounds: android.graphics.Rect): void;
						public setState(stateSet: number[]): boolean;
						public isStateful(): boolean;
						public setProgress(progress: number): void;
						public setAlpha(alpha: number): void;
						public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class FadeThroughUpdateListener extends java.lang.Object implements android.animation.ValueAnimator.AnimatorUpdateListener {
						public static class: java.lang.Class<com.google.android.material.internal.FadeThroughUpdateListener>;
						public constructor(fadeOutView: android.view.View, fadeInView: android.view.View);
						public onAnimationUpdate(animation: android.animation.ValueAnimator): void;
						public onAnimationUpdate(param0: android.animation.ValueAnimator): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class FadeThroughUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.FadeThroughUtils>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class FlowLayout extends android.view.ViewGroup {
						public static class: java.lang.Class<com.google.android.material.internal.FlowLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public setLineSpacing(lineSpacing: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getItemSpacing(): number;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public getRowCount(): number;
						public onLayout(sizeChanged: boolean, left: number, top: number, right: number, bottom: number): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setSingleLine(singleLine: boolean): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public isSingleLine(): boolean;
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public getLineSpacing(): number;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getRowIndex(child: android.view.View): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setItemSpacing(itemSpacing: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ForegroundLinearLayout extends androidx.appcompat.widget.LinearLayoutCompat {
						public static class: java.lang.Class<com.google.android.material.internal.ForegroundLinearLayout>;
						public mForegroundInPadding: boolean;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public setForeground(foreground: android.graphics.drawable.Drawable): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public getForeground(): android.graphics.drawable.Drawable;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public jumpDrawablesToCurrentState(): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public getForegroundGravity(): number;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public setForeground(drawable: android.graphics.drawable.Drawable): void;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyle: number);
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public drawableHotspotChanged(x: number, y: number): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public verifyDrawable(who: android.graphics.drawable.Drawable): boolean;
						public drawableStateChanged(): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setForegroundGravity(gravity: number): void;
						public setForegroundGravity(foregroundGravity: number): void;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ManufacturerUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.ManufacturerUtils>;
						public static isDateInputKeyboardMissingSeparatorCharacters(): boolean;
						public static isMeizuDevice(): boolean;
						public static isLGEDevice(): boolean;
						public static isSamsungDevice(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class MaterialCheckable<T>  extends android.widget.Checkable {
						public static class: java.lang.Class<com.google.android.material.internal.MaterialCheckable<any>>;
						/**
						 * Constructs a new instance of the com.google.android.material.internal.MaterialCheckable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getId(): number;
							setInternalOnCheckedChangeListener(param0: com.google.android.material.internal.MaterialCheckable.OnCheckedChangeListener<any>): void;
							setChecked(param0: boolean): void;
							isChecked(): boolean;
							toggle(): void;
						});
						public constructor();
						public setChecked(param0: boolean): void;
						public setInternalOnCheckedChangeListener(param0: com.google.android.material.internal.MaterialCheckable.OnCheckedChangeListener<any>): void;
						public isChecked(): boolean;
						public toggle(): void;
						public getId(): number;
					}
					export module MaterialCheckable {
						export class OnCheckedChangeListener<C>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.MaterialCheckable.OnCheckedChangeListener<any>>;
							/**
							 * Constructs a new instance of the com.google.android.material.internal.MaterialCheckable$OnCheckedChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCheckedChanged(param0: C, param1: boolean): void;
							});
							public constructor();
							public onCheckedChanged(param0: C, param1: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class MultiViewUpdateListener extends java.lang.Object implements android.animation.ValueAnimator.AnimatorUpdateListener {
						public static class: java.lang.Class<com.google.android.material.internal.MultiViewUpdateListener>;
						public onAnimationUpdate(valueAnimator: android.animation.ValueAnimator): void;
						public static translationXListener(...views: android.view.View[]): com.google.android.material.internal.MultiViewUpdateListener;
						public static translationYListener(...views: android.view.View[]): com.google.android.material.internal.MultiViewUpdateListener;
						public constructor(listener: com.google.android.material.internal.MultiViewUpdateListener.Listener, ...views: android.view.View[]);
						public static alphaListener(...views: android.view.View[]): com.google.android.material.internal.MultiViewUpdateListener;
						public static alphaListener(views: java.util.Collection<android.view.View>): com.google.android.material.internal.MultiViewUpdateListener;
						public static translationXListener(views: java.util.Collection<android.view.View>): com.google.android.material.internal.MultiViewUpdateListener;
						public static scaleListener(...views: android.view.View[]): com.google.android.material.internal.MultiViewUpdateListener;
						public static scaleListener(views: java.util.Collection<android.view.View>): com.google.android.material.internal.MultiViewUpdateListener;
						public constructor(listener: com.google.android.material.internal.MultiViewUpdateListener.Listener, views: java.util.Collection<android.view.View>);
						public onAnimationUpdate(param0: android.animation.ValueAnimator): void;
						public static translationYListener(views: java.util.Collection<android.view.View>): com.google.android.material.internal.MultiViewUpdateListener;
					}
					export module MultiViewUpdateListener {
						export class Listener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.MultiViewUpdateListener.Listener>;
							/**
							 * Constructs a new instance of the com.google.android.material.internal.MultiViewUpdateListener$Listener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onAnimationUpdate(param0: android.animation.ValueAnimator, param1: android.view.View): void;
							});
							public constructor();
							public onAnimationUpdate(param0: android.animation.ValueAnimator, param1: android.view.View): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class NavigationMenu extends androidx.appcompat.view.menu.MenuBuilder {
						public static class: java.lang.Class<com.google.android.material.internal.NavigationMenu>;
						public addSubMenu(group: number, id: number, categoryOrder: number, title: string): android.view.SubMenu;
						public setGroupDividerEnabled(param0: boolean): void;
						public addSubMenu(param0: number): android.view.SubMenu;
						public addSubMenu(param0: number, param1: number, param2: number, param3: string): android.view.SubMenu;
						public constructor(context: android.content.Context);
						public addSubMenu(param0: number, param1: number, param2: number, param3: number): android.view.SubMenu;
						public addSubMenu(param0: string): android.view.SubMenu;
						public constructor(param0: android.content.Context);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class NavigationMenuItemView extends com.google.android.material.internal.ForegroundLinearLayout implements androidx.appcompat.view.menu.MenuView.ItemView {
						public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuItemView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public setHorizontalPadding(padding: number): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public initialize(itemData: androidx.appcompat.view.menu.MenuItemImpl, menuType: number): void;
						public setEnabled(enabled: boolean): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public setShortcut(param0: boolean, param1: string): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public initialize(itemData: androidx.appcompat.view.menu.MenuItemImpl, isBold: boolean): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public setIcon(icon: android.graphics.drawable.Drawable): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setTitle(title: string): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public setChecked(checked: boolean): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setCheckable(checkable: boolean): void;
						public setMaxLines(maxLines: number): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setTextAppearance(textAppearance: number): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public setEnabled(param0: boolean): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public getItemData(): androidx.appcompat.view.menu.MenuItemImpl;
						public setIconSize(iconSize: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showsIcon(): boolean;
						public onCreateDrawableState(extraSpace: number): number[];
						public setIconPadding(padding: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public prefersCondensedTitle(): boolean;
						public requestTransparentRegion(child: android.view.View): void;
						public setTextColor(colors: android.content.res.ColorStateList): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyle: number);
						public setIcon(param0: android.graphics.drawable.Drawable): void;
						public focusableViewAvailable(v: android.view.View): void;
						public setNeedsEmptyIcon(needsEmptyIcon: boolean): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public setTitle(param0: string): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setCheckable(param0: boolean): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public recycle(): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public initialize(param0: androidx.appcompat.view.menu.MenuItemImpl, param1: number): void;
						public setShortcut(showShortcut: boolean, shortcutKey: string): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class NavigationMenuPresenter extends java.lang.Object implements androidx.appcompat.view.menu.MenuPresenter {
						public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter>;
						public static NO_TEXT_APPEARANCE_SET: number;
						public flagActionItems(): boolean;
						public setCallback(cb: androidx.appcompat.view.menu.MenuPresenter.Callback): void;
						public getItemIconPadding(): number;
						public setCheckedItem(item: androidx.appcompat.view.menu.MenuItemImpl): void;
						public setItemTextColor(textColor: android.content.res.ColorStateList): void;
						public setItemIconSize(itemIconSize: number): void;
						public setItemIconTintList(tint: android.content.res.ColorStateList): void;
						public onSaveInstanceState(): android.os.Parcelable;
						public setSubheaderColor(subheaderColor: android.content.res.ColorStateList): void;
						public setBehindStatusBar(behindStatusBar: boolean): void;
						public expandItemActionView(param0: androidx.appcompat.view.menu.MenuBuilder, param1: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public getItemTintList(): android.content.res.ColorStateList;
						public getItemMaxLines(): number;
						public onCloseMenu(menu: androidx.appcompat.view.menu.MenuBuilder, allMenusAreClosing: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): androidx.appcompat.view.menu.MenuView;
						public expandItemActionView(menu: androidx.appcompat.view.menu.MenuBuilder, item: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public constructor();
						public onSubMenuSelected(subMenu: androidx.appcompat.view.menu.SubMenuBuilder): boolean;
						public initForMenu(context: android.content.Context, menu: androidx.appcompat.view.menu.MenuBuilder): void;
						public setItemIconPadding(itemIconPadding: number): void;
						public setItemVerticalPadding(itemVerticalPadding: number): void;
						public setId(id: number): void;
						public setSubheaderInsetStart(subheaderInsetStart: number): void;
						public updateMenuView(cleared: boolean): void;
						public setItemTextAppearance(resId: number): void;
						public setUpdateSuspended(updateSuspended: boolean): void;
						public setOverScrollMode(overScrollMode: number): void;
						public dispatchApplyWindowInsets(insets: androidx.core.view.WindowInsetsCompat): void;
						public getHeaderCount(): number;
						public onCloseMenu(param0: androidx.appcompat.view.menu.MenuBuilder, param1: boolean): void;
						public setCallback(param0: androidx.appcompat.view.menu.MenuPresenter.Callback): void;
						public onSubMenuSelected(param0: androidx.appcompat.view.menu.SubMenuBuilder): boolean;
						public inflateHeaderView(res: number): android.view.View;
						public setSubheaderInsetEnd(subheaderInsetEnd: number): void;
						public getHeaderView(index: number): android.view.View;
						public collapseItemActionView(menu: androidx.appcompat.view.menu.MenuBuilder, item: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public collapseItemActionView(param0: androidx.appcompat.view.menu.MenuBuilder, param1: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public setItemTextAppearanceActiveBoldEnabled(isBold: boolean): void;
						public getItemVerticalPadding(): number;
						public getItemBackground(): android.graphics.drawable.Drawable;
						public getMenuView(root: android.view.ViewGroup): androidx.appcompat.view.menu.MenuView;
						public setDividerInsetEnd(dividerInsetEnd: number): void;
						public isBehindStatusBar(): boolean;
						public updateMenuView(param0: boolean): void;
						public setItemMaxLines(itemMaxLines: number): void;
						public initForMenu(param0: android.content.Context, param1: androidx.appcompat.view.menu.MenuBuilder): void;
						public setItemHorizontalPadding(itemHorizontalPadding: number): void;
						public removeHeaderView(view: android.view.View): void;
						public getDividerInsetStart(): number;
						public getSubheaderInsetStart(): number;
						public setSubheaderTextAppearance(resId: number): void;
						public getItemHorizontalPadding(): number;
						public getSubheaderInsetEnd(): number;
						public setDividerInsetStart(dividerInsetStart: number): void;
						public setItemBackground(itemBackground: android.graphics.drawable.Drawable): void;
						public getId(): number;
						public onRestoreInstanceState(parcelable: android.os.Parcelable): void;
						public getItemTextColor(): android.content.res.ColorStateList;
						public getDividerInsetEnd(): number;
						public addHeaderView(view: android.view.View): void;
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public getCheckedItem(): androidx.appcompat.view.menu.MenuItemImpl;
						public setItemForeground(itemForeground: android.graphics.drawable.RippleDrawable): void;
					}
					export module NavigationMenuPresenter {
						export class HeaderViewHolder extends com.google.android.material.internal.NavigationMenuPresenter.ViewHolder {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.HeaderViewHolder>;
							public constructor(itemView: android.view.View);
						}
						export class NavigationMenuAdapter extends androidx.recyclerview.widget.RecyclerView.Adapter<com.google.android.material.internal.NavigationMenuPresenter.ViewHolder> {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuAdapter>;
							public getItemId(param0: number): number;
							public onBindViewHolder(param0: any, param1: number, param2: java.util.List<any>): void;
							public getItemViewType(param0: number): number;
							public onViewRecycled(param0: any): void;
							public getItemViewType(position: number): number;
							public onViewRecycled(holder: com.google.android.material.internal.NavigationMenuPresenter.ViewHolder): void;
							public setUpdateSuspended(updateSuspended: boolean): void;
							public createInstanceState(): android.os.Bundle;
							public onBindViewHolder(holder: com.google.android.material.internal.NavigationMenuPresenter.ViewHolder, position: number): void;
							public setCheckedItem(checkedItem: androidx.appcompat.view.menu.MenuItemImpl): void;
							public restoreInstanceState(state: android.os.Bundle): void;
							public update(): void;
							public getCheckedItem(): androidx.appcompat.view.menu.MenuItemImpl;
							public getItemCount(): number;
							public onCreateViewHolder(parent: android.view.ViewGroup, viewType: number): com.google.android.material.internal.NavigationMenuPresenter.ViewHolder;
							public onBindViewHolder(param0: any, param1: number): void;
							public onCreateViewHolder(param0: android.view.ViewGroup, param1: number): any;
							public getItemId(position: number): number;
						}
						export class NavigationMenuHeaderItem extends java.lang.Object implements com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuItem {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuHeaderItem>;
						}
						export class NavigationMenuItem extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuItem>;
							/**
							 * Constructs a new instance of the com.google.android.material.internal.NavigationMenuPresenter$NavigationMenuItem interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
							});
							public constructor();
						}
						export class NavigationMenuSeparatorItem extends java.lang.Object implements com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuItem {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuSeparatorItem>;
							public getPaddingBottom(): number;
							public constructor(paddingTop: number, paddingBottom: number);
							public getPaddingTop(): number;
						}
						export class NavigationMenuTextItem extends java.lang.Object implements com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuItem {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuTextItem>;
							public getMenuItem(): androidx.appcompat.view.menu.MenuItemImpl;
						}
						export class NavigationMenuViewAccessibilityDelegate extends androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.NavigationMenuViewAccessibilityDelegate>;
							public onInitializeAccessibilityNodeInfo(host: android.view.View, info: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onInitializeAccessibilityNodeInfo(param0: android.view.View, param1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
						}
						export class NormalViewHolder extends com.google.android.material.internal.NavigationMenuPresenter.ViewHolder {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.NormalViewHolder>;
							public constructor(itemView: android.view.View);
							public constructor(inflater: android.view.LayoutInflater, parent: android.view.ViewGroup, listener: android.view.View.OnClickListener);
						}
						export class SeparatorViewHolder extends com.google.android.material.internal.NavigationMenuPresenter.ViewHolder {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.SeparatorViewHolder>;
							public constructor(itemView: android.view.View);
							public constructor(inflater: android.view.LayoutInflater, parent: android.view.ViewGroup);
						}
						export class SubheaderViewHolder extends com.google.android.material.internal.NavigationMenuPresenter.ViewHolder {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.SubheaderViewHolder>;
							public constructor(itemView: android.view.View);
							public constructor(inflater: android.view.LayoutInflater, parent: android.view.ViewGroup);
						}
						export abstract class ViewHolder extends androidx.recyclerview.widget.RecyclerView.ViewHolder {
							public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuPresenter.ViewHolder>;
							public constructor(itemView: android.view.View);
							public constructor(param0: android.view.View);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class NavigationMenuView extends androidx.recyclerview.widget.RecyclerView implements androidx.appcompat.view.menu.MenuView {
						public static class: java.lang.Class<com.google.android.material.internal.NavigationMenuView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public hasNestedScrollingParent(): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public startNestedScroll(param0: number): boolean;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public computeVerticalScrollRange(): number;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public initialize(param0: androidx.appcompat.view.menu.MenuBuilder): void;
						public requestFitSystemWindows(): void;
						public stopNestedScroll(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public startNestedScroll(param0: number, param1: number): boolean;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: number[], param5: number): boolean;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public stopNestedScroll(param0: number): void;
						public sendAccessibilityEvent(param0: number): void;
						public dispatchNestedPreScroll(param0: number, param1: number, param2: number[], param3: number[], param4: number): boolean;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public requestTransparentRegion(child: android.view.View): void;
						public computeHorizontalScrollOffset(): number;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public hasNestedScrollingParent(param0: number): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public computeVerticalScrollOffset(): number;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public initialize(menu: androidx.appcompat.view.menu.MenuBuilder): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public getWindowAnimations(): number;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public computeHorizontalScrollExtent(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: number[]): boolean;
						public dispatchNestedPreScroll(param0: number, param1: number, param2: number[], param3: number[]): boolean;
						public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: number[], param5: number, param6: number[]): void;
						public computeHorizontalScrollRange(): number;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public computeVerticalScrollExtent(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class NavigationSubMenu extends androidx.appcompat.view.menu.SubMenuBuilder {
						public static class: java.lang.Class<com.google.android.material.internal.NavigationSubMenu>;
						public setIcon(param0: number): android.view.SubMenu;
						public setGroupDividerEnabled(param0: boolean): void;
						public setHeaderIcon(param0: android.graphics.drawable.Drawable): android.view.SubMenu;
						public getItem(param0: number): android.view.MenuItem;
						public onItemsChanged(structureChanged: boolean): void;
						public setHeaderTitle(param0: number): android.view.SubMenu;
						public constructor(param0: android.content.Context, param1: androidx.appcompat.view.menu.MenuBuilder, param2: androidx.appcompat.view.menu.MenuItemImpl);
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.SubMenu;
						public getItem(): android.view.MenuItem;
						public setHeaderIcon(param0: number): android.view.SubMenu;
						public constructor(param0: android.content.Context);
						public setHeaderView(param0: android.view.View): android.view.SubMenu;
						public clearHeader(): void;
						public constructor(context: android.content.Context, menu: com.google.android.material.internal.NavigationMenu, item: androidx.appcompat.view.menu.MenuItemImpl);
						public setHeaderTitle(param0: string): android.view.SubMenu;
						public onItemsChanged(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ParcelableSparseArray extends android.util.SparseArray<android.os.Parcelable> implements android.os.Parcelable  {
						public static class: java.lang.Class<com.google.android.material.internal.ParcelableSparseArray>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.internal.ParcelableSparseArray>;
						public writeToParcel(parcel: android.os.Parcel, flags: number): void;
						public constructor();
						public describeContents(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public constructor(initialCapacity: number);
						public constructor(source: android.os.Parcel, loader: java.lang.ClassLoader);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ParcelableSparseBooleanArray extends android.util.SparseBooleanArray implements android.os.Parcelable {
						public static class: java.lang.Class<com.google.android.material.internal.ParcelableSparseBooleanArray>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.internal.ParcelableSparseBooleanArray>;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public constructor();
						public describeContents(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public constructor(initialCapacity: number);
						public constructor(sparseBooleanArray: android.util.SparseBooleanArray);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ParcelableSparseIntArray extends android.util.SparseIntArray implements android.os.Parcelable {
						public static class: java.lang.Class<com.google.android.material.internal.ParcelableSparseIntArray>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.internal.ParcelableSparseIntArray>;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public constructor();
						public describeContents(): number;
						public constructor(sparseIntArray: android.util.SparseIntArray);
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public constructor(initialCapacity: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class RectEvaluator extends android.animation.TypeEvaluator<android.graphics.Rect> {
						public static class: java.lang.Class<com.google.android.material.internal.RectEvaluator>;
						public evaluate(fraction: number, startValue: android.graphics.Rect, endValue: android.graphics.Rect): android.graphics.Rect;
						public constructor(rect: android.graphics.Rect);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ReversableAnimatedValueInterpolator extends java.lang.Object implements android.animation.TimeInterpolator {
						public static class: java.lang.Class<com.google.android.material.internal.ReversableAnimatedValueInterpolator>;
						public getInterpolation(input: number): number;
						public constructor(sourceInterpolator: android.animation.TimeInterpolator);
						public static of(useSourceInterpolator: boolean, sourceInterpolator: android.animation.TimeInterpolator): android.animation.TimeInterpolator;
						public getInterpolation(param0: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ScrimInsetsFrameLayout extends android.widget.FrameLayout {
						public static class: java.lang.Class<com.google.android.material.internal.ScrimInsetsFrameLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setDrawLeftInsetForeground(drawLeftInsetForeground: boolean): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public onInsetsChanged(insets: androidx.core.view.WindowInsetsCompat): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public setDrawTopInsetForeground(drawTopInsetForeground: boolean): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public setDrawRightInsetForeground(drawRightInsetForeground: boolean): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public setScrimInsetForeground(drawable: android.graphics.drawable.Drawable): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public onDetachedFromWindow(): void;
						public setDrawBottomInsetForeground(drawBottomInsetForeground: boolean): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class StateListAnimator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.StateListAnimator>;
						public constructor();
						public setState(state: number[]): void;
						public jumpToCurrentState(): void;
						public addState(specs: number[], animator: android.animation.ValueAnimator): void;
					}
					export module StateListAnimator {
						export class Tuple extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.StateListAnimator.Tuple>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class StaticLayoutBuilderCompat extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.StaticLayoutBuilderCompat>;
						public setEnd(end: number): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public build(): android.text.StaticLayout;
						public setIsRtl(isRtl: boolean): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public static obtain(source: string, paint: android.text.TextPaint, width: number): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setAlignment(alignment: android.text.Layout.Alignment): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setStart(start: number): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setEllipsize(ellipsize: android.text.TextUtils.TruncateAt): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setHyphenationFrequency(hyphenationFrequency: number): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setIncludePad(includePad: boolean): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setMaxLines(maxLines: number): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setLineSpacing(spacingAdd: number, lineSpacingMultiplier: number): com.google.android.material.internal.StaticLayoutBuilderCompat;
						public setStaticLayoutBuilderConfigurer(staticLayoutBuilderConfigurer: com.google.android.material.internal.StaticLayoutBuilderConfigurer): com.google.android.material.internal.StaticLayoutBuilderCompat;
					}
					export module StaticLayoutBuilderCompat {
						export class StaticLayoutBuilderCompatException extends java.lang.Exception {
							public static class: java.lang.Class<com.google.android.material.internal.StaticLayoutBuilderCompat.StaticLayoutBuilderCompatException>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class StaticLayoutBuilderConfigurer extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.StaticLayoutBuilderConfigurer>;
						/**
						 * Constructs a new instance of the com.google.android.material.internal.StaticLayoutBuilderConfigurer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							configure(param0: android.text.StaticLayout.Builder): void;
						});
						public constructor();
						public configure(param0: android.text.StaticLayout.Builder): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class TextDrawableHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.TextDrawableHelper>;
						public setTextSizeDirty(dirty: boolean): void;
						public setTextAppearance(textAppearance: com.google.android.material.resources.TextAppearance, context: android.content.Context): void;
						public getTextAppearance(): com.google.android.material.resources.TextAppearance;
						public setTextWidthDirty(dirty: boolean): void;
						public updateTextPaintDrawState(context: android.content.Context): void;
						public getTextWidth(text: string): number;
						public constructor(delegate: com.google.android.material.internal.TextDrawableHelper.TextDrawableDelegate);
						public setDelegate(delegate: com.google.android.material.internal.TextDrawableHelper.TextDrawableDelegate): void;
						public getTextPaint(): android.text.TextPaint;
						public isTextWidthDirty(): boolean;
						public getTextHeight(text: string): number;
					}
					export module TextDrawableHelper {
						export class TextDrawableDelegate extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.TextDrawableHelper.TextDrawableDelegate>;
							/**
							 * Constructs a new instance of the com.google.android.material.internal.TextDrawableHelper$TextDrawableDelegate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getState(): number[];
								onTextSizeChange(): void;
								onStateChange(param0: number[]): boolean;
							});
							public constructor();
							public getState(): number[];
							public onStateChange(param0: number[]): boolean;
							public onTextSizeChange(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class TextScale extends androidx.transition.Transition {
						public static class: java.lang.Class<com.google.android.material.internal.TextScale>;
						public captureEndValues(param0: androidx.transition.TransitionValues): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public constructor();
						public createAnimator(sceneRoot: android.view.ViewGroup, startValues: androidx.transition.TransitionValues, endValues: androidx.transition.TransitionValues): android.animation.Animator;
						public captureStartValues(transitionValues: androidx.transition.TransitionValues): void;
						public captureEndValues(transitionValues: androidx.transition.TransitionValues): void;
						public createAnimator(param0: android.view.ViewGroup, param1: androidx.transition.TransitionValues, param2: androidx.transition.TransitionValues): android.animation.Animator;
						public captureStartValues(param0: androidx.transition.TransitionValues): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class TextWatcherAdapter extends java.lang.Object implements android.text.TextWatcher {
						public static class: java.lang.Class<com.google.android.material.internal.TextWatcherAdapter>;
						public constructor();
						public onTextChanged(s: string, start: number, before: number, count: number): void;
						public afterTextChanged(param0: android.text.Editable): void;
						public beforeTextChanged(s: string, start: number, count: number, after: number): void;
						public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public afterTextChanged(s: android.text.Editable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ThemeEnforcement extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.ThemeEnforcement>;
						public static obtainStyledAttributes(context: android.content.Context, set: android.util.AttributeSet, attrs: number[], defStyleAttr: number, defStyleRes: number, ...textAppearanceResIndices: number[]): android.content.res.TypedArray;
						public static isMaterialTheme(context: android.content.Context): boolean;
						public static isMaterial3Theme(context: android.content.Context): boolean;
						public static obtainTintedStyledAttributes(context: android.content.Context, set: android.util.AttributeSet, attrs: number[], defStyleAttr: number, defStyleRes: number, ...textAppearanceResIndices: number[]): androidx.appcompat.widget.TintTypedArray;
						public static checkAppCompatTheme(context: android.content.Context): void;
						public static isAppCompatTheme(context: android.content.Context): boolean;
						public static checkMaterialTheme(context: android.content.Context): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ToolbarUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.ToolbarUtils>;
						public static getLogoImageView(toolbar: androidx.appcompat.widget.Toolbar): android.widget.ImageView;
						public static getTitleTextView(toolbar: androidx.appcompat.widget.Toolbar): android.widget.TextView;
						public static getSecondaryActionMenuItemView(toolbar: androidx.appcompat.widget.Toolbar): android.view.View;
						public static getNavigationIconButton(toolbar: androidx.appcompat.widget.Toolbar): android.widget.ImageButton;
						public static getActionMenuView(toolbar: androidx.appcompat.widget.Toolbar): androidx.appcompat.widget.ActionMenuView;
						public static getActionMenuItemView(toolbar: androidx.appcompat.widget.Toolbar, menuItemId: number): androidx.appcompat.view.menu.ActionMenuItemView;
						public static getSubtitleTextView(toolbar: androidx.appcompat.widget.Toolbar): android.widget.TextView;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class TouchObserverFrameLayout extends android.widget.FrameLayout {
						public static class: java.lang.Class<com.google.android.material.internal.TouchObserverFrameLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public onInterceptTouchEvent(ev: android.view.MotionEvent): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public setOnTouchListener(l: android.view.View.OnTouchListener): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public setOnTouchListener(onTouchListener: android.view.View.OnTouchListener): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ViewGroupOverlayApi14 extends com.google.android.material.internal.ViewOverlayApi14 implements com.google.android.material.internal.ViewGroupOverlayImpl {
						public static class: java.lang.Class<com.google.android.material.internal.ViewGroupOverlayApi14>;
						public remove(drawable: android.graphics.drawable.Drawable): void;
						public remove(view: android.view.View): void;
						public remove(param0: android.graphics.drawable.Drawable): void;
						public add(param0: android.graphics.drawable.Drawable): void;
						public add(drawable: android.graphics.drawable.Drawable): void;
						public add(view: android.view.View): void;
						public add(param0: android.view.View): void;
						public remove(param0: android.view.View): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ViewGroupOverlayApi18 extends java.lang.Object implements com.google.android.material.internal.ViewGroupOverlayImpl {
						public static class: java.lang.Class<com.google.android.material.internal.ViewGroupOverlayApi18>;
						public remove(drawable: android.graphics.drawable.Drawable): void;
						public remove(view: android.view.View): void;
						public remove(param0: android.graphics.drawable.Drawable): void;
						public add(param0: android.graphics.drawable.Drawable): void;
						public add(drawable: android.graphics.drawable.Drawable): void;
						public add(view: android.view.View): void;
						public add(param0: android.view.View): void;
						public remove(param0: android.view.View): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ViewGroupOverlayImpl extends java.lang.Object implements com.google.android.material.internal.ViewOverlayImpl {
						public static class: java.lang.Class<com.google.android.material.internal.ViewGroupOverlayImpl>;
						/**
						 * Constructs a new instance of the com.google.android.material.internal.ViewGroupOverlayImpl interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							add(param0: android.view.View): void;
							remove(param0: android.view.View): void;
							add(param0: android.graphics.drawable.Drawable): void;
							remove(param0: android.graphics.drawable.Drawable): void;
						});
						public constructor();
						public remove(param0: android.graphics.drawable.Drawable): void;
						public add(param0: android.graphics.drawable.Drawable): void;
						public add(param0: android.view.View): void;
						public remove(param0: android.view.View): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ViewOverlayApi14 extends java.lang.Object implements com.google.android.material.internal.ViewOverlayImpl {
						public static class: java.lang.Class<com.google.android.material.internal.ViewOverlayApi14>;
						public overlayViewGroup: com.google.android.material.internal.ViewOverlayApi14.OverlayViewGroup;
						public remove(drawable: android.graphics.drawable.Drawable): void;
						public remove(param0: android.graphics.drawable.Drawable): void;
						public add(param0: android.graphics.drawable.Drawable): void;
						public add(drawable: android.graphics.drawable.Drawable): void;
					}
					export module ViewOverlayApi14 {
						export class OverlayViewGroup extends android.view.ViewGroup {
							public static class: java.lang.Class<com.google.android.material.internal.ViewOverlayApi14.OverlayViewGroup>;
							public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
							public addView(child: android.view.View, index: number): void;
							public addView(child: android.view.View, width: number, height: number): void;
							public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
							public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
							public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
							public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
							public childDrawableStateChanged(param0: android.view.View): void;
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
							public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
							public clearChildFocus(param0: android.view.View): void;
							public remove(drawable: android.graphics.drawable.Drawable): void;
							public onLayout(changed: boolean, l: number, t: number, r: number, b: number): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public verifyDrawable(who: android.graphics.drawable.Drawable): boolean;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
							public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
							public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
							public focusSearch(direction: number): android.view.View;
							public focusableViewAvailable(v: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public focusSearch(focused: android.view.View, direction: number): android.view.View;
							public childDrawableStateChanged(child: android.view.View): void;
							public removeView(view: android.view.View): void;
							public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public add(child: android.view.View): void;
							public showContextMenuForChild(originalView: android.view.View): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
							public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
							public requestTransparentRegion(param0: android.view.View): void;
							public add(drawable: android.graphics.drawable.Drawable): void;
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
							public getParentForAccessibility(): android.view.ViewParent;
							public invalidateChildInParentFast(left: number, top: number, dirty: android.graphics.Rect): android.view.ViewParent;
							public getTextDirection(): number;
							public isLayoutRequested(): boolean;
							public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public sendAccessibilityEvent(eventType: number): void;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
							public requestChildFocus(child: android.view.View, focused: android.view.View): void;
							public remove(view: android.view.View): void;
							public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public dispatchTouchEvent(ev: android.view.MotionEvent): boolean;
							public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							/** @deprecated */
							public requestFitSystemWindows(): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
							public addView(child: android.view.View): void;
							public bringChildToFront(param0: android.view.View): void;
							public requestTransparentRegion(child: android.view.View): void;
							public recomputeViewAttributes(child: android.view.View): void;
							public clearChildFocus(child: android.view.View): void;
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
							public requestFitSystemWindows(): void;
							public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
							public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
							public getTextAlignment(): number;
							public bringChildToFront(child: android.view.View): void;
							public onStopNestedScroll(child: android.view.View): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public dispatchDraw(canvas: android.graphics.Canvas): void;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public createContextMenu(menu: android.view.ContextMenu): void;
							public sendAccessibilityEvent(param0: number): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
							public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
							public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ViewOverlayApi18 extends java.lang.Object implements com.google.android.material.internal.ViewOverlayImpl {
						public static class: java.lang.Class<com.google.android.material.internal.ViewOverlayApi18>;
						public remove(drawable: android.graphics.drawable.Drawable): void;
						public remove(param0: android.graphics.drawable.Drawable): void;
						public add(param0: android.graphics.drawable.Drawable): void;
						public add(drawable: android.graphics.drawable.Drawable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ViewOverlayImpl extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.ViewOverlayImpl>;
						/**
						 * Constructs a new instance of the com.google.android.material.internal.ViewOverlayImpl interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							add(param0: android.graphics.drawable.Drawable): void;
							remove(param0: android.graphics.drawable.Drawable): void;
						});
						public constructor();
						public remove(param0: android.graphics.drawable.Drawable): void;
						public add(param0: android.graphics.drawable.Drawable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class ViewUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.ViewUtils>;
						public static EDGE_TO_EDGE_FLAGS: number;
						public static removeOnGlobalLayoutListener(view: android.view.View, victim: android.view.ViewTreeObserver.OnGlobalLayoutListener): void;
						public static doOnApplyWindowInsets(view: android.view.View, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number, listener: com.google.android.material.internal.ViewUtils.OnApplyWindowInsetsListener): void;
						public static isLayoutRtl(view: android.view.View): boolean;
						public static removeOnGlobalLayoutListener(viewTreeObserver: android.view.ViewTreeObserver, victim: android.view.ViewTreeObserver.OnGlobalLayoutListener): void;
						public static calculateOffsetRectFromBounds(view: android.view.View, offsetView: android.view.View): android.graphics.Rect;
						public static hideKeyboard(view: android.view.View): void;
						public static requestFocusAndShowKeyboard(view: android.view.View): void;
						public static getBackgroundColor(view: android.view.View): java.lang.Integer;
						public static calculateRectFromBounds(view: android.view.View): android.graphics.Rect;
						public static calculateRectFromBounds(view: android.view.View, offsetY: number): android.graphics.Rect;
						public static requestFocusAndShowKeyboard(view: android.view.View, useWindowInsetsController: boolean): void;
						public static getContentViewOverlay(view: android.view.View): com.google.android.material.internal.ViewOverlayImpl;
						public static doOnApplyWindowInsets(view: android.view.View, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number): void;
						public static hideKeyboard(view: android.view.View, useWindowInsetsController: boolean): void;
						public static getChildren(view: android.view.View): java.util.List<android.view.View>;
						public static requestApplyInsetsWhenAttached(view: android.view.View): void;
						public static getContentView(view: android.view.View): android.view.ViewGroup;
						public static dpToPx(context: android.content.Context, dp: number): number;
						public static setBoundsFromRect(view: android.view.View, rect: android.graphics.Rect): void;
						public static parseTintMode(value: number, defaultMode: android.graphics.PorterDuff.Mode): android.graphics.PorterDuff.Mode;
						public static getOverlay(view: android.view.View): com.google.android.material.internal.ViewOverlayImpl;
						public static doOnApplyWindowInsets(view: android.view.View, listener: com.google.android.material.internal.ViewUtils.OnApplyWindowInsetsListener): void;
						public static showKeyboard(view: android.view.View): void;
						public static getParentAbsoluteElevation(view: android.view.View): number;
						public static addOnGlobalLayoutListener(view: android.view.View, victim: android.view.ViewTreeObserver.OnGlobalLayoutListener): void;
						public static showKeyboard(view: android.view.View, useWindowInsetsController: boolean): void;
					}
					export module ViewUtils {
						export class OnApplyWindowInsetsListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.ViewUtils.OnApplyWindowInsetsListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.internal.ViewUtils$OnApplyWindowInsetsListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onApplyWindowInsets(param0: android.view.View, param1: androidx.core.view.WindowInsetsCompat, param2: com.google.android.material.internal.ViewUtils.RelativePadding): androidx.core.view.WindowInsetsCompat;
							});
							public constructor();
							public onApplyWindowInsets(param0: android.view.View, param1: androidx.core.view.WindowInsetsCompat, param2: com.google.android.material.internal.ViewUtils.RelativePadding): androidx.core.view.WindowInsetsCompat;
						}
						export class RelativePadding extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.ViewUtils.RelativePadding>;
							public start: number;
							public top: number;
							public end: number;
							public bottom: number;
							public constructor(start: number, top: number, end: number, bottom: number);
							public applyToView(view: android.view.View): void;
							public constructor(other: com.google.android.material.internal.ViewUtils.RelativePadding);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class VisibilityAwareImageButton extends android.widget.ImageButton {
						public static class: java.lang.Class<com.google.android.material.internal.VisibilityAwareImageButton>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public getUserSetVisibility(): number;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public internalSetVisibility(visibility: number, fromUser: boolean): void;
						public sendAccessibilityEvent(eventType: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setVisibility(visibility: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module internal {
					export class WindowUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.internal.WindowUtils>;
						public static getCurrentWindowBounds(context: android.content.Context): android.graphics.Rect;
					}
					export module WindowUtils {
						export class Api14Impl extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.WindowUtils.Api14Impl>;
						}
						export class Api17Impl extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.WindowUtils.Api17Impl>;
						}
						export class Api30Impl extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.internal.WindowUtils.Api30Impl>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module materialswitch {
					export class MaterialSwitch extends androidx.appcompat.widget.SwitchCompat {
						public static class: java.lang.Class<com.google.android.material.materialswitch.MaterialSwitch>;
						public setTrackTintList(tintList: android.content.res.ColorStateList): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public onCreateDrawableState(extraSpace: number): number[];
						public setThumbTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onCreateDrawableState(param0: number): number[];
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public getTrackDrawable(): android.graphics.drawable.Drawable;
						public setTrackDecorationDrawable(trackDecoration: android.graphics.drawable.Drawable): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public setChecked(param0: boolean): void;
						public getTrackDecorationDrawable(): android.graphics.drawable.Drawable;
						public setTrackDecorationTintList(tintList: android.content.res.ColorStateList): void;
						public setThumbIconSize(size: number): void;
						public sendAccessibilityEvent(eventType: number): void;
						public setThumbTintList(param0: android.content.res.ColorStateList): void;
						public setThumbDrawable(param0: android.graphics.drawable.Drawable): void;
						public invalidate(): void;
						public setTrackTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidate(dirty: android.graphics.Rect): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public toggle(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setThumbDrawable(drawable: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setTrackDecorationTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public getTrackDecorationTintList(): android.content.res.ColorStateList;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public setTrackDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getThumbIconTintList(): android.content.res.ColorStateList;
						public setThumbIconTintList(tintList: android.content.res.ColorStateList): void;
						public setTrackDecorationResource(resId: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidate(l: number, t: number, r: number, b: number): void;
						public getThumbIconTintMode(): android.graphics.PorterDuff.Mode;
						public isChecked(): boolean;
						public setThumbIconTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setTrackTintList(param0: android.content.res.ColorStateList): void;
						public setThumbTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setThumbIconResource(resId: number): void;
						public getThumbTintList(): android.content.res.ColorStateList;
						public getThumbIconSize(): number;
						public setTrackTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public setThumbIconDrawable(icon: android.graphics.drawable.Drawable): void;
						public setTrackDrawable(track: android.graphics.drawable.Drawable): void;
						public getThumbIconDrawable(): android.graphics.drawable.Drawable;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setThumbTintList(tintList: android.content.res.ColorStateList): void;
						public getTrackDecorationTintMode(): android.graphics.PorterDuff.Mode;
						public getTrackTintList(): android.content.res.ColorStateList;
						public getThumbDrawable(): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module math {
					export class MathUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.math.MathUtils>;
						public static DEFAULT_EPSILON: number;
						public static geq(a: number, b: number, epsilon: number): boolean;
						public static dist(x1: number, y1: number, x2: number, y2: number): number;
						public static distanceToFurthestCorner(pointX: number, pointY: number, rectLeft: number, rectTop: number, rectRight: number, rectBottom: number): number;
						public static lerp(start: number, stop: number, amount: number): number;
						public static floorMod(x: number, y: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module motion {
					export abstract class MaterialBackAnimationHelper<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.motion.MaterialBackAnimationHelper<any>>;
						public view: V;
						public hideDurationMax: number;
						public hideDurationMin: number;
						public cancelDuration: number;
						public onCancelBackProgress(): androidx.activity.BackEventCompat;
						public interpolateProgress(progress: number): number;
						public onStartBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public constructor(view: V);
						public onUpdateBackProgress(backEvent: androidx.activity.BackEventCompat): androidx.activity.BackEventCompat;
						public onHandleBackInvoked(): androidx.activity.BackEventCompat;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module motion {
					export class MaterialBackHandler extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.motion.MaterialBackHandler>;
						/**
						 * Constructs a new instance of the com.google.android.material.motion.MaterialBackHandler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							startBackProgress(param0: androidx.activity.BackEventCompat): void;
							updateBackProgress(param0: androidx.activity.BackEventCompat): void;
							handleBackInvoked(): void;
							cancelBackProgress(): void;
						});
						public constructor();
						public startBackProgress(param0: androidx.activity.BackEventCompat): void;
						public handleBackInvoked(): void;
						public updateBackProgress(param0: androidx.activity.BackEventCompat): void;
						public cancelBackProgress(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module motion {
					export class MaterialBackOrchestrator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.motion.MaterialBackOrchestrator>;
						public shouldListenForBackCallbacks(): boolean;
						public constructor(backHandler: com.google.android.material.motion.MaterialBackHandler, view: android.view.View);
						public stopListeningForBackCallbacks(): void;
						public startListeningForBackCallbacksWithPriorityOverlay(): void;
						public startListeningForBackCallbacks(): void;
						public constructor(backHandlerView: android.view.View);
					}
					export module MaterialBackOrchestrator {
						export class Api33BackCallbackDelegate extends java.lang.Object implements com.google.android.material.motion.MaterialBackOrchestrator.BackCallbackDelegate {
							public static class: java.lang.Class<com.google.android.material.motion.MaterialBackOrchestrator.Api33BackCallbackDelegate>;
							public stopListeningForBackCallbacks(view: android.view.View): void;
							public startListeningForBackCallbacks(backHandler: com.google.android.material.motion.MaterialBackHandler, view: android.view.View, priorityOverlay: boolean): void;
							public stopListeningForBackCallbacks(param0: android.view.View): void;
							public startListeningForBackCallbacks(param0: com.google.android.material.motion.MaterialBackHandler, param1: android.view.View, param2: boolean): void;
						}
						export class Api34BackCallbackDelegate extends com.google.android.material.motion.MaterialBackOrchestrator.Api33BackCallbackDelegate {
							public static class: java.lang.Class<com.google.android.material.motion.MaterialBackOrchestrator.Api34BackCallbackDelegate>;
							public stopListeningForBackCallbacks(view: android.view.View): void;
							public startListeningForBackCallbacks(backHandler: com.google.android.material.motion.MaterialBackHandler, view: android.view.View, priorityOverlay: boolean): void;
							public stopListeningForBackCallbacks(param0: android.view.View): void;
							public startListeningForBackCallbacks(param0: com.google.android.material.motion.MaterialBackHandler, param1: android.view.View, param2: boolean): void;
						}
						export class BackCallbackDelegate extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.motion.MaterialBackOrchestrator.BackCallbackDelegate>;
							/**
							 * Constructs a new instance of the com.google.android.material.motion.MaterialBackOrchestrator$BackCallbackDelegate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								startListeningForBackCallbacks(param0: com.google.android.material.motion.MaterialBackHandler, param1: android.view.View, param2: boolean): void;
								stopListeningForBackCallbacks(param0: android.view.View): void;
							});
							public constructor();
							public stopListeningForBackCallbacks(param0: android.view.View): void;
							public startListeningForBackCallbacks(param0: com.google.android.material.motion.MaterialBackHandler, param1: android.view.View, param2: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module motion {
					export class MaterialBottomContainerBackHelper extends com.google.android.material.motion.MaterialBackAnimationHelper<android.view.View> {
						public static class: java.lang.Class<com.google.android.material.motion.MaterialBottomContainerBackHelper>;
						public startBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public finishBackProgressNotPersistent(backEvent: androidx.activity.BackEventCompat, animatorListener: android.animation.Animator.AnimatorListener): void;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public constructor(view: any);
						public finishBackProgressPersistent(backEvent: androidx.activity.BackEventCompat, animatorListener: android.animation.Animator.AnimatorListener): void;
						public constructor(view: android.view.View);
						public updateBackProgress(progress: number): void;
						public cancelBackProgress(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module motion {
					export class MaterialMainContainerBackHelper extends com.google.android.material.motion.MaterialBackAnimationHelper<android.view.View> {
						public static class: java.lang.Class<com.google.android.material.motion.MaterialMainContainerBackHelper>;
						public constructor(view: any);
						public startBackProgress(touchY: number, collapsedView: android.view.View): void;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat, collapsedView: android.view.View, collapsedCornerSize: number): void;
						public updateBackProgress(progress: number, leftSwipeEdge: boolean, touchY: number, collapsedCornerSize: number): void;
						public startBackProgress(backEvent: androidx.activity.BackEventCompat, collapsedView: android.view.View): void;
						public cancelBackProgress(collapsedView: android.view.View): void;
						public getExpandedCornerSize(): number;
						public constructor(view: android.view.View);
						public getInitialHideToClipBounds(): android.graphics.Rect;
						public finishBackProgress(duration: number, param1: android.view.View): void;
						public getInitialHideFromClipBounds(): android.graphics.Rect;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module motion {
					export class MaterialSideContainerBackHelper extends com.google.android.material.motion.MaterialBackAnimationHelper<android.view.View> {
						public static class: java.lang.Class<com.google.android.material.motion.MaterialSideContainerBackHelper>;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat, gravity: number): void;
						public startBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public finishBackProgress(backEvent: androidx.activity.BackEventCompat, gravity: number, animatorListener: android.animation.Animator.AnimatorListener, finishAnimatorUpdateListener: android.animation.ValueAnimator.AnimatorUpdateListener): void;
						public constructor(view: any);
						public constructor(view: android.view.View);
						public updateBackProgress(progress: number, leftSwipeEdge: boolean, gravity: number): void;
						public cancelBackProgress(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module motion {
					export class MotionUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.motion.MotionUtils>;
						public static resolveThemeDuration(context: android.content.Context, attrResId: number, defaultDuration: number): number;
						public static resolveThemeInterpolator(context: android.content.Context, attrResId: number, defaultInterpolator: android.animation.TimeInterpolator): android.animation.TimeInterpolator;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigation {
					export class DrawerLayoutUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.navigation.DrawerLayoutUtils>;
						public static getScrimCloseAnimatorListener(drawerLayout: androidx.drawerlayout.widget.DrawerLayout, drawerView: android.view.View): android.animation.Animator.AnimatorListener;
						public static getScrimCloseAnimatorUpdateListener(drawerLayout: androidx.drawerlayout.widget.DrawerLayout): android.animation.ValueAnimator.AnimatorUpdateListener;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigation {
					export abstract class NavigationBarItemView extends android.widget.FrameLayout implements androidx.appcompat.view.menu.MenuView.ItemView {
						public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarItemView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setTextAppearanceActive(activeTextAppearance: number): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public setItemBackground(background: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public getItemLayoutResId(): number;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public initialize(itemData: androidx.appcompat.view.menu.MenuItemImpl, menuType: number): void;
						public setEnabled(enabled: boolean): void;
						public canResolveTextDirection(): boolean;
						public dispatchTouchEvent(ev: android.view.MotionEvent): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public setShifting(shifting: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public setShortcut(param0: boolean, param1: string): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public setActiveIndicatorResizeable(resizeable: boolean): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setTextAppearanceInactive(inactiveTextAppearance: number): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public getSuggestedMinimumHeight(): number;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setTitle(title: string): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public getActiveIndicatorDrawable(): android.graphics.drawable.Drawable;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public setItemBackground(background: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public setChecked(checked: boolean): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setCheckable(checkable: boolean): void;
						public setActiveIndicatorEnabled(enabled: boolean): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setActiveIndicatorHeight(height: number): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public setEnabled(param0: boolean): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setIconTintList(tint: android.content.res.ColorStateList): void;
						public getItemData(): androidx.appcompat.view.menu.MenuItemImpl;
						public setIconSize(iconSize: number): void;
						public setTextAppearanceActiveBoldEnabled(isBold: boolean): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setIcon(iconDrawable: android.graphics.drawable.Drawable): void;
						public setItemPaddingBottom(paddingBottom: number): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public getItemDefaultMarginResId(): number;
						public sendAccessibilityEvent(param0: number): void;
						public showsIcon(): boolean;
						public onCreateDrawableState(extraSpace: number): number[];
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public setActiveIndicatorWidth(width: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public prefersCondensedTitle(): boolean;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public setActiveIndicatorMarginHorizontal(marginHorizontal: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public setIcon(param0: android.graphics.drawable.Drawable): void;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public setTitle(param0: string): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setCheckable(param0: boolean): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setItemPosition(position: number): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public getItemPosition(): number;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getSuggestedMinimumWidth(): number;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public setItemRippleColor(itemRippleColor: android.content.res.ColorStateList): void;
						public setActiveIndicatorLabelPadding(activeIndicatorLabelPadding: number): void;
						public getBadge(): com.google.android.material.badge.BadgeDrawable;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public setLabelVisibilityMode(mode: number): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public setActiveIndicatorDrawable(activeIndicatorDrawable: android.graphics.drawable.Drawable): void;
						public clearChildFocus(param0: android.view.View): void;
						public getItemBackgroundResId(): number;
						public childDrawableStateChanged(child: android.view.View): void;
						public setTextColor(color: android.content.res.ColorStateList): void;
						public initialize(param0: androidx.appcompat.view.menu.MenuItemImpl, param1: number): void;
						public setItemPaddingTop(paddingTop: number): void;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public setShortcut(showShortcut: boolean, shortcutKey: string): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
					export module NavigationBarItemView {
						export class ActiveIndicatorTransform extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarItemView.ActiveIndicatorTransform>;
							public calculateScaleY(progress: number, targetValue: number): number;
							public updateForProgress(progress: number, targetValue: number, indicator: android.view.View): void;
							public calculateAlpha(progress: number, targetValue: number): number;
							public calculateScaleX(progress: number, targetValue: number): number;
						}
						export class ActiveIndicatorUnlabeledTransform extends com.google.android.material.navigation.NavigationBarItemView.ActiveIndicatorTransform {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarItemView.ActiveIndicatorUnlabeledTransform>;
							public calculateScaleY(progress: number, targetValue: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigation {
					export class NavigationBarMenu extends androidx.appcompat.view.menu.MenuBuilder {
						public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarMenu>;
						public addInternal(param0: number, param1: number, param2: number, param3: string): android.view.MenuItem;
						public addSubMenu(group: number, id: number, categoryOrder: number, title: string): android.view.SubMenu;
						public addInternal(group: number, id: number, categoryOrder: number, title: string): android.view.MenuItem;
						public setGroupDividerEnabled(param0: boolean): void;
						public addSubMenu(param0: number): android.view.SubMenu;
						public addSubMenu(param0: number, param1: number, param2: number, param3: string): android.view.SubMenu;
						public constructor(context: android.content.Context, viewClass: java.lang.Class<any>, maxItemCount: number);
						public addSubMenu(param0: number, param1: number, param2: number, param3: number): android.view.SubMenu;
						public getMaxItemCount(): number;
						public addSubMenu(param0: string): android.view.SubMenu;
						public constructor(param0: android.content.Context);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigation {
					export abstract class NavigationBarMenuView extends android.view.ViewGroup implements androidx.appcompat.view.menu.MenuView {
						public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarMenuView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public createNavigationBarItemView(param0: android.content.Context): com.google.android.material.navigation.NavigationBarItemView;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSelectedItemPosition(): number;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public setItemActiveIndicatorResizeable(resizeable: boolean): void;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public getItemActiveIndicatorColor(): android.content.res.ColorStateList;
						public updateMenuView(): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public setItemTextColor(color: android.content.res.ColorStateList): void;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setLabelVisibilityMode(labelVisibilityMode: number): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public setItemActiveIndicatorEnabled(enabled: boolean): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public setItemBackground(background: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						/** @deprecated */
						public getItemBackgroundRes(): number;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public setItemTextAppearanceActive(textAppearanceRes: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public getSelectedItemId(): number;
						public getItemActiveIndicatorShapeAppearance(): com.google.android.material.shape.ShapeAppearanceModel;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public setItemActiveIndicatorShapeAppearance(shapeAppearance: com.google.android.material.shape.ShapeAppearanceModel): void;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public initialize(param0: androidx.appcompat.view.menu.MenuBuilder): void;
						public requestFitSystemWindows(): void;
						public getItemActiveIndicatorMarginHorizontal(): number;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public getItemActiveIndicatorWidth(): number;
						public getItemPaddingTop(): number;
						public setItemTextAppearanceInactive(textAppearanceRes: number): void;
						public getMenu(): androidx.appcompat.view.menu.MenuBuilder;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setIconTintList(tint: android.content.res.ColorStateList): void;
						public getItemTextColor(): android.content.res.ColorStateList;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setItemPaddingBottom(paddingBottom: number): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public getIconTintList(): android.content.res.ColorStateList;
						public setItemOnTouchListener(menuItemId: number, onTouchListener: android.view.View.OnTouchListener): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public setItemBackgroundRes(background: number): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getItemRippleColor(): android.content.res.ColorStateList;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getItemIconSize(): number;
						public getBadge(menuItemId: number): com.google.android.material.badge.BadgeDrawable;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public getItemActiveIndicatorEnabled(): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public getItemActiveIndicatorHeight(): number;
						public focusableViewAvailable(v: android.view.View): void;
						public setPresenter(presenter: com.google.android.material.navigation.NavigationBarPresenter): void;
						public initialize(menu: androidx.appcompat.view.menu.MenuBuilder): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public getWindowAnimations(): number;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setItemActiveIndicatorMarginHorizontal(marginHorizontal: number): void;
						public isItemActiveIndicatorResizeable(): boolean;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public setActiveIndicatorLabelPadding(activeIndicatorLabelPadding: number): void;
						public setItemRippleColor(itemRippleColor: android.content.res.ColorStateList): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public buildMenuView(): void;
						public setItemTextAppearanceActiveBoldEnabled(isBold: boolean): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public getItemBackground(): android.graphics.drawable.Drawable;
						public getItemTextAppearanceInactive(): number;
						public setItemActiveIndicatorWidth(width: number): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public getItemPaddingBottom(): number;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public getLabelVisibilityMode(): number;
						public setItemActiveIndicatorHeight(height: number): void;
						public getActiveIndicatorLabelPadding(): number;
						public setItemActiveIndicatorColor(csl: android.content.res.ColorStateList): void;
						public setItemPaddingTop(paddingTop: number): void;
						public findItemView(menuItemId: number): com.google.android.material.navigation.NavigationBarItemView;
						public setItemIconSize(iconSize: number): void;
						public isShifting(labelVisibilityMode: number, childCount: number): boolean;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public createDefaultColorStateList(baseColorThemeAttr: number): android.content.res.ColorStateList;
						public getItemTextAppearanceActive(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigation {
					export class NavigationBarPresenter extends java.lang.Object implements androidx.appcompat.view.menu.MenuPresenter {
						public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarPresenter>;
						public setCallback(param0: androidx.appcompat.view.menu.MenuPresenter.Callback): void;
						public flagActionItems(): boolean;
						public onSubMenuSelected(param0: androidx.appcompat.view.menu.SubMenuBuilder): boolean;
						public setCallback(cb: androidx.appcompat.view.menu.MenuPresenter.Callback): void;
						public collapseItemActionView(menu: androidx.appcompat.view.menu.MenuBuilder, item: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public collapseItemActionView(param0: androidx.appcompat.view.menu.MenuBuilder, param1: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public setMenuView(menuView: com.google.android.material.navigation.NavigationBarMenuView): void;
						public getMenuView(root: android.view.ViewGroup): androidx.appcompat.view.menu.MenuView;
						public onSaveInstanceState(): android.os.Parcelable;
						public updateMenuView(param0: boolean): void;
						public expandItemActionView(param0: androidx.appcompat.view.menu.MenuBuilder, param1: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public initForMenu(param0: android.content.Context, param1: androidx.appcompat.view.menu.MenuBuilder): void;
						public onCloseMenu(menu: androidx.appcompat.view.menu.MenuBuilder, allMenusAreClosing: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): androidx.appcompat.view.menu.MenuView;
						public expandItemActionView(menu: androidx.appcompat.view.menu.MenuBuilder, item: androidx.appcompat.view.menu.MenuItemImpl): boolean;
						public constructor();
						public onSubMenuSelected(subMenu: androidx.appcompat.view.menu.SubMenuBuilder): boolean;
						public initForMenu(context: android.content.Context, menu: androidx.appcompat.view.menu.MenuBuilder): void;
						public getId(): number;
						public setId(id: number): void;
						public updateMenuView(cleared: boolean): void;
						public setUpdateSuspended(updateSuspended: boolean): void;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public onCloseMenu(param0: androidx.appcompat.view.menu.MenuBuilder, param1: boolean): void;
					}
					export module NavigationBarPresenter {
						export class SavedState extends java.lang.Object implements android.os.Parcelable {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarPresenter.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.navigation.NavigationBarPresenter.SavedState>;
							public describeContents(): number;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigation {
					export abstract class NavigationBarView extends android.widget.FrameLayout {
						public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarView>;
						public static LABEL_VISIBILITY_AUTO: number;
						public static LABEL_VISIBILITY_SELECTED: number;
						public static LABEL_VISIBILITY_LABELED: number;
						public static LABEL_VISIBILITY_UNLABELED: number;
						public setOnItemSelectedListener(listener: com.google.android.material.navigation.NavigationBarView.OnItemSelectedListener): void;
						public isLayoutRequested(): boolean;
						public setItemIconSizeRes(iconSizeRes: number): void;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public setItemBackgroundResource(resId: number): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public getPresenter(): com.google.android.material.navigation.NavigationBarPresenter;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setItemTextColor(textColor: android.content.res.ColorStateList): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onSaveInstanceState(): android.os.Parcelable;
						public isItemActiveIndicatorEnabled(): boolean;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public inflateMenu(resId: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getMaxItemCount(): number;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public getItemActiveIndicatorColor(): android.content.res.ColorStateList;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setLabelVisibilityMode(labelVisibilityMode: number): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public setItemActiveIndicatorEnabled(enabled: boolean): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public setItemBackground(background: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public setItemTextAppearanceActive(textAppearanceRes: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public getSelectedItemId(): number;
						public getItemActiveIndicatorShapeAppearance(): com.google.android.material.shape.ShapeAppearanceModel;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public setItemActiveIndicatorShapeAppearance(shapeAppearance: com.google.android.material.shape.ShapeAppearanceModel): void;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public setSelectedItemId(itemId: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public getItemActiveIndicatorMarginHorizontal(): number;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public getItemActiveIndicatorWidth(): number;
						public getItemPaddingTop(): number;
						public setItemActiveIndicatorMarginHorizontal(horizontalMargin: number): void;
						public setItemTextAppearanceInactive(textAppearanceRes: number): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public getItemTextColor(): android.content.res.ColorStateList;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setItemPaddingBottom(paddingBottom: number): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public setOnItemReselectedListener(listener: com.google.android.material.navigation.NavigationBarView.OnItemReselectedListener): void;
						public setItemIconTintList(tint: android.content.res.ColorStateList): void;
						public requestTransparentRegion(child: android.view.View): void;
						public setItemOnTouchListener(menuItemId: number, onTouchListener: android.view.View.OnTouchListener): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getItemRippleColor(): android.content.res.ColorStateList;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getItemIconSize(): number;
						public getBadge(menuItemId: number): com.google.android.material.badge.BadgeDrawable;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public getItemActiveIndicatorHeight(): number;
						public focusableViewAvailable(v: android.view.View): void;
						/** @deprecated */
						public getItemBackgroundResource(): number;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public getMenuView(): androidx.appcompat.view.menu.MenuView;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public setItemRippleColor(itemRippleColor: android.content.res.ColorStateList): void;
						public setActiveIndicatorLabelPadding(activeIndicatorLabelPadding: number): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public setItemTextAppearanceActiveBoldEnabled(isBold: boolean): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public getItemBackground(): android.graphics.drawable.Drawable;
						public getItemTextAppearanceInactive(): number;
						public setItemActiveIndicatorWidth(width: number): void;
						public removeBadge(menuItemId: number): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public getItemPaddingBottom(): number;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public getLabelVisibilityMode(): number;
						public setElevation(elevation: number): void;
						public createNavigationBarMenuView(param0: android.content.Context): com.google.android.material.navigation.NavigationBarMenuView;
						public setItemActiveIndicatorHeight(height: number): void;
						public getOrCreateBadge(menuItemId: number): com.google.android.material.badge.BadgeDrawable;
						public getActiveIndicatorLabelPadding(): number;
						public setItemActiveIndicatorColor(csl: android.content.res.ColorStateList): void;
						public setItemPaddingTop(paddingTop: number): void;
						public setItemIconSize(iconSize: number): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getMenu(): android.view.Menu;
						public getItemIconTintList(): android.content.res.ColorStateList;
						public getItemTextAppearanceActive(): number;
					}
					export module NavigationBarView {
						export class LabelVisibility extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarView.LabelVisibility>;
							/**
							 * Constructs a new instance of the com.google.android.material.navigation.NavigationBarView$LabelVisibility interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class OnItemReselectedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarView.OnItemReselectedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.navigation.NavigationBarView$OnItemReselectedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onNavigationItemReselected(param0: android.view.MenuItem): void;
							});
							public constructor();
							public onNavigationItemReselected(param0: android.view.MenuItem): void;
						}
						export class OnItemSelectedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarView.OnItemSelectedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.navigation.NavigationBarView$OnItemSelectedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onNavigationItemSelected(param0: android.view.MenuItem): boolean;
							});
							public constructor();
							public onNavigationItemSelected(param0: android.view.MenuItem): boolean;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationBarView.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.navigation.NavigationBarView.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public constructor(superState: android.os.Parcelable);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public constructor(source: android.os.Parcel, loader: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
							public constructor(param0: android.os.Parcel);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigation {
					export class NavigationView extends com.google.android.material.internal.ScrimInsetsFrameLayout implements com.google.android.material.motion.MaterialBackHandler {
						public static class: java.lang.Class<com.google.android.material.navigation.NavigationView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public setBottomInsetScrimEnabled(enabled: boolean): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public setItemBackgroundResource(resId: number): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setItemTextColor(textColor: android.content.res.ColorStateList): void;
						public setCheckedItem(checkedItem: android.view.MenuItem): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onSaveInstanceState(): android.os.Parcelable;
						public dispatchDraw(canvas: android.graphics.Canvas): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public inflateMenu(resId: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public onInsetsChanged(insets: androidx.core.view.WindowInsetsCompat): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public isBottomInsetScrimEnabled(): boolean;
						public setCheckedItem(id: number): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public setSubheaderInsetStart(subheaderInsetStart: number): void;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public setItemTextAppearance(resId: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public getHeaderCount(): number;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public startBackProgress(param0: androidx.activity.BackEventCompat): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public inflateHeaderView(res: number): android.view.View;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public getHeaderView(index: number): android.view.View;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getItemVerticalPadding(): number;
						public focusSearch(direction: number): android.view.View;
						public onMeasure(widthSpec: number, heightSpec: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setItemIconPadding(padding: number): void;
						public setDividerInsetEnd(dividerInsetEnd: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public isTopInsetScrimEnabled(): boolean;
						public setItemMaxLines(itemMaxLines: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public getDividerInsetStart(): number;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public getSubheaderInsetEnd(): number;
						public getCheckedItem(): android.view.MenuItem;
						public handleBackInvoked(): void;
						public updateBackProgress(param0: androidx.activity.BackEventCompat): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public getItemTextColor(): android.content.res.ColorStateList;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public setItemHorizontalPaddingResource(paddingResource: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public setTopInsetScrimEnabled(enabled: boolean): void;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public startBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public getItemIconPadding(): number;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public cancelBackProgress(): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public setItemIconTintList(tint: android.content.res.ColorStateList): void;
						public requestTransparentRegion(child: android.view.View): void;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getItemMaxLines(): number;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public setItemHorizontalPadding(padding: number): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public setOverScrollMode(overScrollMode: number): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setSubheaderInsetEnd(subheaderInsetEnd: number): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public onRestoreInstanceState(savedState: android.os.Parcelable): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public setItemTextAppearanceActiveBoldEnabled(isBold: boolean): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public getItemBackground(): android.graphics.drawable.Drawable;
						public setItemIconPaddingResource(paddingResource: number): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public setForceCompatClippingEnabled(enabled: boolean): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public removeHeaderView(view: android.view.View): void;
						public getSubheaderInsetStart(): number;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public getItemHorizontalPadding(): number;
						public setItemVerticalPadding(padding: number): void;
						public setDividerInsetStart(dividerInsetStart: number): void;
						public onDetachedFromWindow(): void;
						public setElevation(elevation: number): void;
						public setItemBackground(itemBackground: android.graphics.drawable.Drawable): void;
						public setItemIconSize(iconSize: number): void;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public setNavigationItemSelectedListener(listener: com.google.android.material.navigation.NavigationView.OnNavigationItemSelectedListener): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getMenu(): android.view.Menu;
						public getDividerInsetEnd(): number;
						public setItemVerticalPaddingResource(paddingResource: number): void;
						public getItemIconTintList(): android.content.res.ColorStateList;
						public addHeaderView(view: android.view.View): void;
					}
					export module NavigationView {
						export class OnNavigationItemSelectedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationView.OnNavigationItemSelectedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.navigation.NavigationView$OnNavigationItemSelectedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onNavigationItemSelected(param0: android.view.MenuItem): boolean;
							});
							public constructor();
							public onNavigationItemSelected(param0: android.view.MenuItem): boolean;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.navigation.NavigationView.SavedState>;
							public menuState: android.os.Bundle;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.navigation.NavigationView.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public writeToParcel(dest: android.os.Parcel, flags: number): void;
							public constructor(_in_: android.os.Parcel, loader: java.lang.ClassLoader);
							public constructor(superState: android.os.Parcelable);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public constructor(param0: android.os.Parcel);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigationrail {
					export class NavigationRailItemView extends com.google.android.material.navigation.NavigationBarItemView {
						public static class: java.lang.Class<com.google.android.material.navigationrail.NavigationRailItemView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public getItemLayoutResId(): number;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public initialize(itemData: androidx.appcompat.view.menu.MenuItemImpl, menuType: number): void;
						public canResolveTextDirection(): boolean;
						public setEnabled(enabled: boolean): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public setShortcut(param0: boolean, param1: string): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setTitle(title: string): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public setChecked(checked: boolean): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public setCheckable(checkable: boolean): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public setEnabled(param0: boolean): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public getItemData(): androidx.appcompat.view.menu.MenuItemImpl;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setIcon(iconDrawable: android.graphics.drawable.Drawable): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public getItemDefaultMarginResId(): number;
						public sendAccessibilityEvent(param0: number): void;
						public showsIcon(): boolean;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public prefersCondensedTitle(): boolean;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public setIcon(param0: android.graphics.drawable.Drawable): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public setTitle(param0: string): void;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setCheckable(param0: boolean): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public initialize(param0: androidx.appcompat.view.menu.MenuItemImpl, param1: number): void;
						public setShortcut(showShortcut: boolean, shortcutKey: string): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigationrail {
					export class NavigationRailMenuView extends com.google.android.material.navigation.NavigationBarMenuView {
						public static class: java.lang.Class<com.google.android.material.navigationrail.NavigationRailMenuView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public createNavigationBarItemView(param0: android.content.Context): com.google.android.material.navigation.NavigationBarItemView;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getItemMinimumHeight(): number;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public initialize(param0: androidx.appcompat.view.menu.MenuBuilder): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public createNavigationBarItemView(context: android.content.Context): com.google.android.material.navigation.NavigationBarItemView;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public initialize(menu: androidx.appcompat.view.menu.MenuBuilder): void;
						public setItemMinimumHeight(minHeight: number): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public getWindowAnimations(): number;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module navigationrail {
					export class NavigationRailView extends com.google.android.material.navigation.NavigationBarView {
						public static class: java.lang.Class<com.google.android.material.navigationrail.NavigationRailView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getMaxItemCount(): number;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getItemMinimumHeight(): number;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public getMenuGravity(): number;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public removeHeaderView(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public addHeaderView(layoutRes: number): void;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public createNavigationBarMenuView(context: android.content.Context): com.google.android.material.navigationrail.NavigationRailMenuView;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public addHeaderView(headerView: android.view.View): void;
						public focusableViewAvailable(v: android.view.View): void;
						public setItemMinimumHeight(minHeight: number): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setMenuGravity(gravity: number): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public getHeaderView(): android.view.View;
						public createNavigationBarMenuView(param0: android.content.Context): com.google.android.material.navigation.NavigationBarMenuView;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class AnimatorDurationScaleProvider extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.progressindicator.AnimatorDurationScaleProvider>;
						public static setDefaultSystemAnimatorDurationScale(scale: number): void;
						public constructor();
						public getSystemAnimatorDurationScale(contentResolver: android.content.ContentResolver): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export abstract class BaseProgressIndicator<S>  extends android.widget.ProgressBar {
						public static class: java.lang.Class<com.google.android.material.progressindicator.BaseProgressIndicator<any>>;
						public static SHOW_NONE: number;
						public static SHOW_OUTWARD: number;
						public static SHOW_INWARD: number;
						public static HIDE_NONE: number;
						public static HIDE_OUTWARD: number;
						public static HIDE_INWARD: number;
						public getProgressDrawable(): android.graphics.drawable.Drawable;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setIndeterminateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public getCurrentDrawable(): android.graphics.drawable.Drawable;
						public setProgressDrawable(d: android.graphics.drawable.Drawable): void;
						public getTrackColor(): number;
						public getTrackCornerRadius(): number;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getIndeterminateDrawable(): android.graphics.drawable.Drawable;
						public getProgressDrawable(): com.google.android.material.progressindicator.DeterminateDrawable<any>;
						public getHideAnimationBehavior(): number;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public setIndicatorColor(...indicatorColors: number[]): void;
						public setIndeterminate(indeterminate: boolean): void;
						public setTrackThickness(trackThickness: number): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public applyNewVisibility(animate: boolean): void;
						public onWindowVisibilityChanged(visibility: number): void;
						public sendAccessibilityEvent(eventType: number): void;
						public setTrackCornerRadius(trackCornerRadius: number): void;
						public invalidate(): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidate(dirty: android.graphics.Rect): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public setIndeterminateDrawable(d: android.graphics.drawable.Drawable): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
						public setShowAnimationBehavior(showAnimationBehavior: number): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public onAttachedToWindow(): void;
						public getIndicatorColor(): number[];
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setHideAnimationBehavior(hideAnimationBehavior: number): void;
						public onDraw(canvas: android.graphics.Canvas): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidate(l: number, t: number, r: number, b: number): void;
						public setProgressDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setAnimatorDurationScaleProvider(animatorDurationScaleProvider: com.google.android.material.progressindicator.AnimatorDurationScaleProvider): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getShowAnimationBehavior(): number;
						public onDetachedFromWindow(): void;
						public hide(): void;
						public setProgressCompat(progress: number, animated: boolean): void;
						public setVisibilityAfterHide(visibility: number): void;
						public setTrackColor(trackColor: number): void;
						public getIndeterminateDrawable(): com.google.android.material.progressindicator.IndeterminateDrawable<any>;
						public onVisibilityChanged(changedView: android.view.View, visibility: number): void;
						public show(): void;
						public setProgress(progress: number): void;
						public setProgress(progress: number, animate: boolean): void;
						public getTrackThickness(): number;
					}
					export module BaseProgressIndicator {
						export class HideAnimationBehavior extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.progressindicator.BaseProgressIndicator.HideAnimationBehavior>;
							/**
							 * Constructs a new instance of the com.google.android.material.progressindicator.BaseProgressIndicator$HideAnimationBehavior interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class ShowAnimationBehavior extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.progressindicator.BaseProgressIndicator.ShowAnimationBehavior>;
							/**
							 * Constructs a new instance of the com.google.android.material.progressindicator.BaseProgressIndicator$ShowAnimationBehavior interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export abstract class BaseProgressIndicatorSpec extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.progressindicator.BaseProgressIndicatorSpec>;
						public trackThickness: number;
						public trackCornerRadius: number;
						public indicatorColors: number[];
						public trackColor: number;
						public showAnimationBehavior: number;
						public hideAnimationBehavior: number;
						public isHideAnimationEnabled(): boolean;
						public isShowAnimationEnabled(): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class CircularDrawingDelegate extends com.google.android.material.progressindicator.DrawingDelegate<com.google.android.material.progressindicator.CircularProgressIndicatorSpec> {
						public static class: java.lang.Class<com.google.android.material.progressindicator.CircularDrawingDelegate>;
						public getPreferredWidth(): number;
						public constructor(spec: com.google.android.material.progressindicator.CircularProgressIndicatorSpec);
						public getPreferredHeight(): number;
						public adjustCanvas(canvas: android.graphics.Canvas, bounds: android.graphics.Rect, trackThicknessFraction: number): void;
						public constructor(spec: any);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class CircularIndeterminateAnimatorDelegate extends com.google.android.material.progressindicator.IndeterminateAnimatorDelegate<android.animation.ObjectAnimator> {
						public static class: java.lang.Class<com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate>;
						public registerAnimatorsCompleteCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public constructor(segmentCount: number);
						public registerAnimatorsCompleteCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public unregisterAnimatorsCompleteCallback(): void;
						public invalidateSpecValues(): void;
						public constructor(spec: com.google.android.material.progressindicator.CircularProgressIndicatorSpec);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class CircularProgressIndicator extends com.google.android.material.progressindicator.BaseProgressIndicator<com.google.android.material.progressindicator.CircularProgressIndicatorSpec> {
						public static class: java.lang.Class<com.google.android.material.progressindicator.CircularProgressIndicator>;
						public static DEF_STYLE_RES: number;
						public static INDICATOR_DIRECTION_CLOCKWISE: number;
						public static INDICATOR_DIRECTION_COUNTERCLOCKWISE: number;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setIndicatorDirection(indicatorDirection: number): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public getIndicatorInset(): number;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public getIndicatorSize(): number;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setIndicatorSize(indicatorSize: number): void;
						public setTrackThickness(trackThickness: number): void;
						public setIndicatorInset(indicatorInset: number): void;
						public sendAccessibilityEvent(eventType: number): void;
						public getIndicatorDirection(): number;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
					}
					export module CircularProgressIndicator {
						export class IndicatorDirection extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.progressindicator.CircularProgressIndicator.IndicatorDirection>;
							/**
							 * Constructs a new instance of the com.google.android.material.progressindicator.CircularProgressIndicator$IndicatorDirection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class CircularProgressIndicatorSpec extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec {
						public static class: java.lang.Class<com.google.android.material.progressindicator.CircularProgressIndicatorSpec>;
						public indicatorSize: number;
						public indicatorInset: number;
						public indicatorDirection: number;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class DeterminateDrawable<S>  extends com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange {
						public static class: java.lang.Class<com.google.android.material.progressindicator.DeterminateDrawable<any>>;
						public onLevelChange(level: number): boolean;
						public draw(param0: android.graphics.Canvas): void;
						public draw(canvas: android.graphics.Canvas): void;
						public unregisterAnimationCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): boolean;
						public getIntrinsicWidth(): number;
						public getIntrinsicHeight(): number;
						public removeSpringAnimationEndListener(listener: androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationEndListener): void;
						public unregisterAnimationCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): boolean;
						public jumpToCurrentState(): void;
						public static createLinearDrawable(context: android.content.Context, spec: com.google.android.material.progressindicator.LinearProgressIndicatorSpec): com.google.android.material.progressindicator.DeterminateDrawable<com.google.android.material.progressindicator.LinearProgressIndicatorSpec>;
						public addSpringAnimationEndListener(listener: androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationEndListener): void;
						public registerAnimationCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public static createCircularDrawable(context: android.content.Context, spec: com.google.android.material.progressindicator.CircularProgressIndicatorSpec): com.google.android.material.progressindicator.DeterminateDrawable<com.google.android.material.progressindicator.CircularProgressIndicatorSpec>;
						public clearAnimationCallbacks(): void;
						public registerAnimationCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export abstract class DrawableWithAnimatedVisibilityChange extends android.graphics.drawable.Drawable implements androidx.vectordrawable.graphics.drawable.Animatable2Compat {
						public static class: java.lang.Class<com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange>;
						public unregisterAnimationCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): boolean;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						public setVisible(visible: boolean, restart: boolean): boolean;
						public unregisterAnimationCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): boolean;
						public getAlpha(): number;
						public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
						public getOpacity(): number;
						public isHiding(): boolean;
						public stop(): void;
						public isRunning(): boolean;
						public setAlpha(param0: number): void;
						public hideNow(): boolean;
						public registerAnimationCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public start(): void;
						public setVisible(visible: boolean, restart: boolean, animate: boolean): boolean;
						public setAlpha(alpha: number): void;
						public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
						public clearAnimationCallbacks(): void;
						public registerAnimationCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public isShowing(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export abstract class DrawingDelegate<S>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.progressindicator.DrawingDelegate<any>>;
						public drawable: com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange;
						public constructor(spec: S);
						public registerDrawable(drawable: com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export abstract class IndeterminateAnimatorDelegate<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.progressindicator.IndeterminateAnimatorDelegate<any>>;
						public drawable: com.google.android.material.progressindicator.IndeterminateDrawable<any>;
						public segmentPositions: number[];
						public segmentColors: number[];
						public constructor(segmentCount: number);
						public registerDrawable(drawable: com.google.android.material.progressindicator.IndeterminateDrawable<any>): void;
						public registerAnimatorsCompleteCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public unregisterAnimatorsCompleteCallback(): void;
						public invalidateSpecValues(): void;
						public getFractionInRange(playtime: number, start: number, duration: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class IndeterminateDrawable<S>  extends com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange {
						public static class: java.lang.Class<com.google.android.material.progressindicator.IndeterminateDrawable<any>>;
						public draw(param0: android.graphics.Canvas): void;
						public draw(canvas: android.graphics.Canvas): void;
						public unregisterAnimationCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): boolean;
						public static createCircularDrawable(context: android.content.Context, spec: com.google.android.material.progressindicator.CircularProgressIndicatorSpec): com.google.android.material.progressindicator.IndeterminateDrawable<com.google.android.material.progressindicator.CircularProgressIndicatorSpec>;
						public getIntrinsicWidth(): number;
						public getIntrinsicHeight(): number;
						public registerAnimationCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public static createLinearDrawable(context: android.content.Context, spec: com.google.android.material.progressindicator.LinearProgressIndicatorSpec): com.google.android.material.progressindicator.IndeterminateDrawable<com.google.android.material.progressindicator.LinearProgressIndicatorSpec>;
						public unregisterAnimationCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): boolean;
						public clearAnimationCallbacks(): void;
						public registerAnimationCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class LinearDrawingDelegate extends com.google.android.material.progressindicator.DrawingDelegate<com.google.android.material.progressindicator.LinearProgressIndicatorSpec> {
						public static class: java.lang.Class<com.google.android.material.progressindicator.LinearDrawingDelegate>;
						public getPreferredWidth(): number;
						public constructor(spec: com.google.android.material.progressindicator.LinearProgressIndicatorSpec);
						public getPreferredHeight(): number;
						public adjustCanvas(canvas: android.graphics.Canvas, bounds: android.graphics.Rect, trackThicknessFraction: number): void;
						public constructor(spec: any);
						public fillIndicator(canvas: android.graphics.Canvas, paint: android.graphics.Paint, startFraction: number, endFraction: number, color: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class LinearIndeterminateContiguousAnimatorDelegate extends com.google.android.material.progressindicator.IndeterminateAnimatorDelegate<android.animation.ObjectAnimator> {
						public static class: java.lang.Class<com.google.android.material.progressindicator.LinearIndeterminateContiguousAnimatorDelegate>;
						public registerAnimatorsCompleteCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public constructor(segmentCount: number);
						public startAnimator(): void;
						public requestCancelAnimatorAfterCurrentCycle(): void;
						public registerAnimatorsCompleteCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public unregisterAnimatorsCompleteCallback(): void;
						public invalidateSpecValues(): void;
						public constructor(spec: com.google.android.material.progressindicator.LinearProgressIndicatorSpec);
						public cancelAnimatorImmediately(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class LinearIndeterminateDisjointAnimatorDelegate extends com.google.android.material.progressindicator.IndeterminateAnimatorDelegate<android.animation.ObjectAnimator> {
						public static class: java.lang.Class<com.google.android.material.progressindicator.LinearIndeterminateDisjointAnimatorDelegate>;
						public registerAnimatorsCompleteCallback(callback: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public constructor(segmentCount: number);
						public startAnimator(): void;
						public requestCancelAnimatorAfterCurrentCycle(): void;
						public registerAnimatorsCompleteCallback(param0: androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback): void;
						public unregisterAnimatorsCompleteCallback(): void;
						public invalidateSpecValues(): void;
						public cancelAnimatorImmediately(): void;
						public constructor(context: android.content.Context, spec: com.google.android.material.progressindicator.LinearProgressIndicatorSpec);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class LinearProgressIndicator extends com.google.android.material.progressindicator.BaseProgressIndicator<com.google.android.material.progressindicator.LinearProgressIndicatorSpec> {
						public static class: java.lang.Class<com.google.android.material.progressindicator.LinearProgressIndicator>;
						public static DEF_STYLE_RES: number;
						public static INDETERMINATE_ANIMATION_TYPE_CONTIGUOUS: number;
						public static INDETERMINATE_ANIMATION_TYPE_DISJOINT: number;
						public static INDICATOR_DIRECTION_LEFT_TO_RIGHT: number;
						public static INDICATOR_DIRECTION_RIGHT_TO_LEFT: number;
						public static INDICATOR_DIRECTION_START_TO_END: number;
						public static INDICATOR_DIRECTION_END_TO_START: number;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public getIndeterminateAnimationType(): number;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setIndicatorDirection(indicatorDirection: number): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setIndicatorColor(...indicatorColors: number[]): void;
						public setProgressCompat(progress: number, animated: boolean): void;
						public sendAccessibilityEvent(eventType: number): void;
						public getIndicatorDirection(): number;
						public setTrackCornerRadius(trackCornerRadius: number): void;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public setIndeterminateAnimationType(indeterminateAnimationType: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(dr: android.graphics.drawable.Drawable): void;
					}
					export module LinearProgressIndicator {
						export class IndeterminateAnimationType extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.progressindicator.LinearProgressIndicator.IndeterminateAnimationType>;
							/**
							 * Constructs a new instance of the com.google.android.material.progressindicator.LinearProgressIndicator$IndeterminateAnimationType interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class IndicatorDirection extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.progressindicator.LinearProgressIndicator.IndicatorDirection>;
							/**
							 * Constructs a new instance of the com.google.android.material.progressindicator.LinearProgressIndicator$IndicatorDirection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module progressindicator {
					export class LinearProgressIndicatorSpec extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec {
						public static class: java.lang.Class<com.google.android.material.progressindicator.LinearProgressIndicatorSpec>;
						public indeterminateAnimationType: number;
						public indicatorDirection: number;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module radiobutton {
					export class MaterialRadioButton extends androidx.appcompat.widget.AppCompatRadioButton {
						public static class: java.lang.Class<com.google.android.material.radiobutton.MaterialRadioButton>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public setUseMaterialThemeColors(useMaterialThemeColors: boolean): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public setSupportButtonTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public isEmojiCompatEnabled(): boolean;
						public onAttachedToWindow(): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public setChecked(checked: boolean): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public setSupportButtonTintList(param0: android.content.res.ColorStateList): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getSupportButtonTintMode(): android.graphics.PorterDuff.Mode;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public isChecked(): boolean;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSupportButtonTintList(): android.content.res.ColorStateList;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public isUseMaterialThemeColors(): boolean;
						public setChecked(param0: boolean): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public sendAccessibilityEvent(eventType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public toggle(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module resources {
					export class CancelableFontCallback extends com.google.android.material.resources.TextAppearanceFontCallback {
						public static class: java.lang.Class<com.google.android.material.resources.CancelableFontCallback>;
						public constructor();
						public constructor(applyFont: com.google.android.material.resources.CancelableFontCallback.ApplyFont, fallbackFont: android.graphics.Typeface);
						public cancel(): void;
						public onFontRetrievalFailed(reason: number): void;
						public onFontRetrievalFailed(param0: number): void;
						public onFontRetrieved(param0: android.graphics.Typeface, param1: boolean): void;
						public onFontRetrieved(font: android.graphics.Typeface, fontResolvedSynchronously: boolean): void;
					}
					export module CancelableFontCallback {
						export class ApplyFont extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.resources.CancelableFontCallback.ApplyFont>;
							/**
							 * Constructs a new instance of the com.google.android.material.resources.CancelableFontCallback$ApplyFont interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								apply(param0: android.graphics.Typeface): void;
							});
							public constructor();
							public apply(param0: android.graphics.Typeface): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module resources {
					export class MaterialAttributes extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.resources.MaterialAttributes>;
						public static resolveMinimumAccessibleTouchTarget(context: android.content.Context): number;
						public static resolveTypedValueOrThrow(context: android.content.Context, attributeResId: number, errorMessageComponent: string): android.util.TypedValue;
						public static resolveOrThrow(context: android.content.Context, attributeResId: number, errorMessageComponent: string): number;
						public constructor();
						public static resolveBoolean(context: android.content.Context, attributeResId: number, defaultValue: boolean): boolean;
						public static resolveTypedValueOrThrow(componentView: android.view.View, attributeResId: number): android.util.TypedValue;
						public static resolveDimension(context: android.content.Context, attributeResId: number, defaultDimenResId: number): number;
						public static resolveBooleanOrThrow(context: android.content.Context, attributeResId: number, errorMessageComponent: string): boolean;
						public static resolveInteger(context: android.content.Context, attributeResId: number, defaultValue: number): number;
						public static resolve(context: android.content.Context, attributeResId: number): android.util.TypedValue;
						public static resolveOrThrow(componentView: android.view.View, attributeResId: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module resources {
					export class MaterialResources extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.resources.MaterialResources>;
						public static getColorStateList(context: android.content.Context, attributes: android.content.res.TypedArray, index: number): android.content.res.ColorStateList;
						public static getUnscaledTextSize(context: android.content.Context, textAppearance: number, defValue: number): number;
						public static getDrawable(context: android.content.Context, attributes: android.content.res.TypedArray, index: number): android.graphics.drawable.Drawable;
						public static getDimensionPixelSize(context: android.content.Context, attributes: android.content.res.TypedArray, index: number, defaultValue: number): number;
						public static getTextAppearance(context: android.content.Context, attributes: android.content.res.TypedArray, index: number): com.google.android.material.resources.TextAppearance;
						public static isFontScaleAtLeast1_3(context: android.content.Context): boolean;
						public static getColorStateList(context: android.content.Context, attributes: androidx.appcompat.widget.TintTypedArray, index: number): android.content.res.ColorStateList;
						public static isFontScaleAtLeast2_0(context: android.content.Context): boolean;
						public static getFontScale(context: android.content.Context): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module resources {
					export class TextAppearance extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.resources.TextAppearance>;
						public textColorHint: android.content.res.ColorStateList;
						public textColorLink: android.content.res.ColorStateList;
						public shadowColor: android.content.res.ColorStateList;
						public fontFamily: string;
						public textStyle: number;
						public typeface: number;
						public textAllCaps: boolean;
						public shadowDx: number;
						public shadowDy: number;
						public shadowRadius: number;
						public hasLetterSpacing: boolean;
						public letterSpacing: number;
						public updateDrawState(context: android.content.Context, textPaint: android.text.TextPaint, callback: com.google.android.material.resources.TextAppearanceFontCallback): void;
						public getFontAsync(context: android.content.Context, callback: com.google.android.material.resources.TextAppearanceFontCallback): void;
						public getFontAsync(context: android.content.Context, textPaint: android.text.TextPaint, callback: com.google.android.material.resources.TextAppearanceFontCallback): void;
						public getTextSize(): number;
						public getTextColor(): android.content.res.ColorStateList;
						public constructor(context: android.content.Context, id: number);
						public setTextColor(textColor: android.content.res.ColorStateList): void;
						public updateMeasureState(context: android.content.Context, textPaint: android.text.TextPaint, callback: com.google.android.material.resources.TextAppearanceFontCallback): void;
						public getFont(context: android.content.Context): android.graphics.Typeface;
						public updateTextPaintMeasureState(context: android.content.Context, textPaint: android.text.TextPaint, typeface: android.graphics.Typeface): void;
						public setTextSize(textSize: number): void;
						public getFallbackFont(): android.graphics.Typeface;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module resources {
					export class TextAppearanceConfig extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.resources.TextAppearanceConfig>;
						public constructor();
						public static setShouldLoadFontSynchronously(flag: boolean): void;
						public static shouldLoadFontSynchronously(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module resources {
					export abstract class TextAppearanceFontCallback extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.resources.TextAppearanceFontCallback>;
						public constructor();
						public onFontRetrievalFailed(param0: number): void;
						public onFontRetrieved(param0: android.graphics.Typeface, param1: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module resources {
					export class TypefaceUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.resources.TypefaceUtils>;
						public static maybeCopyWithFontWeightAdjustment(configuration: android.content.res.Configuration, typeface: android.graphics.Typeface): android.graphics.Typeface;
						public static maybeCopyWithFontWeightAdjustment(context: android.content.Context, typeface: android.graphics.Typeface): android.graphics.Typeface;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module ripple {
					export class RippleDrawableCompat extends android.graphics.drawable.Drawable implements com.google.android.material.shape.Shapeable, androidx.core.graphics.drawable.TintAwareDrawable {
						public static class: java.lang.Class<com.google.android.material.ripple.RippleDrawableCompat>;
						public draw(canvas: android.graphics.Canvas): void;
						public onBoundsChange(bounds: android.graphics.Rect): void;
						public onStateChange(state: number[]): boolean;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						public setTintList(param0: android.content.res.ColorStateList): void;
						public setTintList(tintList: android.content.res.ColorStateList): void;
						public constructor(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel);
						public getConstantState(): android.graphics.drawable.Drawable.ConstantState;
						public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public isStateful(): boolean;
						public setTintList(tint: android.content.res.ColorStateList): void;
						public onStateChange(stateSet: number[]): boolean;
						public setAlpha(alpha: number): void;
						public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
						public draw(param0: android.graphics.Canvas): void;
						public constructor();
						public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setTint(param0: number): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public mutate(): android.graphics.drawable.Drawable;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
						public getOpacity(): number;
						public setAlpha(param0: number): void;
						public mutate(): com.google.android.material.ripple.RippleDrawableCompat;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public setTint(tintColor: number): void;
					}
					export module RippleDrawableCompat {
						export class RippleDrawableCompatState extends android.graphics.drawable.Drawable.ConstantState {
							public static class: java.lang.Class<com.google.android.material.ripple.RippleDrawableCompat.RippleDrawableCompatState>;
							public constructor();
							public newDrawable(res: android.content.res.Resources): android.graphics.drawable.Drawable;
							public newDrawable(): com.google.android.material.ripple.RippleDrawableCompat;
							public newDrawable(): android.graphics.drawable.Drawable;
							public constructor(orig: com.google.android.material.ripple.RippleDrawableCompat.RippleDrawableCompatState);
							public constructor(delegate: com.google.android.material.shape.MaterialShapeDrawable);
							public getChangingConfigurations(): number;
							public newDrawable(res: android.content.res.Resources, theme: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module ripple {
					export class RippleUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.ripple.RippleUtils>;
						public static USE_FRAMEWORK_RIPPLE: boolean;
						public static sanitizeRippleDrawableColor(rippleColor: android.content.res.ColorStateList): android.content.res.ColorStateList;
						public static shouldDrawRippleCompat(stateSet: number[]): boolean;
						public static createOvalRippleLollipop(context: android.content.Context, padding: number): android.graphics.drawable.Drawable;
						public static convertToRippleDrawableColor(rippleColor: android.content.res.ColorStateList): android.content.res.ColorStateList;
					}
					export module RippleUtils {
						export class RippleUtilsLollipop extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.ripple.RippleUtils.RippleUtilsLollipop>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module search {
					export class SearchBar extends androidx.appcompat.widget.Toolbar {
						public static class: java.lang.Class<com.google.android.material.search.SearchBar>;
						public isLayoutRequested(): boolean;
						public setStrokeWidth(strokeWidth: number): void;
						public onStopNestedScroll(param0: android.view.View): void;
						public getStrokeColor(): number;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public expand(expandedView: android.view.View, appBarLayout: com.google.android.material.appbar.AppBarLayout, skipAnimation: boolean): boolean;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onSaveInstanceState(): android.os.Parcelable;
						public getHint(): string;
						public setTitle(param0: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public inflateMenu(resId: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setOnLoadAnimationFadeInEnabled(onLoadAnimationFadeInEnabled: boolean): void;
						public onMeasure(param0: number, param1: number): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setNavigationOnClickListener(param0: android.view.View.OnClickListener): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public setSubtitle(subtitle: string): void;
						public getDefaultNavigationIconResource(): number;
						public removeCollapseAnimationListener(listener: android.animation.AnimatorListenerAdapter): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public setTitle(title: string): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public getCornerSize(): number;
						public onAttachedToWindow(): void;
						public getTextView(): android.widget.TextView;
						public addOnLoadAnimationCallback(onLoadAnimationCallback: com.google.android.material.search.SearchBar.OnLoadAnimationCallback): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public removeMenuProvider(param0: androidx.core.view.MenuProvider): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getText(): string;
						public focusSearch(direction: number): android.view.View;
						public addMenuProvider(param0: androidx.core.view.MenuProvider, param1: androidx.lifecycle.LifecycleOwner): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setSubtitle(param0: string): void;
						public addView(child: android.view.View, index: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setSubtitle(param0: number): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setNavigationOnClickListener(listener: android.view.View.OnClickListener): void;
						public setNavigationIcon(navigationIcon: android.graphics.drawable.Drawable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public setText(textResId: number): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public invalidateMenu(): void;
						public clearText(): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getCenterView(): android.view.View;
						public getTextAlignment(): number;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public getDefaultMarginVerticalResource(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public setCenterView(view: android.view.View): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public collapse(expandedView: android.view.View, appBarLayout: com.google.android.material.appbar.AppBarLayout): boolean;
						public isExpanding(): boolean;
						public stopOnLoadAnimation(): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public expand(expandedView: android.view.View, appBarLayout: com.google.android.material.appbar.AppBarLayout): boolean;
						public collapse(expandedView: android.view.View): boolean;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public setStrokeColor(strokeColor: number): void;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public setHint(hint: string): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public isDefaultScrollFlagsEnabled(): boolean;
						public expand(expandedView: android.view.View): boolean;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public setTitle(param0: string): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public isOnLoadAnimationFadeInEnabled(): boolean;
						public removeExpandAnimationListener(listener: android.animation.AnimatorListenerAdapter): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public startOnLoadAnimation(): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public addCollapseAnimationListener(listener: android.animation.AnimatorListenerAdapter): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addMenuProvider(param0: androidx.core.view.MenuProvider): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public isCollapsing(): boolean;
						public getStrokeWidth(): number;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public setNavigationIcon(param0: number): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public removeOnLoadAnimationCallback(onLoadAnimationCallback: com.google.android.material.search.SearchBar.OnLoadAnimationCallback): boolean;
						public collapse(expandedView: android.view.View, appBarLayout: com.google.android.material.appbar.AppBarLayout, skipAnimation: boolean): boolean;
						public childDrawableStateChanged(child: android.view.View): void;
						public inflateMenu(param0: number): void;
						public setDefaultScrollFlagsEnabled(defaultScrollFlagsEnabled: boolean): void;
						public setElevation(elevation: number): void;
						public setText(text: string): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setHint(hintResId: number): void;
						public addExpandAnimationListener(listener: android.animation.AnimatorListenerAdapter): void;
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public setNavigationIcon(param0: android.graphics.drawable.Drawable): void;
						public addMenuProvider(param0: androidx.core.view.MenuProvider, param1: androidx.lifecycle.LifecycleOwner, param2: androidx.lifecycle.Lifecycle.State): void;
					}
					export module SearchBar {
						export abstract class OnLoadAnimationCallback extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.search.SearchBar.OnLoadAnimationCallback>;
							public constructor();
							public onAnimationEnd(): void;
							public onAnimationStart(): void;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.search.SearchBar.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.search.SearchBar.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public writeToParcel(dest: android.os.Parcel, flags: number): void;
							public constructor(source: android.os.Parcel, classLoader: java.lang.ClassLoader);
							public constructor(source: android.os.Parcel);
							public constructor(superState: android.os.Parcelable);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public constructor(param0: android.os.Parcel);
						}
						export class ScrollingViewBehavior extends com.google.android.material.appbar.AppBarLayout.ScrollingViewBehavior {
							public static class: java.lang.Class<com.google.android.material.search.SearchBar.ScrollingViewBehavior>;
							public constructor();
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onDependentViewChanged(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, dependency: android.view.View): boolean;
							public shouldHeaderOverlapScrollingChild(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module search {
					export class SearchBarAnimationHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.search.SearchBarAnimationHelper>;
					}
					export module SearchBarAnimationHelper {
						export class OnLoadAnimationInvocation extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.search.SearchBarAnimationHelper.OnLoadAnimationInvocation>;
							/**
							 * Constructs a new instance of the com.google.android.material.search.SearchBarAnimationHelper$OnLoadAnimationInvocation interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								invoke(param0: com.google.android.material.search.SearchBar.OnLoadAnimationCallback): void;
							});
							public constructor();
							public invoke(param0: com.google.android.material.search.SearchBar.OnLoadAnimationCallback): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module search {
					export class SearchView extends android.widget.FrameLayout implements androidx.coordinatorlayout.widget.CoordinatorLayout.AttachedBehavior, com.google.android.material.motion.MaterialBackHandler {
						public static class: java.lang.Class<com.google.android.material.search.SearchView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public isUseWindowInsetsController(): boolean;
						public addView(child: android.view.View): void;
						public addTransitionListener(transitionListener: com.google.android.material.search.SearchView.TransitionListener): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onSaveInstanceState(): android.os.Parcelable;
						public getHint(): string;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setMenuItemsAnimated(menuItemsAnimated: boolean): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getSearchPrefixText(): string;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public getDefaultNavigationIconResource(): number;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior;
						public setSearchPrefixText(searchPrefixText: string): void;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getText(): android.text.Editable;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isShowing(): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startBackProgress(param0: androidx.activity.BackEventCompat): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public setAutoShowKeyboard(autoShowKeyboard: boolean): void;
						public getToolbar(): androidx.appcompat.widget.Toolbar;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public addView(child: android.view.View, index: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public removeHeaderView(headerView: android.view.View): void;
						public getSoftInputMode(): number;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public setText(textResId: number): void;
						public setModalForAccessibility(isSearchViewModal: boolean): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public clearText(): void;
						public getBehavior(): androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<com.google.android.material.search.SearchView>;
						public handleBackInvoked(): void;
						public updateBackProgress(param0: androidx.activity.BackEventCompat): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getEditText(): android.widget.EditText;
						public requestFocusAndShowKeyboard(): void;
						public getTextAlignment(): number;
						public removeTransitionListener(transitionListener: com.google.android.material.search.SearchView.TransitionListener): void;
						public show(): void;
						public clearFocusAndHideKeyboard(): void;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public startBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public onFinishInflate(): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public setupWithSearchBar(searchBar: com.google.android.material.search.SearchBar): void;
						public cancelBackProgress(): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public setOnMenuItemClickListener(onMenuItemClickListener: androidx.appcompat.widget.Toolbar.OnMenuItemClickListener): void;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public inflateMenu(menuResId: number): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public setHint(hint: string): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public getCurrentTransitionState(): com.google.android.material.search.SearchView.TransitionState;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public addHeaderView(headerView: android.view.View): void;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public setToolbarTouchscreenBlocksFocus(touchscreenBlocksFocus: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public isSetupWithSearchBar(): boolean;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public isAnimatedNavigationIcon(): boolean;
						public isMenuItemsAnimated(): boolean;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public setUseWindowInsetsController(useWindowInsetsController: boolean): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public isAutoShowKeyboard(): boolean;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public setVisible(visible: boolean): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public updateSoftInputMode(): void;
						public setAnimatedNavigationIcon(animatedNavigationIcon: boolean): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setElevation(elevation: number): void;
						public removeAllHeaderViews(): void;
						public hide(): void;
						public setText(text: string): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setHint(hintResId: number): void;
						public getSearchPrefix(): android.widget.TextView;
						public setStatusBarSpacerEnabled(enabled: boolean): void;
					}
					export module SearchView {
						export class Behavior extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<com.google.android.material.search.SearchView> {
							public static class: java.lang.Class<com.google.android.material.search.SearchView.Behavior>;
							public constructor();
							public onDependentViewChanged(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: com.google.android.material.search.SearchView, dependency: android.view.View): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
							public onDependentViewChanged(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): boolean;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.search.SearchView.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.search.SearchView.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public writeToParcel(dest: android.os.Parcel, flags: number): void;
							public constructor(source: android.os.Parcel, classLoader: java.lang.ClassLoader);
							public constructor(source: android.os.Parcel);
							public constructor(superState: android.os.Parcelable);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public constructor(param0: android.os.Parcel);
						}
						export class TransitionListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.search.SearchView.TransitionListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.search.SearchView$TransitionListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onStateChanged(param0: com.google.android.material.search.SearchView, param1: com.google.android.material.search.SearchView.TransitionState, param2: com.google.android.material.search.SearchView.TransitionState): void;
							});
							public constructor();
							public onStateChanged(param0: com.google.android.material.search.SearchView, param1: com.google.android.material.search.SearchView.TransitionState, param2: com.google.android.material.search.SearchView.TransitionState): void;
						}
						export class TransitionState {
							public static class: java.lang.Class<com.google.android.material.search.SearchView.TransitionState>;
							public static HIDING: com.google.android.material.search.SearchView.TransitionState;
							public static HIDDEN: com.google.android.material.search.SearchView.TransitionState;
							public static SHOWING: com.google.android.material.search.SearchView.TransitionState;
							public static SHOWN: com.google.android.material.search.SearchView.TransitionState;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static values(): com.google.android.material.search.SearchView.TransitionState[];
							public static valueOf(name: string): com.google.android.material.search.SearchView.TransitionState;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module search {
					export class SearchViewAnimationHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.search.SearchViewAnimationHelper>;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public finishBackProgress(): void;
						public onHandleBackInvoked(): androidx.activity.BackEventCompat;
						public cancelBackProgress(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shadow {
					export class ShadowDrawableWrapper {
						public static class: java.lang.Class<com.google.android.material.shadow.ShadowDrawableWrapper>;
						public onBoundsChange(bounds: android.graphics.Rect): void;
						public getShadowSize(): number;
						public draw(canvas: android.graphics.Canvas): void;
						public constructor(context: android.content.Context, content: android.graphics.drawable.Drawable, radius: number, shadowSize: number, maxShadowSize: number);
						public setShadowSize(shadowSize: number, maxShadowSize: number): void;
						public getCornerRadius(): number;
						public static calculateHorizontalPadding(maxShadowSize: number, cornerRadius: number, addPaddingForCorners: boolean): number;
						public setShadowSize(size: number): void;
						public getOpacity(): number;
						public setAddPaddingForCorners(addPaddingForCorners: boolean): void;
						public setCornerRadius(radius: number): void;
						public getMinWidth(): number;
						public getMaxShadowSize(): number;
						public setAlpha(alpha: number): void;
						public getPadding(padding: android.graphics.Rect): boolean;
						public static calculateVerticalPadding(maxShadowSize: number, cornerRadius: number, addPaddingForCorners: boolean): number;
						public setMaxShadowSize(size: number): void;
						public getMinHeight(): number;
						public setRotation(rotation: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shadow {
					export class ShadowRenderer extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shadow.ShadowRenderer>;
						public setShadowColor(color: number): void;
						public constructor();
						public constructor(color: number);
						public drawInnerCornerShadow(canvas: android.graphics.Canvas, matrix: android.graphics.Matrix, bounds: android.graphics.RectF, elevation: number, startAngle: number, sweepAngle: number, cornerPosition: number[]): void;
						public drawEdgeShadow(canvas: android.graphics.Canvas, transform: android.graphics.Matrix, bounds: android.graphics.RectF, elevation: number): void;
						public getShadowPaint(): android.graphics.Paint;
						public drawCornerShadow(canvas: android.graphics.Canvas, matrix: android.graphics.Matrix, bounds: android.graphics.RectF, elevation: number, startAngle: number, sweepAngle: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shadow {
					export class ShadowViewDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shadow.ShadowViewDelegate>;
						/**
						 * Constructs a new instance of the com.google.android.material.shadow.ShadowViewDelegate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getRadius(): number;
							setShadowPadding(param0: number, param1: number, param2: number, param3: number): void;
							setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
							isCompatPaddingEnabled(): boolean;
						});
						public constructor();
						public isCompatPaddingEnabled(): boolean;
						public getRadius(): number;
						public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
						public setShadowPadding(param0: number, param1: number, param2: number, param3: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class AbsoluteCornerSize extends java.lang.Object implements com.google.android.material.shape.CornerSize {
						public static class: java.lang.Class<com.google.android.material.shape.AbsoluteCornerSize>;
						public getCornerSize(bounds: android.graphics.RectF): number;
						public equals(obj: any): boolean;
						public getCornerSize(): number;
						public constructor(size: number);
						public hashCode(): number;
						public equals(o: any): boolean;
						public getCornerSize(param0: android.graphics.RectF): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class AdjustedCornerSize extends java.lang.Object implements com.google.android.material.shape.CornerSize {
						public static class: java.lang.Class<com.google.android.material.shape.AdjustedCornerSize>;
						public getCornerSize(bounds: android.graphics.RectF): number;
						public constructor(adjustment: number, other: com.google.android.material.shape.CornerSize);
						public equals(obj: any): boolean;
						public hashCode(): number;
						public equals(o: any): boolean;
						public getCornerSize(param0: android.graphics.RectF): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ClampedCornerSize extends java.lang.Object implements com.google.android.material.shape.CornerSize {
						public static class: java.lang.Class<com.google.android.material.shape.ClampedCornerSize>;
						public getCornerSize(bounds: android.graphics.RectF): number;
						public equals(obj: any): boolean;
						public static createFromCornerSize(cornerSize: com.google.android.material.shape.AbsoluteCornerSize): com.google.android.material.shape.ClampedCornerSize;
						public hashCode(): number;
						public equals(o: any): boolean;
						public getCornerSize(param0: android.graphics.RectF): number;
						public constructor(target: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class CornerFamily extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.google.android.material.shape.CornerFamily>;
						/**
						 * Constructs a new instance of the com.google.android.material.shape.CornerFamily interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public static ROUNDED: number;
						public static CUT: number;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class CornerSize extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.CornerSize>;
						/**
						 * Constructs a new instance of the com.google.android.material.shape.CornerSize interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getCornerSize(param0: android.graphics.RectF): number;
						});
						public constructor();
						public getCornerSize(param0: android.graphics.RectF): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class CornerTreatment extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.CornerTreatment>;
						public constructor();
						public getCornerPath(shapePath: com.google.android.material.shape.ShapePath, angle: number, interpolation: number, radius: number): void;
						public getCornerPath(shapePath: com.google.android.material.shape.ShapePath, angle: number, interpolation: number, bounds: android.graphics.RectF, size: com.google.android.material.shape.CornerSize): void;
						/** @deprecated */
						public getCornerPath(angle: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class CutCornerTreatment extends com.google.android.material.shape.CornerTreatment {
						public static class: java.lang.Class<com.google.android.material.shape.CutCornerTreatment>;
						public constructor();
						public getCornerPath(shapePath: com.google.android.material.shape.ShapePath, angle: number, interpolation: number, radius: number): void;
						public getCornerPath(shapePath: com.google.android.material.shape.ShapePath, angle: number, interpolation: number, bounds: android.graphics.RectF, size: com.google.android.material.shape.CornerSize): void;
						/** @deprecated */
						public getCornerPath(angle: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						/** @deprecated */
						public constructor(size: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class EdgeTreatment extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.EdgeTreatment>;
						public constructor();
						/** @deprecated */
						public getEdgePath(length: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public getEdgePath(length: number, center: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class InterpolateOnScrollPositionChangeHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.InterpolateOnScrollPositionChangeHelper>;
						public stopListeningForScrollChanges(viewTreeObserver: android.view.ViewTreeObserver): void;
						public setContainingScrollView(containingScrollView: android.widget.ScrollView): void;
						public startListeningForScrollChanges(viewTreeObserver: android.view.ViewTreeObserver): void;
						public constructor(shapedView: android.view.View, materialShapeDrawable: com.google.android.material.shape.MaterialShapeDrawable, containingScrollView: android.widget.ScrollView);
						public setMaterialShapeDrawable(materialShapeDrawable: com.google.android.material.shape.MaterialShapeDrawable): void;
						public updateInterpolationForScreenPosition(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class MarkerEdgeTreatment extends com.google.android.material.shape.EdgeTreatment {
						public static class: java.lang.Class<com.google.android.material.shape.MarkerEdgeTreatment>;
						public constructor();
						/** @deprecated */
						public getEdgePath(length: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public constructor(radius: number);
						public getEdgePath(length: number, center: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class MaterialShapeDrawable extends android.graphics.drawable.Drawable implements androidx.core.graphics.drawable.TintAwareDrawable, com.google.android.material.shape.Shapeable {
						public static class: java.lang.Class<com.google.android.material.shape.MaterialShapeDrawable>;
						public static SHADOW_COMPAT_MODE_DEFAULT: number;
						public static SHADOW_COMPAT_MODE_NEVER: number;
						public static SHADOW_COMPAT_MODE_ALWAYS: number;
						public setStrokeWidth(strokeWidth: number): void;
						public isElevationOverlayEnabled(): boolean;
						public static createWithElevationOverlay(context: android.content.Context, elevation: number): com.google.android.material.shape.MaterialShapeDrawable;
						public setTintList(param0: android.content.res.ColorStateList): void;
						public getScale(): number;
						public setTintList(tintList: android.content.res.ColorStateList): void;
						public constructor(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel);
						public getConstantState(): android.graphics.drawable.Drawable.ConstantState;
						public setShadowVerticalOffset(shadowOffset: number): void;
						public setTintList(tint: android.content.res.ColorStateList): void;
						public setShadowCompatibilityMode(mode: number): void;
						public setUseTintColorForShadow(useTintColorForShadow: boolean): void;
						public setShadowColor(shadowColor: number): void;
						public getShadowOffsetY(): number;
						public getElevation(): number;
						public invalidateSelf(): void;
						public constructor();
						public getBoundsAsRectF(): android.graphics.RectF;
						public setShadowBitmapDrawingEnable(enable: boolean): void;
						public setStroke(strokeWidth: number, strokeColor: number): void;
						public mutate(): android.graphics.drawable.Drawable;
						public getInterpolation(): number;
						public setAlpha(param0: number): void;
						public getStrokeColor(): android.content.res.ColorStateList;
						/** @deprecated */
						public getPathForSize(width: number, height: number, path: android.graphics.Path): void;
						public getStrokeTintList(): android.content.res.ColorStateList;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public getOutline(outline: any): void;
						/** @deprecated */
						public isShadowEnabled(): boolean;
						public getParentAbsoluteElevation(): number;
						public getShadowOffsetX(): number;
						public getTintList(): android.content.res.ColorStateList;
						public setCornerSize(cornerSize: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getPaintStyle(): android.graphics.Paint.Style;
						public setStrokeTint(tintColor: number): void;
						public getPadding(padding: android.graphics.Rect): boolean;
						public requiresCompatShadow(): boolean;
						/** @deprecated */
						public setShadowEnabled(shadowEnabled: boolean): void;
						/** @deprecated */
						public setShadowElevation(shadowElevation: number): void;
						public setZ(z: number): void;
						public drawShape(canvas: android.graphics.Canvas, paint: android.graphics.Paint, path: android.graphics.Path, bounds: android.graphics.RectF): void;
						public getOpacity(): number;
						public getTopRightCornerResolvedSize(): number;
						public getZ(): number;
						public setTranslationZ(translationZ: number): void;
						public setPadding(left: number, top: number, right: number, bottom: number): void;
						public setPaintStyle(paintStyle: android.graphics.Paint.Style): void;
						public getTopLeftCornerResolvedSize(): number;
						/** @deprecated */
						public constructor(shapePathModel: com.google.android.material.shape.ShapePathModel);
						public draw(canvas: android.graphics.Canvas): void;
						public getBottomLeftCornerResolvedSize(): number;
						public onStateChange(state: number[]): boolean;
						public setInterpolation(interpolation: number): void;
						public getShadowCompatRotation(): number;
						public getShadowVerticalOffset(): number;
						public getBottomRightCornerResolvedSize(): number;
						public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public isStateful(): boolean;
						public setStrokeTint(tintList: android.content.res.ColorStateList): void;
						public setStroke(strokeWidth: number, strokeColor: android.content.res.ColorStateList): void;
						public draw(param0: android.graphics.Canvas): void;
						public static createWithElevationOverlay(context: android.content.Context): com.google.android.material.shape.MaterialShapeDrawable;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
						public drawStrokeShape(canvas: android.graphics.Canvas): void;
						public setEdgeIntersectionCheckEnable(enable: boolean): void;
						public getTranslationZ(): number;
						public getShadowCompatibilityMode(): number;
						public setShadowCompatRotation(shadowRotation: number): void;
						public compositeElevationOverlayIfNeeded(backgroundColor: number): number;
						/** @deprecated */
						public setShapedViewModel(shapedViewModel: com.google.android.material.shape.ShapePathModel): void;
						public calculatePathForSize(bounds: android.graphics.RectF, path: android.graphics.Path): void;
						public setParentAbsoluteElevation(parentAbsoluteElevation: number): void;
						public static createWithElevationOverlay(context: android.content.Context, elevation: number, backgroundTint: android.content.res.ColorStateList): com.google.android.material.shape.MaterialShapeDrawable;
						public onBoundsChange(bounds: android.graphics.Rect): void;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						/** @deprecated */
						public getShapedViewModel(): com.google.android.material.shape.ShapePathModel;
						public setCornerSize(cornerSize: com.google.android.material.shape.CornerSize): void;
						public getAlpha(): number;
						public isPointInTransparentRegion(x: number, y: number): boolean;
						public initializeElevationOverlay(context: android.content.Context): void;
						/** @deprecated */
						public setShadowRadius(shadowRadius: number): void;
						public getStrokeWidth(): number;
						public setAlpha(alpha: number): void;
						public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
						public getTransparentRegion(): android.graphics.Region;
						public getResolvedTintColor(): number;
						public setFillColor(fillColor: android.content.res.ColorStateList): void;
						public getShadowRadius(): number;
						public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
						/** @deprecated */
						public getShadowElevation(): number;
						public setTint(param0: number): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setElevation(elevation: number): void;
						public getFillColor(): android.content.res.ColorStateList;
						public isRoundRect(): boolean;
						public setStrokeColor(strokeColor: android.content.res.ColorStateList): void;
						public constructor(drawableState: com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState);
						public isElevationOverlayInitialized(): boolean;
						public setTint(tintColor: number): void;
						public setScale(scale: number): void;
					}
					export module MaterialShapeDrawable {
						export class CompatibilityShadowMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.shape.MaterialShapeDrawable.CompatibilityShadowMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.shape.MaterialShapeDrawable$CompatibilityShadowMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class MaterialShapeDrawableState extends android.graphics.drawable.Drawable.ConstantState {
							public static class: java.lang.Class<com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState>;
							public constructor();
							public newDrawable(res: android.content.res.Resources): android.graphics.drawable.Drawable;
							public constructor(orig: com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState);
							public constructor(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel, elevationOverlayProvider: com.google.android.material.elevation.ElevationOverlayProvider);
							public newDrawable(): android.graphics.drawable.Drawable;
							public getChangingConfigurations(): number;
							public newDrawable(res: android.content.res.Resources, theme: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class MaterialShapeUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.MaterialShapeUtils>;
						public static setElevation(view: android.view.View, elevation: number): void;
						public static setParentAbsoluteElevation(view: android.view.View): void;
						public static setParentAbsoluteElevation(view: android.view.View, materialShapeDrawable: com.google.android.material.shape.MaterialShapeDrawable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class OffsetEdgeTreatment extends com.google.android.material.shape.EdgeTreatment {
						public static class: java.lang.Class<com.google.android.material.shape.OffsetEdgeTreatment>;
						public constructor();
						/** @deprecated */
						public getEdgePath(length: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public getEdgePath(length: number, center: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public constructor(other: com.google.android.material.shape.EdgeTreatment, offset: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class RelativeCornerSize extends java.lang.Object implements com.google.android.material.shape.CornerSize {
						public static class: java.lang.Class<com.google.android.material.shape.RelativeCornerSize>;
						public static createFromCornerSize(bounds: android.graphics.RectF, cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.RelativeCornerSize;
						public getCornerSize(bounds: android.graphics.RectF): number;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public constructor(percent: number);
						public getRelativePercent(): number;
						public equals(o: any): boolean;
						public getCornerSize(param0: android.graphics.RectF): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class RoundedCornerTreatment extends com.google.android.material.shape.CornerTreatment {
						public static class: java.lang.Class<com.google.android.material.shape.RoundedCornerTreatment>;
						/** @deprecated */
						public constructor(radius: number);
						public constructor();
						public getCornerPath(shapePath: com.google.android.material.shape.ShapePath, angle: number, interpolation: number, radius: number): void;
						public getCornerPath(shapePath: com.google.android.material.shape.ShapePath, angle: number, interpolation: number, bounds: android.graphics.RectF, size: com.google.android.material.shape.CornerSize): void;
						/** @deprecated */
						public getCornerPath(angle: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ShapeAppearanceModel extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.ShapeAppearanceModel>;
						public static PILL: com.google.android.material.shape.CornerSize;
						public static builder(): com.google.android.material.shape.ShapeAppearanceModel.Builder;
						public static builder(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number, defaultCornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
						public withTransformedCornerSizes(op: com.google.android.material.shape.ShapeAppearanceModel.CornerSizeUnaryOperator): com.google.android.material.shape.ShapeAppearanceModel;
						public isRoundRect(bounds: android.graphics.RectF): boolean;
						public constructor();
						public getTopEdge(): com.google.android.material.shape.EdgeTreatment;
						public getLeftEdge(): com.google.android.material.shape.EdgeTreatment;
						public static builder(context: android.content.Context, shapeAppearanceResId: number, shapeAppearanceOverlayResId: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
						public getTopRightCorner(): com.google.android.material.shape.CornerTreatment;
						public getBottomLeftCorner(): com.google.android.material.shape.CornerTreatment;
						public withCornerSize(cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel;
						public getTopLeftCornerSize(): com.google.android.material.shape.CornerSize;
						public static builder(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number, defaultCornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
						public withCornerSize(cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel;
						public getTopLeftCorner(): com.google.android.material.shape.CornerTreatment;
						public getTopRightCornerSize(): com.google.android.material.shape.CornerSize;
						public toBuilder(): com.google.android.material.shape.ShapeAppearanceModel.Builder;
						public getBottomEdge(): com.google.android.material.shape.EdgeTreatment;
						public getBottomLeftCornerSize(): com.google.android.material.shape.CornerSize;
						public getBottomRightCorner(): com.google.android.material.shape.CornerTreatment;
						public static builder(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
						public getRightEdge(): com.google.android.material.shape.EdgeTreatment;
						public getBottomRightCornerSize(): com.google.android.material.shape.CornerSize;
					}
					export module ShapeAppearanceModel {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.shape.ShapeAppearanceModel.Builder>;
							public setRightEdge(rightEdge: com.google.android.material.shape.EdgeTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public constructor(other: com.google.android.material.shape.ShapeAppearanceModel);
							public setBottomLeftCorner(cornerFamily: number, cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setAllCornerSizes(cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomLeftCorner(cornerFamily: number, cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomEdge(bottomEdge: com.google.android.material.shape.EdgeTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopLeftCorner(cornerFamily: number, cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopLeftCorner(topLeftCorner: com.google.android.material.shape.CornerTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setAllCornerSizes(cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopRightCorner(cornerFamily: number, cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomRightCornerSize(cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopLeftCornerSize(cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setAllEdges(edgeTreatment: com.google.android.material.shape.EdgeTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public build(): com.google.android.material.shape.ShapeAppearanceModel;
							public setBottomRightCornerSize(cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomLeftCornerSize(cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopLeftCornerSize(cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopLeftCorner(cornerFamily: number, cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setLeftEdge(leftEdge: com.google.android.material.shape.EdgeTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public constructor();
							public setAllCorners(cornerTreatment: com.google.android.material.shape.CornerTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopRightCornerSize(cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomLeftCornerSize(cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomLeftCorner(bottomLeftCorner: com.google.android.material.shape.CornerTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomRightCorner(cornerFamily: number, cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopRightCorner(cornerFamily: number, cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomRightCorner(bottomRightCorner: com.google.android.material.shape.CornerTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopEdge(topEdge: com.google.android.material.shape.EdgeTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setAllCorners(cornerFamily: number, cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopRightCorner(topRightCorner: com.google.android.material.shape.CornerTreatment): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setBottomRightCorner(cornerFamily: number, cornerSize: com.google.android.material.shape.CornerSize): com.google.android.material.shape.ShapeAppearanceModel.Builder;
							public setTopRightCornerSize(cornerSize: number): com.google.android.material.shape.ShapeAppearanceModel.Builder;
						}
						export class CornerSizeUnaryOperator extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.shape.ShapeAppearanceModel.CornerSizeUnaryOperator>;
							/**
							 * Constructs a new instance of the com.google.android.material.shape.ShapeAppearanceModel$CornerSizeUnaryOperator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								apply(param0: com.google.android.material.shape.CornerSize): com.google.android.material.shape.CornerSize;
							});
							public constructor();
							public apply(param0: com.google.android.material.shape.CornerSize): com.google.android.material.shape.CornerSize;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ShapeAppearancePathProvider extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.ShapeAppearancePathProvider>;
						public constructor();
						public static getInstance(): com.google.android.material.shape.ShapeAppearancePathProvider;
						public calculatePath(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel, interpolation: number, bounds: android.graphics.RectF, pathListener: com.google.android.material.shape.ShapeAppearancePathProvider.PathListener, path: android.graphics.Path): void;
						public calculatePath(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel, interpolation: number, bounds: android.graphics.RectF, path: android.graphics.Path): void;
					}
					export module ShapeAppearancePathProvider {
						export class Lazy extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.shape.ShapeAppearancePathProvider.Lazy>;
						}
						export class PathListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.shape.ShapeAppearancePathProvider.PathListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.shape.ShapeAppearancePathProvider$PathListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onCornerPathCreated(param0: com.google.android.material.shape.ShapePath, param1: android.graphics.Matrix, param2: number): void;
								onEdgePathCreated(param0: com.google.android.material.shape.ShapePath, param1: android.graphics.Matrix, param2: number): void;
							});
							public constructor();
							public onCornerPathCreated(param0: com.google.android.material.shape.ShapePath, param1: android.graphics.Matrix, param2: number): void;
							public onEdgePathCreated(param0: com.google.android.material.shape.ShapePath, param1: android.graphics.Matrix, param2: number): void;
						}
						export class ShapeAppearancePathSpec extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.shape.ShapeAppearancePathProvider.ShapeAppearancePathSpec>;
							public shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel;
							public path: android.graphics.Path;
							public bounds: android.graphics.RectF;
							public pathListener: com.google.android.material.shape.ShapeAppearancePathProvider.PathListener;
							public interpolation: number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ShapePath extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.ShapePath>;
						public static ANGLE_LEFT: number;
						public startX: number;
						public startY: number;
						public endX: number;
						public endY: number;
						public currentShadowAngle: number;
						public endShadowAngle: number;
						public constructor();
						public addArc(left: number, top: number, right: number, bottom: number, startAngle: number, sweepAngle: number): void;
						public lineTo(x: number, y: number): void;
						public applyToPath(transform: android.graphics.Matrix, path: android.graphics.Path): void;
						public constructor(startX: number, startY: number);
						public quadToPoint(controlX: number, controlY: number, toX: number, toY: number): void;
						public cubicToPoint(controlX1: number, controlY1: number, controlX2: number, controlY2: number, toX: number, toY: number): void;
						public lineTo(x1: number, y1: number, x2: number, y2: number): void;
						public reset(startX: number, startY: number): void;
						public reset(startX: number, startY: number, shadowStartAngle: number, shadowSweepAngle: number): void;
					}
					export module ShapePath {
						export class ArcShadowOperation extends com.google.android.material.shape.ShapePath.ShadowCompatOperation {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.ArcShadowOperation>;
							public constructor(operation: com.google.android.material.shape.ShapePath.PathArcOperation);
							public draw(transform: android.graphics.Matrix, shadowRenderer: com.google.android.material.shadow.ShadowRenderer, shadowElevation: number, canvas: android.graphics.Canvas): void;
							public draw(param0: android.graphics.Matrix, param1: com.google.android.material.shadow.ShadowRenderer, param2: number, param3: android.graphics.Canvas): void;
							public draw(shadowRenderer: com.google.android.material.shadow.ShadowRenderer, shadowElevation: number, canvas: android.graphics.Canvas): void;
						}
						export class InnerCornerShadowOperation extends com.google.android.material.shape.ShapePath.ShadowCompatOperation {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.InnerCornerShadowOperation>;
							public constructor(operation1: com.google.android.material.shape.ShapePath.PathLineOperation, operation2: com.google.android.material.shape.ShapePath.PathLineOperation, startX: number, startY: number);
							public draw(transform: android.graphics.Matrix, shadowRenderer: com.google.android.material.shadow.ShadowRenderer, shadowElevation: number, canvas: android.graphics.Canvas): void;
							public draw(param0: android.graphics.Matrix, param1: com.google.android.material.shadow.ShadowRenderer, param2: number, param3: android.graphics.Canvas): void;
							public draw(shadowRenderer: com.google.android.material.shadow.ShadowRenderer, shadowElevation: number, canvas: android.graphics.Canvas): void;
						}
						export class LineShadowOperation extends com.google.android.material.shape.ShapePath.ShadowCompatOperation {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.LineShadowOperation>;
							public constructor(operation: com.google.android.material.shape.ShapePath.PathLineOperation, startX: number, startY: number);
							public draw(transform: android.graphics.Matrix, shadowRenderer: com.google.android.material.shadow.ShadowRenderer, shadowElevation: number, canvas: android.graphics.Canvas): void;
							public draw(param0: android.graphics.Matrix, param1: com.google.android.material.shadow.ShadowRenderer, param2: number, param3: android.graphics.Canvas): void;
							public draw(shadowRenderer: com.google.android.material.shadow.ShadowRenderer, shadowElevation: number, canvas: android.graphics.Canvas): void;
						}
						export class PathArcOperation extends com.google.android.material.shape.ShapePath.PathOperation {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.PathArcOperation>;
							public left: number;
							public top: number;
							public right: number;
							public bottom: number;
							public startAngle: number;
							public sweepAngle: number;
							public constructor();
							public applyToPath(param0: android.graphics.Matrix, param1: android.graphics.Path): void;
							public constructor(left: number, top: number, right: number, bottom: number);
							public applyToPath(transform: android.graphics.Matrix, path: android.graphics.Path): void;
						}
						export class PathCubicOperation extends com.google.android.material.shape.ShapePath.PathOperation {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.PathCubicOperation>;
							public constructor();
							public applyToPath(param0: android.graphics.Matrix, param1: android.graphics.Path): void;
							public constructor(controlX1: number, controlY1: number, controlX2: number, controlY2: number, endX: number, endY: number);
							public applyToPath(transform: android.graphics.Matrix, path: android.graphics.Path): void;
						}
						export class PathLineOperation extends com.google.android.material.shape.ShapePath.PathOperation {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.PathLineOperation>;
							public constructor();
							public applyToPath(param0: android.graphics.Matrix, param1: android.graphics.Path): void;
							public applyToPath(transform: android.graphics.Matrix, path: android.graphics.Path): void;
						}
						export abstract class PathOperation extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.PathOperation>;
							public matrix: android.graphics.Matrix;
							public constructor();
							public applyToPath(param0: android.graphics.Matrix, param1: android.graphics.Path): void;
						}
						export class PathQuadOperation extends com.google.android.material.shape.ShapePath.PathOperation {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.PathQuadOperation>;
							public controlX: number;
							public controlY: number;
							public endX: number;
							public endY: number;
							public constructor();
							public applyToPath(param0: android.graphics.Matrix, param1: android.graphics.Path): void;
							public applyToPath(transform: android.graphics.Matrix, path: android.graphics.Path): void;
						}
						export abstract class ShadowCompatOperation extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.shape.ShapePath.ShadowCompatOperation>;
							public draw(param0: android.graphics.Matrix, param1: com.google.android.material.shadow.ShadowRenderer, param2: number, param3: android.graphics.Canvas): void;
							public draw(shadowRenderer: com.google.android.material.shadow.ShadowRenderer, shadowElevation: number, canvas: android.graphics.Canvas): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ShapePathModel extends com.google.android.material.shape.ShapeAppearanceModel {
						public static class: java.lang.Class<com.google.android.material.shape.ShapePathModel>;
						/** @deprecated */
						public setLeftEdge(leftEdge: com.google.android.material.shape.EdgeTreatment): void;
						public constructor();
						/** @deprecated */
						public setBottomRightCorner(bottomRightCorner: com.google.android.material.shape.CornerTreatment): void;
						/** @deprecated */
						public setTopLeftCorner(topLeftCorner: com.google.android.material.shape.CornerTreatment): void;
						/** @deprecated */
						public setTopRightCorner(topRightCorner: com.google.android.material.shape.CornerTreatment): void;
						/** @deprecated */
						public setRightEdge(rightEdge: com.google.android.material.shape.EdgeTreatment): void;
						/** @deprecated */
						public setCornerTreatments(topLeftCorner: com.google.android.material.shape.CornerTreatment, topRightCorner: com.google.android.material.shape.CornerTreatment, bottomRightCorner: com.google.android.material.shape.CornerTreatment, bottomLeftCorner: com.google.android.material.shape.CornerTreatment): void;
						/** @deprecated */
						public setAllEdges(edgeTreatment: com.google.android.material.shape.EdgeTreatment): void;
						/** @deprecated */
						public setTopEdge(topEdge: com.google.android.material.shape.EdgeTreatment): void;
						/** @deprecated */
						public setAllCorners(cornerTreatment: com.google.android.material.shape.CornerTreatment): void;
						/** @deprecated */
						public setEdgeTreatments(leftEdge: com.google.android.material.shape.EdgeTreatment, topEdge: com.google.android.material.shape.EdgeTreatment, rightEdge: com.google.android.material.shape.EdgeTreatment, bottomEdge: com.google.android.material.shape.EdgeTreatment): void;
						/** @deprecated */
						public setBottomEdge(bottomEdge: com.google.android.material.shape.EdgeTreatment): void;
						/** @deprecated */
						public setBottomLeftCorner(bottomLeftCorner: com.google.android.material.shape.CornerTreatment): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class Shapeable extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.Shapeable>;
						/**
						 * Constructs a new instance of the com.google.android.material.shape.Shapeable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
							getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						});
						public constructor();
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export abstract class ShapeableDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.shape.ShapeableDelegate>;
						public constructor();
						public onShapeAppearanceChanged(view: android.view.View, shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public onMaskChanged(view: android.view.View, maskBounds: android.graphics.RectF): void;
						public maybeClip(canvas: android.graphics.Canvas, op: com.google.android.material.canvas.CanvasCompat.CanvasOperation): void;
						public setOffsetZeroCornerEdgeBoundsEnabled(view: android.view.View, enabled: boolean): void;
						public static create(view: android.view.View): com.google.android.material.shape.ShapeableDelegate;
						public isForceCompatClippingEnabled(): boolean;
						public setForceCompatClippingEnabled(view: android.view.View, enabled: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ShapeableDelegateV14 extends com.google.android.material.shape.ShapeableDelegate {
						public static class: java.lang.Class<com.google.android.material.shape.ShapeableDelegateV14>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ShapeableDelegateV22 extends com.google.android.material.shape.ShapeableDelegate {
						public static class: java.lang.Class<com.google.android.material.shape.ShapeableDelegateV22>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class ShapeableDelegateV33 extends com.google.android.material.shape.ShapeableDelegate {
						public static class: java.lang.Class<com.google.android.material.shape.ShapeableDelegateV33>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module shape {
					export class TriangleEdgeTreatment extends com.google.android.material.shape.EdgeTreatment {
						public static class: java.lang.Class<com.google.android.material.shape.TriangleEdgeTreatment>;
						public constructor();
						/** @deprecated */
						public getEdgePath(length: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public getEdgePath(length: number, center: number, interpolation: number, shapePath: com.google.android.material.shape.ShapePath): void;
						public constructor(size: number, inside: boolean);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export class LeftSheetDelegate extends com.google.android.material.sidesheet.SheetDelegate {
						public static class: java.lang.Class<com.google.android.material.sidesheet.LeftSheetDelegate>;
						public getParentInnerEdge(parent: androidx.coordinatorlayout.widget.CoordinatorLayout): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export class RightSheetDelegate extends com.google.android.material.sidesheet.SheetDelegate {
						public static class: java.lang.Class<com.google.android.material.sidesheet.RightSheetDelegate>;
						public getParentInnerEdge(parent: androidx.coordinatorlayout.widget.CoordinatorLayout): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export class Sheet<C>  extends com.google.android.material.motion.MaterialBackHandler {
						public static class: java.lang.Class<com.google.android.material.sidesheet.Sheet<any>>;
						/**
						 * Constructs a new instance of the com.google.android.material.sidesheet.Sheet<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getState(): number;
							setState(param0: number): void;
							addCallback(param0: any): void;
							removeCallback(param0: any): void;
							startBackProgress(param0: androidx.activity.BackEventCompat): void;
							updateBackProgress(param0: androidx.activity.BackEventCompat): void;
							handleBackInvoked(): void;
							cancelBackProgress(): void;
						});
						public constructor();
						public static STATE_EXPANDED: number;
						public static STATE_HIDDEN: number;
						public static STATE_DRAGGING: number;
						public static EDGE_LEFT: number;
						public static STATE_SETTLING: number;
						public static EDGE_RIGHT: number;
						public setState(param0: number): void;
						public startBackProgress(param0: androidx.activity.BackEventCompat): void;
						public getState(): number;
						public addCallback(param0: any): void;
						public handleBackInvoked(): void;
						public removeCallback(param0: any): void;
						public updateBackProgress(param0: androidx.activity.BackEventCompat): void;
						public cancelBackProgress(): void;
					}
					export module Sheet {
						export class SheetEdge extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.sidesheet.Sheet.SheetEdge>;
							/**
							 * Constructs a new instance of the com.google.android.material.sidesheet.Sheet$SheetEdge interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class SheetState extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.sidesheet.Sheet.SheetState>;
							/**
							 * Constructs a new instance of the com.google.android.material.sidesheet.Sheet$SheetState interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class StableSheetState extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.sidesheet.Sheet.StableSheetState>;
							/**
							 * Constructs a new instance of the com.google.android.material.sidesheet.Sheet$StableSheetState interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export class SheetCallback extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.sidesheet.SheetCallback>;
						/**
						 * Constructs a new instance of the com.google.android.material.sidesheet.SheetCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onStateChanged(param0: android.view.View, param1: number): void;
							onSlide(param0: android.view.View, param1: number): void;
						});
						public constructor();
						public onStateChanged(param0: android.view.View, param1: number): void;
						public onSlide(param0: android.view.View, param1: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export abstract class SheetDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.sidesheet.SheetDelegate>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export abstract class SheetDialog<C>  extends androidx.appcompat.app.AppCompatDialog {
						public static class: java.lang.Class<com.google.android.material.sidesheet.SheetDialog<any>>;
						public setSheetEdge(gravity: number): void;
						public setDismissWithSheetAnimationEnabled(dismissWithAnimation: boolean): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public dismiss(): void;
						public dispatchGenericMotionEvent(ev: android.view.MotionEvent): boolean;
						public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
						public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
						public onCreate(savedInstanceState: android.os.Bundle): void;
						public setContentView(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public onCreatePanelView(param0: number): android.view.View;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
						public setContentView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public setCancelable(flag: boolean): void;
						public isDismissWithSheetAnimationEnabled(): boolean;
						public dispatchPopulateAccessibilityEvent(event: android.view.accessibility.AccessibilityEvent): boolean;
						public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
						public setContentView(param0: android.view.View): void;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
						public onContentChanged(): void;
						public cancel(): void;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchTouchEvent(ev: android.view.MotionEvent): boolean;
						public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onSupportActionModeFinished(param0: androidx.appcompat.view.ActionMode): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setContentView(view: android.view.View): void;
						public onCreateContextMenu(menu: android.view.ContextMenu, v: android.view.View, menuInfo: android.view.ContextMenu.ContextMenuInfo): void;
						public onStart(): void;
						public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
						public onActionModeFinished(param0: android.view.ActionMode): void;
						public onProvideKeyboardShortcuts(data: java.util.List<any>, menu: android.view.Menu, deviceId: number): void;
						public onAttachedToWindow(): void;
						public onWindowFocusChanged(hasFocus: boolean): void;
						public onSearchRequested(): boolean;
						public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
						public onCreatePanelMenu(featureId: number, menu: android.view.Menu): boolean;
						public setCancelable(cancelable: boolean): void;
						public onWindowStartingSupportActionMode(param0: androidx.appcompat.view.ActionMode.Callback): androidx.appcompat.view.ActionMode;
						public onWindowAttributesChanged(params: android.view.WindowManager.LayoutParams): void;
						public onSearchRequested(searchEvent: any): boolean;
						public setContentView(layoutResId: number): void;
						public setCanceledOnTouchOutside(cancel: boolean): void;
						public onPanelClosed(featureId: number, menu: android.view.Menu): void;
						public onSearchRequested(param0: any): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
						public onCreate(param0: android.os.Bundle): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public onActionModeStarted(param0: android.view.ActionMode): void;
						public onActionModeStarted(mode: android.view.ActionMode): void;
						public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
						public onMenuOpened(featureId: number, menu: android.view.Menu): boolean;
						public dispatchTrackballEvent(ev: android.view.MotionEvent): boolean;
						public onDetachedFromWindow(): void;
						public onPanelClosed(param0: number, param1: android.view.Menu): void;
						public onSupportActionModeStarted(param0: androidx.appcompat.view.ActionMode): void;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public onMenuItemSelected(featureId: number, item: android.view.MenuItem): boolean;
						public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
						public onPreparePanel(featureId: number, view: android.view.View, menu: android.view.Menu): boolean;
						public onCreatePanelView(featureId: number): android.view.View;
						public onWindowFocusChanged(param0: boolean): void;
						public onActionModeFinished(mode: android.view.ActionMode): void;
						public setContentView(param0: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export class SheetUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.sidesheet.SheetUtils>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export class SideSheetBehavior<V>  extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<any> implements com.google.android.material.sidesheet.Sheet<com.google.android.material.sidesheet.SideSheetCallback>  {
						public static class: java.lang.Class<com.google.android.material.sidesheet.SideSheetBehavior<any>>;
						public expand(): void;
						public startBackProgress(param0: androidx.activity.BackEventCompat): void;
						public onSaveInstanceState(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any): android.os.Parcelable;
						public setCoplanarSiblingViewId(coplanarSiblingViewId: number): void;
						public startBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public onSaveInstanceState(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any): android.os.Parcelable;
						public onAttachedToLayoutParams(param0: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
						public onMeasureChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number, param3: number, param4: number, param5: number): boolean;
						public onTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, event: android.view.MotionEvent): boolean;
						public getCoplanarSiblingView(): android.view.View;
						public shouldSkipSmoothAnimation(): boolean;
						public cancelBackProgress(): void;
						public onDetachedFromLayoutParams(): void;
						public getLastStableState(): number;
						public updateBackProgress(backEvent: androidx.activity.BackEventCompat): void;
						public onTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public onInterceptTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public onMeasureChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, parentWidthMeasureSpec: number, widthUsed: number, parentHeightMeasureSpec: number, heightUsed: number): boolean;
						public addCallback(param0: any): void;
						public removeCallback(param0: any): void;
						public constructor();
						public onAttachedToLayoutParams(layoutParams: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
						public setCoplanarSiblingView(coplanarSiblingView: android.view.View): void;
						public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
						public onInterceptTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, event: android.view.MotionEvent): boolean;
						public static from(view: android.view.View): com.google.android.material.sidesheet.SideSheetBehavior<any>;
						public setState(state: number): void;
						public getExpandedOffset(): number;
						public hide(): void;
						public setHideFriction(hideFriction: number): void;
						public getHideFriction(): number;
						public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, layoutDirection: number): boolean;
						public removeCallback(callback: com.google.android.material.sidesheet.SideSheetCallback): void;
						public handleBackInvoked(): void;
						public updateBackProgress(param0: androidx.activity.BackEventCompat): void;
						public onRestoreInstanceState(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.os.Parcelable): void;
						public setState(param0: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getState(): number;
						public onRestoreInstanceState(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, state: android.os.Parcelable): void;
						public setDraggable(draggable: boolean): void;
						public isDraggable(): boolean;
						public addCallback(callback: com.google.android.material.sidesheet.SideSheetCallback): void;
					}
					export module SideSheetBehavior {
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.sidesheet.SideSheetBehavior.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.sidesheet.SideSheetBehavior.SavedState>;
							public constructor(param0: android.os.Parcelable);
							public constructor(superState: android.os.Parcelable, behavior: com.google.android.material.sidesheet.SideSheetBehavior<any>);
							public constructor(source: android.os.Parcel);
							public describeContents(): number;
							public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
							public constructor(source: android.os.Parcel, loader: java.lang.ClassLoader);
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
							public constructor(param0: android.os.Parcel);
						}
						export class StateSettlingTracker extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.sidesheet.SideSheetBehavior.StateSettlingTracker>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export abstract class SideSheetCallback extends java.lang.Object implements com.google.android.material.sidesheet.SheetCallback {
						public static class: java.lang.Class<com.google.android.material.sidesheet.SideSheetCallback>;
						public constructor();
						public onStateChanged(param0: android.view.View, param1: number): void;
						public onSlide(param0: android.view.View, param1: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module sidesheet {
					export class SideSheetDialog extends com.google.android.material.sidesheet.SheetDialog<com.google.android.material.sidesheet.SideSheetCallback> {
						public static class: java.lang.Class<com.google.android.material.sidesheet.SideSheetDialog>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public dismiss(): void;
						public dispatchGenericMotionEvent(ev: android.view.MotionEvent): boolean;
						public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
						public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
						public constructor(context: android.content.Context);
						public constructor(param0: android.content.Context);
						public onCreatePanelView(param0: number): android.view.View;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public dispatchPopulateAccessibilityEvent(event: android.view.accessibility.AccessibilityEvent): boolean;
						public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
						public constructor(param0: android.content.Context, param1: number);
						public onContentChanged(): void;
						public cancel(): void;
						public constructor(context: android.content.Context, theme: number);
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchTouchEvent(ev: android.view.MotionEvent): boolean;
						public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onSupportActionModeFinished(param0: androidx.appcompat.view.ActionMode): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
						public constructor(param0: android.content.Context, param1: boolean, param2: android.content.DialogInterface.OnCancelListener);
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public onCreateContextMenu(menu: android.view.ContextMenu, v: android.view.View, menuInfo: android.view.ContextMenu.ContextMenuInfo): void;
						public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
						public onActionModeFinished(param0: android.view.ActionMode): void;
						public onProvideKeyboardShortcuts(data: java.util.List<any>, menu: android.view.Menu, deviceId: number): void;
						public onAttachedToWindow(): void;
						public onWindowFocusChanged(hasFocus: boolean): void;
						public onSearchRequested(): boolean;
						public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
						public onCreatePanelMenu(featureId: number, menu: android.view.Menu): boolean;
						public onWindowStartingSupportActionMode(param0: androidx.appcompat.view.ActionMode.Callback): androidx.appcompat.view.ActionMode;
						public onWindowAttributesChanged(params: android.view.WindowManager.LayoutParams): void;
						public onSearchRequested(searchEvent: any): boolean;
						public onPanelClosed(featureId: number, menu: android.view.Menu): void;
						public onSearchRequested(param0: any): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(event: android.view.KeyEvent): boolean;
						public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public onActionModeStarted(param0: android.view.ActionMode): void;
						public onActionModeStarted(mode: android.view.ActionMode): void;
						public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
						public onMenuOpened(featureId: number, menu: android.view.Menu): boolean;
						public dispatchTrackballEvent(ev: android.view.MotionEvent): boolean;
						public onDetachedFromWindow(): void;
						public onPanelClosed(param0: number, param1: android.view.Menu): void;
						public onSupportActionModeStarted(param0: androidx.appcompat.view.ActionMode): void;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public onWindowStartingActionMode(callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public onMenuItemSelected(featureId: number, item: android.view.MenuItem): boolean;
						public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
						public onPreparePanel(featureId: number, view: android.view.View, menu: android.view.Menu): boolean;
						public onCreatePanelView(featureId: number): android.view.View;
						public onWindowFocusChanged(param0: boolean): void;
						public onActionModeFinished(mode: android.view.ActionMode): void;
						public getBehavior(): com.google.android.material.sidesheet.SideSheetBehavior<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module slider {
					export class BaseOnChangeListener<S>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.slider.BaseOnChangeListener<any>>;
						/**
						 * Constructs a new instance of the com.google.android.material.slider.BaseOnChangeListener<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onValueChange(param0: S, param1: number, param2: boolean): void;
						});
						public constructor();
						public onValueChange(param0: S, param1: number, param2: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module slider {
					export class BaseOnSliderTouchListener<S>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.slider.BaseOnSliderTouchListener<any>>;
						/**
						 * Constructs a new instance of the com.google.android.material.slider.BaseOnSliderTouchListener<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onStartTrackingTouch(param0: S): void;
							onStopTrackingTouch(param0: S): void;
						});
						public constructor();
						public onStartTrackingTouch(param0: S): void;
						public onStopTrackingTouch(param0: S): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module slider {
					export abstract class BaseSlider<S, L, T>  extends android.view.View {
						public static class: java.lang.Class<com.google.android.material.slider.BaseSlider<any,any,any>>;
						public setThumbStrokeColor(thumbStrokeColor: android.content.res.ColorStateList): void;
						public onFocusChanged(gainFocus: boolean, direction: number, previouslyFocusedRect: android.graphics.Rect): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public getLabelBehavior(): number;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setThumbStrokeWidth(thumbStrokeWidth: number): void;
						public getFocusedThumbIndex(): number;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setTickActiveTintList(tickColor: android.content.res.ColorStateList): void;
						public onSaveInstanceState(): android.os.Parcelable;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setValueTo(valueTo: number): void;
						public clearOnSliderTouchListeners(): void;
						public addOnChangeListener(listener: any): void;
						public setThumbRadius(radius: number): void;
						public getThumbRadius(): number;
						public addOnSliderTouchListener(listener: any): void;
						public getHaloTintList(): android.content.res.ColorStateList;
						public getTrackInactiveTintList(): android.content.res.ColorStateList;
						public sendAccessibilityEvent(eventType: number): void;
						public setEnabled(enabled: boolean): void;
						public setThumbElevationResource(elevation: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setActiveThumbIndex(index: number): void;
						public setThumbStrokeColorResource(thumbStrokeColorResourceId: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public onAttachedToWindow(): void;
						public setTrackHeight(trackHeight: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setTrackInactiveTintList(trackColor: android.content.res.ColorStateList): void;
						public getValueFrom(): number;
						public setThumbElevation(elevation: number): void;
						public onDraw(canvas: android.graphics.Canvas): void;
						public setValueFrom(valueFrom: number): void;
						public getMinSeparation(): number;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setTickInactiveRadius(tickInactiveRadius: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setHaloRadius(radius: number): void;
						public getTickTintList(): android.content.res.ColorStateList;
						public getTrackWidth(): number;
						public setHaloRadiusResource(radius: number): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getThumbTintList(): android.content.res.ColorStateList;
						public getHaloRadius(): number;
						public getThumbStrokeWidth(): number;
						public setLabelBehavior(labelBehavior: number): void;
						public setTickTintList(tickColor: android.content.res.ColorStateList): void;
						public clearOnChangeListeners(): void;
						public getStepSize(): number;
						public onVisibilityChanged(changedView: android.view.View, visibility: number): void;
						public setHaloTintList(haloColor: android.content.res.ColorStateList): void;
						public setThumbRadiusResource(radius: number): void;
						public getTrackTintList(): android.content.res.ColorStateList;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public dispatchKeyEvent(event: android.view.KeyEvent): boolean;
						public setSeparationUnit(separationUnit: number): void;
						public setTickActiveRadius(tickActiveRadius: number): void;
						public getTickActiveTintList(): android.content.res.ColorStateList;
						public sendAccessibilityEvent(param0: number): void;
						public getTrackSidePadding(): number;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public setTickVisible(tickVisible: boolean): void;
						public getThumbElevation(): number;
						public getTickActiveRadius(): number;
						public getThumbStrokeColor(): android.content.res.ColorStateList;
						public getValueTo(): number;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public isTickVisible(): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public setFocusedThumbIndex(index: number): void;
						public setTickInactiveTintList(tickColor: android.content.res.ColorStateList): void;
						public getAccessibilityClassName(): string;
						public setThumbTintList(thumbColor: android.content.res.ColorStateList): void;
						public setThumbStrokeWidthResource(thumbStrokeWidthResourceId: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public setLabelFormatter(formatter: com.google.android.material.slider.LabelFormatter): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public removeOnChangeListener(listener: any): void;
						public setTrackActiveTintList(trackColor: android.content.res.ColorStateList): void;
						public getTickInactiveTintList(): android.content.res.ColorStateList;
						public drawableStateChanged(): void;
						public getTrackHeight(): number;
						public setStepSize(stepSize: number): void;
						public getTrackActiveTintList(): android.content.res.ColorStateList;
						public hasLabelFormatter(): boolean;
						public setTrackTintList(trackColor: android.content.res.ColorStateList): void;
						public onDetachedFromWindow(): void;
						public removeOnSliderTouchListener(listener: any): void;
						public getActiveThumbIndex(): number;
						public onTouchEvent(event: android.view.MotionEvent): boolean;
						public onSizeChanged(w: number, h: number, oldw: number, oldh: number): void;
						public dispatchHoverEvent(event: android.view.MotionEvent): boolean;
						public pickActiveThumb(): boolean;
						public getTickInactiveRadius(): number;
					}
					export module BaseSlider {
						export class AccessibilityEventSender extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<com.google.android.material.slider.BaseSlider.AccessibilityEventSender>;
							public run(): void;
						}
						export class AccessibilityHelper extends androidx.customview.widget.ExploreByTouchHelper {
							public static class: java.lang.Class<com.google.android.material.slider.BaseSlider.AccessibilityHelper>;
							public getVirtualViewAt(param0: number, param1: number): number;
							public onPopulateNodeForVirtualView(virtualViewId: number, info: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onPopulateNodeForVirtualView(param0: number, param1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onPerformActionForVirtualView(param0: number, param1: number, param2: android.os.Bundle): boolean;
							public onPerformActionForVirtualView(virtualViewId: number, action: number, arguments: android.os.Bundle): boolean;
							public getVisibleVirtualViews(param0: java.util.List<java.lang.Integer>): void;
							public getVirtualViewAt(x: number, y: number): number;
							public getVisibleVirtualViews(virtualViewIds: java.util.List<java.lang.Integer>): void;
						}
						export class SliderState extends android.view.View.BaseSavedState {
							public static class: java.lang.Class<com.google.android.material.slider.BaseSlider.SliderState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.slider.BaseSlider.SliderState>;
							public writeToParcel(dest: android.os.Parcel, flags: number): void;
							public describeContents(): number;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module slider {
					export class BasicLabelFormatter extends java.lang.Object implements com.google.android.material.slider.LabelFormatter {
						public static class: java.lang.Class<com.google.android.material.slider.BasicLabelFormatter>;
						public constructor();
						public getFormattedValue(value: number): string;
						public getFormattedValue(param0: number): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module slider {
					export class LabelFormatter extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.slider.LabelFormatter>;
						/**
						 * Constructs a new instance of the com.google.android.material.slider.LabelFormatter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getFormattedValue(param0: number): string;
						});
						public constructor();
						public static LABEL_GONE: number;
						public static LABEL_WITHIN_BOUNDS: number;
						public static LABEL_FLOATING: number;
						public static LABEL_VISIBLE: number;
						public getFormattedValue(param0: number): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module slider {
					export class RangeSlider extends com.google.android.material.slider.BaseSlider<com.google.android.material.slider.RangeSlider,com.google.android.material.slider.RangeSlider.OnChangeListener,com.google.android.material.slider.RangeSlider.OnSliderTouchListener> {
						public static class: java.lang.Class<com.google.android.material.slider.RangeSlider>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public setMinSeparation(minSeparation: number): void;
						public sendAccessibilityEvent(param0: number): void;
						public setValues(values: java.util.List<java.lang.Float>): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setMinSeparationValue(minSeparation: number): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getMinSeparation(): number;
						public setCustomThumbDrawable(drawableResId: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onSaveInstanceState(): android.os.Parcelable;
						public setValues(...values: java.lang.Float[]): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setCustomThumbDrawablesForValues(...drawables: android.graphics.drawable.Drawable[]): void;
						public setCustomThumbDrawable(drawable: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEvent(eventType: number): void;
						public getValues(): java.util.List<java.lang.Float>;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setCustomThumbDrawablesForValues(...drawableResIds: number[]): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
					export module RangeSlider {
						export class OnChangeListener extends com.google.android.material.slider.BaseOnChangeListener<com.google.android.material.slider.RangeSlider> {
							public static class: java.lang.Class<com.google.android.material.slider.RangeSlider.OnChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.slider.RangeSlider$OnChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onValueChange(param0: com.google.android.material.slider.RangeSlider, param1: number, param2: boolean): void;
								onValueChange(param0: any, param1: number, param2: boolean): void;
								onValueChange(param0: any, param1: number, param2: boolean): void;
							});
							public constructor();
							public onValueChange(param0: com.google.android.material.slider.RangeSlider, param1: number, param2: boolean): void;
							public onValueChange(param0: any, param1: number, param2: boolean): void;
						}
						export class OnSliderTouchListener extends com.google.android.material.slider.BaseOnSliderTouchListener<com.google.android.material.slider.RangeSlider> {
							public static class: java.lang.Class<com.google.android.material.slider.RangeSlider.OnSliderTouchListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.slider.RangeSlider$OnSliderTouchListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onStartTrackingTouch(param0: com.google.android.material.slider.RangeSlider): void;
								onStopTrackingTouch(param0: com.google.android.material.slider.RangeSlider): void;
								onStopTrackingTouch(param0: any): void;
								onStartTrackingTouch(param0: any): void;
								onStartTrackingTouch(param0: any): void;
								onStopTrackingTouch(param0: any): void;
							});
							public constructor();
							public onStopTrackingTouch(param0: any): void;
							public onStopTrackingTouch(param0: com.google.android.material.slider.RangeSlider): void;
							public onStartTrackingTouch(param0: any): void;
							public onStartTrackingTouch(param0: com.google.android.material.slider.RangeSlider): void;
						}
						export class RangeSliderState extends android.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.slider.RangeSlider.RangeSliderState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.slider.RangeSlider.RangeSliderState>;
							public writeToParcel(dest: android.os.Parcel, flags: number): void;
							public describeContents(): number;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public writeToParcel(out: android.os.Parcel, flags: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module slider {
					export class Slider extends com.google.android.material.slider.BaseSlider<com.google.android.material.slider.Slider,com.google.android.material.slider.Slider.OnChangeListener,com.google.android.material.slider.Slider.OnSliderTouchListener> {
						public static class: java.lang.Class<com.google.android.material.slider.Slider>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public setValue(value: number): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setCustomThumbDrawable(drawableResId: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public getValue(): number;
						public setCustomThumbDrawable(drawable: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEvent(eventType: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public pickActiveThumb(): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
					export module Slider {
						export class OnChangeListener extends com.google.android.material.slider.BaseOnChangeListener<com.google.android.material.slider.Slider> {
							public static class: java.lang.Class<com.google.android.material.slider.Slider.OnChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.slider.Slider$OnChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onValueChange(param0: com.google.android.material.slider.Slider, param1: number, param2: boolean): void;
								onValueChange(param0: any, param1: number, param2: boolean): void;
								onValueChange(param0: any, param1: number, param2: boolean): void;
							});
							public constructor();
							public onValueChange(param0: com.google.android.material.slider.Slider, param1: number, param2: boolean): void;
							public onValueChange(param0: any, param1: number, param2: boolean): void;
						}
						export class OnSliderTouchListener extends com.google.android.material.slider.BaseOnSliderTouchListener<com.google.android.material.slider.Slider> {
							public static class: java.lang.Class<com.google.android.material.slider.Slider.OnSliderTouchListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.slider.Slider$OnSliderTouchListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onStartTrackingTouch(param0: com.google.android.material.slider.Slider): void;
								onStopTrackingTouch(param0: com.google.android.material.slider.Slider): void;
								onStopTrackingTouch(param0: any): void;
								onStartTrackingTouch(param0: any): void;
								onStartTrackingTouch(param0: any): void;
								onStopTrackingTouch(param0: any): void;
							});
							public constructor();
							public onStopTrackingTouch(param0: any): void;
							public onStopTrackingTouch(param0: com.google.android.material.slider.Slider): void;
							public onStartTrackingTouch(param0: com.google.android.material.slider.Slider): void;
							public onStartTrackingTouch(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module snackbar {
					export abstract class BaseTransientBottomBar<B>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar<any>>;
						public static ANIMATION_MODE_SLIDE: number;
						public static ANIMATION_MODE_FADE: number;
						public static LENGTH_INDEFINITE: number;
						public static LENGTH_SHORT: number;
						public static LENGTH_LONG: number;
						public view: com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout;
						public hasSnackbarStyleAttr(): boolean;
						public dismiss(): void;
						public dispatchDismiss(event: number): void;
						public setGestureInsetBottomIgnored(gestureInsetBottomIgnored: boolean): B;
						public setAnimationMode(animationMode: number): B;
						public getView(): android.view.View;
						public setBehavior(behavior: com.google.android.material.snackbar.BaseTransientBottomBar.Behavior): B;
						public isAnchorViewLayoutListenerEnabled(): boolean;
						public isShownOrQueued(): boolean;
						public getSnackbarBaseLayoutResId(): number;
						public setAnchorView(anchorViewId: number): B;
						public removeCallback(callback: com.google.android.material.snackbar.BaseTransientBottomBar.BaseCallback<B>): B;
						public addCallback(callback: com.google.android.material.snackbar.BaseTransientBottomBar.BaseCallback<B>): B;
						public setAnchorViewLayoutListenerEnabled(anchorViewLayoutListenerEnabled: boolean): void;
						public getAnchorView(): android.view.View;
						public isShown(): boolean;
						public getDuration(): number;
						public constructor(context: android.content.Context, parent: android.view.ViewGroup, content: android.view.View, contentViewCallback: com.google.android.material.snackbar.ContentViewCallback);
						public constructor(parent: android.view.ViewGroup, content: android.view.View, contentViewCallback: com.google.android.material.snackbar.ContentViewCallback);
						public isGestureInsetBottomIgnored(): boolean;
						public setAnchorView(anchorView: android.view.View): B;
						public getBehavior(): com.google.android.material.snackbar.BaseTransientBottomBar.Behavior;
						public getContext(): android.content.Context;
						public getAnimationMode(): number;
						public show(): void;
						public getNewBehavior(): com.google.android.material.behavior.SwipeDismissBehavior<any>;
						public setDuration(duration: number): B;
					}
					export module BaseTransientBottomBar {
						export class Anchor extends java.lang.Object implements android.view.View.OnAttachStateChangeListener, android.view.ViewTreeObserver.OnGlobalLayoutListener {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.Anchor>;
							public onViewDetachedFromWindow(param0: android.view.View): void;
							public onViewAttachedToWindow(anchorView: android.view.View): void;
							public onGlobalLayout(): void;
							public onViewDetachedFromWindow(anchorView: android.view.View): void;
							public onViewAttachedToWindow(param0: android.view.View): void;
						}
						export class AnimationMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.AnimationMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.snackbar.BaseTransientBottomBar$AnimationMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export abstract class BaseCallback<B>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.BaseCallback<any>>;
							public static DISMISS_EVENT_SWIPE: number;
							public static DISMISS_EVENT_ACTION: number;
							public static DISMISS_EVENT_TIMEOUT: number;
							public static DISMISS_EVENT_MANUAL: number;
							public static DISMISS_EVENT_CONSECUTIVE: number;
							public constructor();
							public onDismissed(transientBottomBar: B, event: number): void;
							public onShown(transientBottomBar: B): void;
						}
						export module BaseCallback {
							export class DismissEvent extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.BaseCallback.DismissEvent>;
								/**
								 * Constructs a new instance of the com.google.android.material.snackbar.BaseTransientBottomBar$BaseCallback$DismissEvent interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
						export class Behavior extends com.google.android.material.behavior.SwipeDismissBehavior<android.view.View> {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.Behavior>;
							public constructor();
							public canSwipeDismissView(child: android.view.View): boolean;
							public canSwipeDismissView(view: android.view.View): boolean;
							public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
							public onInterceptTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: any, event: android.view.MotionEvent): boolean;
							public onInterceptTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, event: android.view.MotionEvent): boolean;
						}
						export class BehaviorDelegate extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.BehaviorDelegate>;
							public canSwipeDismissView(child: android.view.View): boolean;
							public setBaseTransientBottomBar(baseTransientBottomBar: com.google.android.material.snackbar.BaseTransientBottomBar<any>): void;
							public constructor(behavior: com.google.android.material.behavior.SwipeDismissBehavior<any>);
							public onInterceptTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, event: android.view.MotionEvent): void;
						}
						export class ContentViewCallback extends java.lang.Object implements com.google.android.material.snackbar.ContentViewCallback {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.ContentViewCallback>;
							/**
							 * Constructs a new instance of the com.google.android.material.snackbar.BaseTransientBottomBar$ContentViewCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								animateContentIn(param0: number, param1: number): void;
								animateContentOut(param0: number, param1: number): void;
							});
							public constructor();
							public animateContentOut(param0: number, param1: number): void;
							public animateContentIn(param0: number, param1: number): void;
						}
						export class Duration extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.Duration>;
							/**
							 * Constructs a new instance of the com.google.android.material.snackbar.BaseTransientBottomBar$Duration interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class SnackbarBaseLayout extends android.widget.FrameLayout {
							public static class: java.lang.Class<com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout>;
							public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
							public addView(child: android.view.View, index: number): void;
							public addView(child: android.view.View, width: number, height: number): void;
							public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
							public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
							public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
							public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
							public childDrawableStateChanged(param0: android.view.View): void;
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public onDetachedFromWindow(): void;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
							public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
							public clearChildFocus(param0: android.view.View): void;
							public onLayout(changed: boolean, l: number, t: number, r: number, b: number): void;
							public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
							public setBackgroundTintList(tint: android.content.res.ColorStateList): void;
							public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
							public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
							public focusSearch(direction: number): android.view.View;
							public focusableViewAvailable(v: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public setLayoutParams(params: android.view.ViewGroup.LayoutParams): void;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public onAttachedToWindow(): void;
							public focusSearch(focused: android.view.View, direction: number): android.view.View;
							public childDrawableStateChanged(child: android.view.View): void;
							public removeView(view: android.view.View): void;
							public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public showContextMenuForChild(originalView: android.view.View): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
							public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
							public requestTransparentRegion(param0: android.view.View): void;
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
							public getParentForAccessibility(): android.view.ViewParent;
							/** @deprecated */
							public setBackgroundDrawable(background: android.graphics.drawable.Drawable): void;
							public getTextDirection(): number;
							public isLayoutRequested(): boolean;
							public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public sendAccessibilityEvent(eventType: number): void;
							public setOnClickListener(onClickListener: android.view.View.OnClickListener): void;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
							public setOnClickListener(l: android.view.View.OnClickListener): void;
							public requestChildFocus(child: android.view.View, focused: android.view.View): void;
							public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							/** @deprecated */
							public requestFitSystemWindows(): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public setBackgroundTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
							public addView(child: android.view.View): void;
							public bringChildToFront(param0: android.view.View): void;
							public requestTransparentRegion(child: android.view.View): void;
							public setBackground(background: android.graphics.drawable.Drawable): void;
							public recomputeViewAttributes(child: android.view.View): void;
							public clearChildFocus(child: android.view.View): void;
							public constructor(context: android.content.Context);
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
							public setBackgroundTintMode(backgroundTintMode: android.graphics.PorterDuff.Mode): void;
							public requestFitSystemWindows(): void;
							public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
							public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
							public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
							public getTextAlignment(): number;
							public bringChildToFront(child: android.view.View): void;
							public onStopNestedScroll(child: android.view.View): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public setBackgroundTintList(backgroundTint: android.content.res.ColorStateList): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public setBackgroundDrawable(drawable: android.graphics.drawable.Drawable): void;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public setBackground(drawable: android.graphics.drawable.Drawable): void;
							public createContextMenu(menu: android.view.ContextMenu): void;
							public sendAccessibilityEvent(param0: number): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
							public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
							public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module snackbar {
					export class ContentViewCallback extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.snackbar.ContentViewCallback>;
						/**
						 * Constructs a new instance of the com.google.android.material.snackbar.ContentViewCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							animateContentIn(param0: number, param1: number): void;
							animateContentOut(param0: number, param1: number): void;
						});
						public constructor();
						public animateContentIn(param0: number, param1: number): void;
						public animateContentOut(param0: number, param1: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module snackbar {
					export class Snackbar extends com.google.android.material.snackbar.BaseTransientBottomBar<com.google.android.material.snackbar.Snackbar> {
						public static class: java.lang.Class<com.google.android.material.snackbar.Snackbar>;
						public isShown(): boolean;
						public setText(message: string): com.google.android.material.snackbar.Snackbar;
						public getDuration(): number;
						public dismiss(): void;
						public setTextMaxLines(maxLines: number): com.google.android.material.snackbar.Snackbar;
						public setTextColor(color: number): com.google.android.material.snackbar.Snackbar;
						public setActionTextColor(color: number): com.google.android.material.snackbar.Snackbar;
						public setBackgroundTint(color: number): com.google.android.material.snackbar.Snackbar;
						public setAction(text: string, listener: android.view.View.OnClickListener): com.google.android.material.snackbar.Snackbar;
						public setBackgroundTintMode(mode: android.graphics.PorterDuff.Mode): com.google.android.material.snackbar.Snackbar;
						/** @deprecated */
						public static hasSnackbarButtonStyleAttr(context: android.content.Context): boolean;
						public setAction(resId: number, listener: android.view.View.OnClickListener): com.google.android.material.snackbar.Snackbar;
						public setTextColor(colors: android.content.res.ColorStateList): com.google.android.material.snackbar.Snackbar;
						/** @deprecated */
						public setCallback(callback: com.google.android.material.snackbar.Snackbar.Callback): com.google.android.material.snackbar.Snackbar;
						public show(): void;
						public setText(resId: number): com.google.android.material.snackbar.Snackbar;
						public static make(view: android.view.View, text: string, duration: number): com.google.android.material.snackbar.Snackbar;
						public setMaxInlineActionWidth(width: number): com.google.android.material.snackbar.Snackbar;
						public setActionTextColor(colors: android.content.res.ColorStateList): com.google.android.material.snackbar.Snackbar;
						public setBackgroundTintList(colorStateList: android.content.res.ColorStateList): com.google.android.material.snackbar.Snackbar;
						public static make(context: android.content.Context, view: android.view.View, text: string, duration: number): com.google.android.material.snackbar.Snackbar;
						public static make(view: android.view.View, resId: number, duration: number): com.google.android.material.snackbar.Snackbar;
					}
					export module Snackbar {
						export class Callback extends com.google.android.material.snackbar.BaseTransientBottomBar.BaseCallback<com.google.android.material.snackbar.Snackbar> {
							public static class: java.lang.Class<com.google.android.material.snackbar.Snackbar.Callback>;
							public static DISMISS_EVENT_SWIPE: number;
							public static DISMISS_EVENT_ACTION: number;
							public static DISMISS_EVENT_TIMEOUT: number;
							public static DISMISS_EVENT_MANUAL: number;
							public static DISMISS_EVENT_CONSECUTIVE: number;
							public constructor();
							public onShown(transientBottomBar: any): void;
							public onShown(sb: com.google.android.material.snackbar.Snackbar): void;
							public onDismissed(transientBottomBar: any, event: number): void;
							public onDismissed(transientBottomBar: com.google.android.material.snackbar.Snackbar, event: number): void;
						}
						export class SnackbarLayout extends com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout {
							public static class: java.lang.Class<com.google.android.material.snackbar.Snackbar.SnackbarLayout>;
							public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
							public addView(child: android.view.View, index: number): void;
							public addView(child: android.view.View, width: number, height: number): void;
							public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
							public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
							public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
							public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
							public childDrawableStateChanged(param0: android.view.View): void;
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
							public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
							public clearChildFocus(param0: android.view.View): void;
							public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
							public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
							public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
							public focusSearch(direction: number): android.view.View;
							public focusableViewAvailable(v: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public focusSearch(focused: android.view.View, direction: number): android.view.View;
							public childDrawableStateChanged(child: android.view.View): void;
							public removeView(view: android.view.View): void;
							public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public showContextMenuForChild(originalView: android.view.View): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
							public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
							public requestTransparentRegion(param0: android.view.View): void;
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
							public getParentForAccessibility(): android.view.ViewParent;
							public getTextDirection(): number;
							public isLayoutRequested(): boolean;
							public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public sendAccessibilityEvent(eventType: number): void;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
							public requestChildFocus(child: android.view.View, focused: android.view.View): void;
							public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							/** @deprecated */
							public requestFitSystemWindows(): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
							public addView(child: android.view.View): void;
							public bringChildToFront(param0: android.view.View): void;
							public requestTransparentRegion(child: android.view.View): void;
							public recomputeViewAttributes(child: android.view.View): void;
							public clearChildFocus(child: android.view.View): void;
							public constructor(context: android.content.Context);
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
							public requestFitSystemWindows(): void;
							public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
							public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
							public getTextAlignment(): number;
							public bringChildToFront(child: android.view.View): void;
							public onStopNestedScroll(child: android.view.View): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public createContextMenu(menu: android.view.ContextMenu): void;
							public sendAccessibilityEvent(param0: number): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
							public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
							public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module snackbar {
					export class SnackbarContentLayout extends android.widget.LinearLayout implements com.google.android.material.snackbar.ContentViewCallback {
						public static class: java.lang.Class<com.google.android.material.snackbar.SnackbarContentLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public getActionView(): android.widget.Button;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public getMessageView(): android.widget.TextView;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public animateContentIn(delay: number, duration: number): void;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public animateContentOut(delay: number, duration: number): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public setMaxInlineActionWidth(width: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public onFinishInflate(): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public animateContentIn(param0: number, param1: number): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public animateContentOut(param0: number, param1: number): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module snackbar {
					export class SnackbarManager extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.snackbar.SnackbarManager>;
						public isCurrent(callback: com.google.android.material.snackbar.SnackbarManager.Callback): boolean;
						public restoreTimeoutIfPaused(callback: com.google.android.material.snackbar.SnackbarManager.Callback): void;
						public show(duration: number, callback: com.google.android.material.snackbar.SnackbarManager.Callback): void;
						public pauseTimeout(callback: com.google.android.material.snackbar.SnackbarManager.Callback): void;
						public isCurrentOrNext(callback: com.google.android.material.snackbar.SnackbarManager.Callback): boolean;
						public dismiss(callback: com.google.android.material.snackbar.SnackbarManager.Callback, event: number): void;
						public onShown(callback: com.google.android.material.snackbar.SnackbarManager.Callback): void;
						public onDismissed(callback: com.google.android.material.snackbar.SnackbarManager.Callback): void;
					}
					export module SnackbarManager {
						export class Callback extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.snackbar.SnackbarManager.Callback>;
							/**
							 * Constructs a new instance of the com.google.android.material.snackbar.SnackbarManager$Callback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								show(): void;
								dismiss(param0: number): void;
							});
							public constructor();
							public dismiss(param0: number): void;
							public show(): void;
						}
						export class SnackbarRecord extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.snackbar.SnackbarManager.SnackbarRecord>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module stateful {
					export class ExtendableSavedState extends androidx.customview.view.AbsSavedState {
						public static class: java.lang.Class<com.google.android.material.stateful.ExtendableSavedState>;
						public extendableStates: androidx.collection.SimpleArrayMap<string,android.os.Bundle>;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.stateful.ExtendableSavedState>;
						public writeToParcel(out: android.os.Parcel, flags: number): void;
						public describeContents(): number;
						public constructor(superState: android.os.Parcelable);
						public constructor(param0: android.os.Parcelable);
						public constructor(param0: android.os.Parcel);
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public constructor(param0: android.os.Parcel, param1: java.lang.ClassLoader);
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module switchmaterial {
					export class SwitchMaterial extends androidx.appcompat.widget.SwitchCompat {
						public static class: java.lang.Class<com.google.android.material.switchmaterial.SwitchMaterial>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public setUseMaterialThemeColors(useMaterialThemeColors: boolean): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public onAttachedToWindow(): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public isChecked(): boolean;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public isUseMaterialThemeColors(): boolean;
						public setChecked(param0: boolean): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public sendAccessibilityEvent(eventType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public toggle(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module tabs {
					export class ElasticTabIndicatorInterpolator extends com.google.android.material.tabs.TabIndicatorInterpolator {
						public static class: java.lang.Class<com.google.android.material.tabs.ElasticTabIndicatorInterpolator>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module tabs {
					export class FadeTabIndicatorInterpolator extends com.google.android.material.tabs.TabIndicatorInterpolator {
						public static class: java.lang.Class<com.google.android.material.tabs.FadeTabIndicatorInterpolator>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module tabs {
					export class TabIndicatorInterpolator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.tabs.TabIndicatorInterpolator>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module tabs {
					export class TabItem extends android.view.View {
						public static class: java.lang.Class<com.google.android.material.tabs.TabItem>;
						public text: string;
						public icon: android.graphics.drawable.Drawable;
						public customLayout: number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public sendAccessibilityEvent(eventType: number): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module tabs {
					export class TabLayout extends android.widget.HorizontalScrollView {
						public static class: java.lang.Class<com.google.android.material.tabs.TabLayout>;
						public static MODE_SCROLLABLE: number;
						public static MODE_FIXED: number;
						public static MODE_AUTO: number;
						public static TAB_LABEL_VISIBILITY_UNLABELED: number;
						public static TAB_LABEL_VISIBILITY_LABELED: number;
						public static GRAVITY_FILL: number;
						public static GRAVITY_CENTER: number;
						public static GRAVITY_START: number;
						public static INDICATOR_GRAVITY_BOTTOM: number;
						public static INDICATOR_GRAVITY_CENTER: number;
						public static INDICATOR_GRAVITY_TOP: number;
						public static INDICATOR_GRAVITY_STRETCH: number;
						public static INDICATOR_ANIMATION_MODE_LINEAR: number;
						public static INDICATOR_ANIMATION_MODE_ELASTIC: number;
						public static INDICATOR_ANIMATION_MODE_FADE: number;
						public isLayoutRequested(): boolean;
						public isTabIndicatorFullWidth(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public setTabIndicatorFullWidth(tabIndicatorFullWidth: boolean): void;
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public setTabRippleColorResource(tabRippleColorResourceId: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public setTabIndicatorAnimationMode(tabIndicatorAnimationMode: number): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public selectTab(tab: com.google.android.material.tabs.TabLayout.Tab, updateIndicator: boolean): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public setTabTextColors(textColor: android.content.res.ColorStateList): void;
						public addTab(tab: com.google.android.material.tabs.TabLayout.Tab, position: number, setSelected: boolean): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSelectedTabIndicatorColor(color: number): void;
						public setSelectedTabIndicator(tabSelectedIndicatorResourceId: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public setScrollPosition(position: number, positionOffset: number, updateSelectedTabView: boolean, updateIndicatorPosition: boolean): void;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setScrollPosition(position: number, positionOffset: number, updateSelectedTabView: boolean): void;
						public setupWithViewPager(viewPager: androidx.viewpager.widget.ViewPager): void;
						public addTab(tab: com.google.android.material.tabs.TabLayout.Tab, position: number): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public setTabIconTint(iconTint: android.content.res.ColorStateList): void;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public getTabIconTint(): android.content.res.ColorStateList;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public onInterceptTouchEvent(ev: android.view.MotionEvent): boolean;
						public getTabMode(): number;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public clearOnTabSelectedListeners(): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public onAttachedToWindow(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public getTabRippleColor(): android.content.res.ColorStateList;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public addOnTabSelectedListener(listener: com.google.android.material.tabs.TabLayout.OnTabSelectedListener): void;
						public getTabGravity(): number;
						public focusSearch(direction: number): android.view.View;
						public onDraw(canvas: android.graphics.Canvas): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public addView(child: android.view.View, index: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public isInlineLabel(): boolean;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						/** @deprecated */
						public removeOnTabSelectedListener(listener: com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener<any>): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public hasUnboundedRipple(): boolean;
						public getTextAlignment(): number;
						/** @deprecated */
						public addOnTabSelectedListener(listener: com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener<any>): void;
						public onInterceptTouchEvent(event: android.view.MotionEvent): boolean;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public setTabRippleColor(color: android.content.res.ColorStateList): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public shouldDelayChildPressedState(): boolean;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						/** @deprecated */
						public setSelectedTabIndicatorHeight(height: number): void;
						public getSelectedTabPosition(): number;
						public setTabGravity(gravity: number): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public onTouchEvent(ev: android.view.MotionEvent): boolean;
						public removeTabAt(position: number): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public setTabMode(mode: number): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public addTab(tab: com.google.android.material.tabs.TabLayout.Tab, setSelected: boolean): void;
						/** @deprecated */
						public setOnTabSelectedListener(listener: com.google.android.material.tabs.TabLayout.OnTabSelectedListener): void;
						public focusableViewAvailable(v: android.view.View): void;
						public releaseFromTabPool(tab: com.google.android.material.tabs.TabLayout.Tab): boolean;
						public setSelectedTabIndicatorGravity(indicatorGravity: number): void;
						/** @deprecated */
						public setOnTabSelectedListener(listener: com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener<any>): void;
						public createTabFromPool(): com.google.android.material.tabs.TabLayout.Tab;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public getTabSelectedIndicator(): android.graphics.drawable.Drawable;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getTabCount(): number;
						public removeTab(tab: com.google.android.material.tabs.TabLayout.Tab): void;
						public getTabIndicatorGravity(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public setInlineLabel(inline: boolean): void;
						public setTabTextColors(normalColor: number, selectedColor: number): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public setUnboundedRipple(unboundedRipple: boolean): void;
						public getTabAt(index: number): com.google.android.material.tabs.TabLayout.Tab;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public newTab(): com.google.android.material.tabs.TabLayout.Tab;
						public setUnboundedRippleResource(unboundedRippleResourceId: number): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): android.widget.FrameLayout.LayoutParams;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public setupWithViewPager(viewPager: androidx.viewpager.widget.ViewPager, autoRefresh: boolean): void;
						public setInlineLabelResource(inlineResourceId: number): void;
						public removeView(view: android.view.View): void;
						public removeAllTabs(): void;
						/** @deprecated */
						public setTabsFromPagerAdapter(adapter: androidx.viewpager.widget.PagerAdapter): void;
						public getTabTextColors(): android.content.res.ColorStateList;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setSelectedTabIndicator(tabSelectedIndicator: android.graphics.drawable.Drawable): void;
						public onDetachedFromWindow(): void;
						public setElevation(elevation: number): void;
						public addTab(tab: com.google.android.material.tabs.TabLayout.Tab): void;
						public selectTab(tab: com.google.android.material.tabs.TabLayout.Tab): void;
						public generateLayoutParams(attrs: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
						public onTouchEvent(event: android.view.MotionEvent): boolean;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getTabIndicatorAnimationMode(): number;
						public generateLayoutParams(lp: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
						public removeOnTabSelectedListener(listener: com.google.android.material.tabs.TabLayout.OnTabSelectedListener): void;
						public setTabIconTintResource(iconTintResourceId: number): void;
					}
					export module TabLayout {
						export class AdapterChangeListener extends java.lang.Object implements androidx.viewpager.widget.ViewPager.OnAdapterChangeListener {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.AdapterChangeListener>;
							public onAdapterChanged(param0: androidx.viewpager.widget.ViewPager, param1: androidx.viewpager.widget.PagerAdapter, param2: androidx.viewpager.widget.PagerAdapter): void;
							public onAdapterChanged(viewPager: androidx.viewpager.widget.ViewPager, oldAdapter: androidx.viewpager.widget.PagerAdapter, newAdapter: androidx.viewpager.widget.PagerAdapter): void;
						}
						export class BaseOnTabSelectedListener<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener<any>>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayout$BaseOnTabSelectedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onTabSelected(param0: T): void;
								onTabUnselected(param0: T): void;
								onTabReselected(param0: T): void;
							});
							public constructor();
							public onTabUnselected(param0: T): void;
							public onTabReselected(param0: T): void;
							public onTabSelected(param0: T): void;
						}
						export class LabelVisibility extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.LabelVisibility>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayout$LabelVisibility interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Mode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.Mode>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayout$Mode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class OnTabSelectedListener extends com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener<com.google.android.material.tabs.TabLayout.Tab> {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.OnTabSelectedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayout$OnTabSelectedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onTabSelected(param0: any): void;
								onTabUnselected(param0: any): void;
								onTabReselected(param0: any): void;
							});
							public constructor();
							public onTabReselected(param0: any): void;
							public onTabSelected(param0: any): void;
							public onTabUnselected(param0: any): void;
						}
						export class PagerAdapterObserver extends android.database.DataSetObserver {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.PagerAdapterObserver>;
							public onChanged(): void;
							public onInvalidated(): void;
						}
						export class SlidingTabIndicator extends android.widget.LinearLayout {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.SlidingTabIndicator>;
							public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
							public addView(child: android.view.View, index: number): void;
							public addView(child: android.view.View, width: number, height: number): void;
							public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
							public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
							public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
							public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
							public childDrawableStateChanged(param0: android.view.View): void;
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public onRtlPropertiesChanged(layoutDirection: number): void;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
							public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
							public clearChildFocus(param0: android.view.View): void;
							public onLayout(changed: boolean, l: number, t: number, r: number, b: number): void;
							public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
							public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
							public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
							public focusSearch(direction: number): android.view.View;
							public focusableViewAvailable(v: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public focusSearch(focused: android.view.View, direction: number): android.view.View;
							public childDrawableStateChanged(child: android.view.View): void;
							public removeView(view: android.view.View): void;
							public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public showContextMenuForChild(originalView: android.view.View): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
							public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
							public requestTransparentRegion(param0: android.view.View): void;
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
							public getParentForAccessibility(): android.view.ViewParent;
							public getTextDirection(): number;
							public isLayoutRequested(): boolean;
							public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public sendAccessibilityEvent(eventType: number): void;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
							public requestChildFocus(child: android.view.View, focused: android.view.View): void;
							public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							/** @deprecated */
							public requestFitSystemWindows(): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
							public addView(child: android.view.View): void;
							public bringChildToFront(param0: android.view.View): void;
							public requestTransparentRegion(child: android.view.View): void;
							public recomputeViewAttributes(child: android.view.View): void;
							public clearChildFocus(child: android.view.View): void;
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
							public requestFitSystemWindows(): void;
							public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
							public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
							public getTextAlignment(): number;
							public bringChildToFront(child: android.view.View): void;
							public onStopNestedScroll(child: android.view.View): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public createContextMenu(menu: android.view.ContextMenu): void;
							public sendAccessibilityEvent(param0: number): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
							public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
							public draw(canvas: android.graphics.Canvas): void;
							public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						}
						export class Tab extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.Tab>;
							public static INVALID_POSITION: number;
							public parent: com.google.android.material.tabs.TabLayout;
							public view: com.google.android.material.tabs.TabLayout.TabView;
							public getIcon(): android.graphics.drawable.Drawable;
							public getPosition(): number;
							public setTabLabelVisibility(mode: number): com.google.android.material.tabs.TabLayout.Tab;
							public setId(id: number): com.google.android.material.tabs.TabLayout.Tab;
							public setText(resId: number): com.google.android.material.tabs.TabLayout.Tab;
							public setIcon(resId: number): com.google.android.material.tabs.TabLayout.Tab;
							public setCustomView(resId: number): com.google.android.material.tabs.TabLayout.Tab;
							public select(): void;
							public getTag(): any;
							public getContentDescription(): string;
							public setIcon(icon: android.graphics.drawable.Drawable): com.google.android.material.tabs.TabLayout.Tab;
							public setCustomView(view: android.view.View): com.google.android.material.tabs.TabLayout.Tab;
							public setContentDescription(contentDesc: string): com.google.android.material.tabs.TabLayout.Tab;
							public constructor();
							public getTabLabelVisibility(): number;
							public setTag(tag: any): com.google.android.material.tabs.TabLayout.Tab;
							public getText(): string;
							public getCustomView(): android.view.View;
							public isSelected(): boolean;
							public setText(text: string): com.google.android.material.tabs.TabLayout.Tab;
							public getOrCreateBadge(): com.google.android.material.badge.BadgeDrawable;
							public getBadge(): com.google.android.material.badge.BadgeDrawable;
							public getId(): number;
							public removeBadge(): void;
							public setContentDescription(resId: number): com.google.android.material.tabs.TabLayout.Tab;
						}
						export class TabGravity extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.TabGravity>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayout$TabGravity interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class TabIndicatorAnimationMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.TabIndicatorAnimationMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayout$TabIndicatorAnimationMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class TabIndicatorGravity extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.TabIndicatorGravity>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayout$TabIndicatorGravity interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class TabLayoutOnPageChangeListener extends java.lang.Object implements androidx.viewpager.widget.ViewPager.OnPageChangeListener {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.TabLayoutOnPageChangeListener>;
							public onPageScrollStateChanged(param0: number): void;
							public onPageScrolled(param0: number, param1: number, param2: number): void;
							public onPageScrolled(position: number, positionOffset: number, positionOffsetPixels: number): void;
							public onPageSelected(position: number): void;
							public constructor(tabLayout: com.google.android.material.tabs.TabLayout);
							public onPageScrollStateChanged(state: number): void;
							public onPageSelected(param0: number): void;
						}
						export class TabView extends android.widget.LinearLayout {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.TabView>;
							public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
							public addView(child: android.view.View, index: number): void;
							public addView(child: android.view.View, width: number, height: number): void;
							public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
							public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
							public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
							public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
							public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
							public childDrawableStateChanged(param0: android.view.View): void;
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
							public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
							public clearChildFocus(param0: android.view.View): void;
							public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
							public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
							public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
							public focusSearch(direction: number): android.view.View;
							public focusableViewAvailable(v: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public performClick(): boolean;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public focusSearch(focused: android.view.View, direction: number): android.view.View;
							public childDrawableStateChanged(child: android.view.View): void;
							public removeView(view: android.view.View): void;
							public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public showContextMenuForChild(originalView: android.view.View): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
							public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
							public requestTransparentRegion(param0: android.view.View): void;
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
							public getParentForAccessibility(): android.view.ViewParent;
							public getTextDirection(): number;
							public isLayoutRequested(): boolean;
							public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
							public onMeasure(origWidthMeasureSpec: number, origHeightMeasureSpec: number): void;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public sendAccessibilityEvent(eventType: number): void;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
							public requestChildFocus(child: android.view.View, focused: android.view.View): void;
							public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							/** @deprecated */
							public requestFitSystemWindows(): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
							public addView(child: android.view.View): void;
							public bringChildToFront(param0: android.view.View): void;
							public requestTransparentRegion(child: android.view.View): void;
							public recomputeViewAttributes(child: android.view.View): void;
							public clearChildFocus(child: android.view.View): void;
							public constructor(context: android.content.Context);
							public setSelected(selected: boolean): void;
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
							public constructor(this$0: com.google.android.material.tabs.TabLayout, context: android.content.Context);
							public requestFitSystemWindows(): void;
							public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
							public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
							public getTab(): com.google.android.material.tabs.TabLayout.Tab;
							public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
							public getTextAlignment(): number;
							public bringChildToFront(child: android.view.View): void;
							public onStopNestedScroll(child: android.view.View): void;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public createContextMenu(menu: android.view.ContextMenu): void;
							public sendAccessibilityEvent(param0: number): void;
							public drawableStateChanged(): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
							public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
							public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						}
						export class ViewPagerOnTabSelectedListener extends java.lang.Object implements com.google.android.material.tabs.TabLayout.OnTabSelectedListener {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayout.ViewPagerOnTabSelectedListener>;
							public onTabUnselected(tab: com.google.android.material.tabs.TabLayout.Tab): void;
							public onTabReselected(param0: any): void;
							public onTabSelected(param0: any): void;
							public onTabSelected(tab: com.google.android.material.tabs.TabLayout.Tab): void;
							public onTabReselected(tab: com.google.android.material.tabs.TabLayout.Tab): void;
							public onTabUnselected(param0: any): void;
							public constructor(viewPager: androidx.viewpager.widget.ViewPager);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module tabs {
					export class TabLayoutMediator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.tabs.TabLayoutMediator>;
						public constructor(tabLayout: com.google.android.material.tabs.TabLayout, viewPager: androidx.viewpager2.widget.ViewPager2, autoRefresh: boolean, tabConfigurationStrategy: com.google.android.material.tabs.TabLayoutMediator.TabConfigurationStrategy);
						public constructor(tabLayout: com.google.android.material.tabs.TabLayout, viewPager: androidx.viewpager2.widget.ViewPager2, autoRefresh: boolean, smoothScroll: boolean, tabConfigurationStrategy: com.google.android.material.tabs.TabLayoutMediator.TabConfigurationStrategy);
						public isAttached(): boolean;
						public constructor(tabLayout: com.google.android.material.tabs.TabLayout, viewPager: androidx.viewpager2.widget.ViewPager2, tabConfigurationStrategy: com.google.android.material.tabs.TabLayoutMediator.TabConfigurationStrategy);
						public detach(): void;
						public attach(): void;
					}
					export module TabLayoutMediator {
						export class PagerAdapterObserver extends androidx.recyclerview.widget.RecyclerView.AdapterDataObserver {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayoutMediator.PagerAdapterObserver>;
							public onChanged(): void;
							public onItemRangeMoved(fromPosition: number, toPosition: number, itemCount: number): void;
							public onItemRangeInserted(positionStart: number, itemCount: number): void;
							public onItemRangeChanged(positionStart: number, itemCount: number, payload: any): void;
							public onItemRangeRemoved(positionStart: number, itemCount: number): void;
							public onItemRangeInserted(param0: number, param1: number): void;
							public onItemRangeChanged(param0: number, param1: number, param2: any): void;
							public onItemRangeChanged(param0: number, param1: number): void;
							public onItemRangeChanged(positionStart: number, itemCount: number): void;
							public onItemRangeRemoved(param0: number, param1: number): void;
							public onItemRangeMoved(param0: number, param1: number, param2: number): void;
						}
						export class TabConfigurationStrategy extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayoutMediator.TabConfigurationStrategy>;
							/**
							 * Constructs a new instance of the com.google.android.material.tabs.TabLayoutMediator$TabConfigurationStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onConfigureTab(param0: com.google.android.material.tabs.TabLayout.Tab, param1: number): void;
							});
							public constructor();
							public onConfigureTab(param0: com.google.android.material.tabs.TabLayout.Tab, param1: number): void;
						}
						export class TabLayoutOnPageChangeCallback extends androidx.viewpager2.widget.ViewPager2.OnPageChangeCallback {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayoutMediator.TabLayoutOnPageChangeCallback>;
							public onPageScrollStateChanged(param0: number): void;
							public onPageScrolled(param0: number, param1: number, param2: number): void;
							public onPageScrolled(position: number, positionOffset: number, positionOffsetPixels: number): void;
							public onPageSelected(position: number): void;
							public onPageScrollStateChanged(state: number): void;
							public onPageSelected(param0: number): void;
						}
						export class ViewPagerOnTabSelectedListener extends java.lang.Object implements com.google.android.material.tabs.TabLayout.OnTabSelectedListener {
							public static class: java.lang.Class<com.google.android.material.tabs.TabLayoutMediator.ViewPagerOnTabSelectedListener>;
							public onTabUnselected(tab: com.google.android.material.tabs.TabLayout.Tab): void;
							public onTabReselected(param0: any): void;
							public onTabSelected(param0: any): void;
							public onTabSelected(tab: com.google.android.material.tabs.TabLayout.Tab): void;
							public onTabReselected(tab: com.google.android.material.tabs.TabLayout.Tab): void;
							public onTabUnselected(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class ClearTextEndIconDelegate extends com.google.android.material.textfield.EndIconDelegate {
						public static class: java.lang.Class<com.google.android.material.textfield.ClearTextEndIconDelegate>;
						public onEditTextAttached(editText: android.widget.EditText): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class CustomEndIconDelegate extends com.google.android.material.textfield.EndIconDelegate {
						public static class: java.lang.Class<com.google.android.material.textfield.CustomEndIconDelegate>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class CutoutDrawable extends com.google.android.material.shape.MaterialShapeDrawable {
						public static class: java.lang.Class<com.google.android.material.textfield.CutoutDrawable>;
						public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setTintList(param0: android.content.res.ColorStateList): void;
						public setTint(param0: number): void;
						public setTintList(tintList: android.content.res.ColorStateList): void;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public mutate(): android.graphics.drawable.Drawable;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setTint(tintColor: number): void;
						public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
					}
					export module CutoutDrawable {
						export class CutoutDrawableState extends com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState {
							public static class: java.lang.Class<com.google.android.material.textfield.CutoutDrawable.CutoutDrawableState>;
							public newDrawable(res: android.content.res.Resources): android.graphics.drawable.Drawable;
							public newDrawable(): android.graphics.drawable.Drawable;
							public newDrawable(res: android.content.res.Resources, theme: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
						}
						export class ImplApi14 extends com.google.android.material.textfield.CutoutDrawable {
							public static class: java.lang.Class<com.google.android.material.textfield.CutoutDrawable.ImplApi14>;
							public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
							public setTintList(param0: android.content.res.ColorStateList): void;
							public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
							public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
							public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
							public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
							public setTint(param0: number): void;
							public drawStrokeShape(canvas: android.graphics.Canvas): void;
							public setTint(tintColor: number): void;
							public setTintList(tintList: android.content.res.ColorStateList): void;
							public draw(canvas: android.graphics.Canvas): void;
						}
						export class ImplApi18 extends com.google.android.material.textfield.CutoutDrawable {
							public static class: java.lang.Class<com.google.android.material.textfield.CutoutDrawable.ImplApi18>;
							public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
							public setTintList(param0: android.content.res.ColorStateList): void;
							public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
							public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
							public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
							public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
							public setTint(param0: number): void;
							public drawStrokeShape(canvas: android.graphics.Canvas): void;
							public setTint(tintColor: number): void;
							public setTintList(tintList: android.content.res.ColorStateList): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class DropdownMenuEndIconDelegate extends com.google.android.material.textfield.EndIconDelegate {
						public static class: java.lang.Class<com.google.android.material.textfield.DropdownMenuEndIconDelegate>;
						public onInitializeAccessibilityNodeInfo(host: android.view.View, info: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
						public onPopulateAccessibilityEvent(host: android.view.View, event: android.view.accessibility.AccessibilityEvent): void;
						public afterEditTextChanged(s: android.text.Editable): void;
						public onEditTextAttached(editText: android.widget.EditText): void;
						public getTouchExplorationStateChangeListener(): androidx.core.view.accessibility.AccessibilityManagerCompat.TouchExplorationStateChangeListener;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class EditTextUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.textfield.EditTextUtils>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class EndCompoundLayout extends android.widget.LinearLayout {
						public static class: java.lang.Class<com.google.android.material.textfield.EndCompoundLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public focusSearch(direction: number): android.view.View;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
					export module EndCompoundLayout {
						export class EndIconDelegates extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.textfield.EndCompoundLayout.EndIconDelegates>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export abstract class EndIconDelegate extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.textfield.EndIconDelegate>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class IconHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.textfield.IconHelper>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class IndicatorViewController extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.textfield.IndicatorViewController>;
						public constructor(textInputView: com.google.android.material.textfield.TextInputLayout);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class MaterialAutoCompleteTextView extends androidx.appcompat.widget.AppCompatAutoCompleteTextView {
						public static class: java.lang.Class<com.google.android.material.textfield.MaterialAutoCompleteTextView>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public setDropDownBackgroundTint(dropDownBackgroundColor: number): void;
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(context: android.content.Context, attributeSet: android.util.AttributeSet);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setSimpleItems(stringArrayResId: number): void;
						public getHint(): string;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number, popupTheme: android.content.res.Resources.Theme);
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public showDropDown(): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public setSimpleItemSelectedColor(simpleItemSelectedColor: number): void;
						public setOnItemSelectedListener(listener: android.widget.AdapterView.OnItemSelectedListener): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public onFilterComplete(param0: number): void;
						public sendAccessibilityEvent(eventType: number): void;
						public setSimpleItemSelectedRippleColor(simpleItemSelectedRippleColor: android.content.res.ColorStateList): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public setSimpleItems(stringArray: string[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public setOnItemSelectedListener(l: android.widget.AdapterView.OnItemSelectedListener): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public onFilterComplete(count: number): void;
						public getDropDownBackgroundTintList(): android.content.res.ColorStateList;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public getPopupElevation(): number;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public onAttachedToWindow(): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setDropDownBackgroundTintList(dropDownBackgroundTint: android.content.res.ColorStateList): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public constructor(context: android.content.Context, attributeSet: android.util.AttributeSet, defStyleAttr: number);
						public setRawInputType(type: number): void;
						public dismissDropDown(): void;
						public getSimpleItemSelectedRippleColor(): android.content.res.ColorStateList;
						public setEmojiCompatEnabled(param0: boolean): void;
						public setDropDownBackgroundDrawable(d: android.graphics.drawable.Drawable): void;
						public getSimpleItemSelectedColor(): number;
						public onDetachedFromWindow(): void;
						public onWindowFocusChanged(hasWindowFocus: boolean): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setAdapter(adapter: android.widget.ListAdapter): void;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					}
					export module MaterialAutoCompleteTextView {
						export class MaterialArrayAdapter<T>  extends android.widget.ArrayAdapter<string> {
							public static class: java.lang.Class<com.google.android.material.textfield.MaterialAutoCompleteTextView.MaterialArrayAdapter<any>>;
							public isEnabled(position: number): boolean;
							public getDropDownViewTheme(): android.content.res.Resources.Theme;
							public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
							public setDropDownViewTheme(theme: android.content.res.Resources.Theme): void;
							public getView(position: number, convertView: android.view.View, parent: android.view.ViewGroup): android.view.View;
							public getDropDownView(position: number, convertView: android.view.View, parent: android.view.ViewGroup): android.view.View;
							public areAllItemsEnabled(): boolean;
							public setDropDownViewTheme(param0: android.content.res.Resources.Theme): void;
							public getFilter(): android.widget.Filter;
							public isEnabled(param0: number): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class NoEndIconDelegate extends com.google.android.material.textfield.EndIconDelegate {
						public static class: java.lang.Class<com.google.android.material.textfield.NoEndIconDelegate>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class PasswordToggleEndIconDelegate extends com.google.android.material.textfield.EndIconDelegate {
						public static class: java.lang.Class<com.google.android.material.textfield.PasswordToggleEndIconDelegate>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class StartCompoundLayout extends android.widget.LinearLayout {
						public static class: java.lang.Class<com.google.android.material.textfield.StartCompoundLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public focusSearch(direction: number): android.view.View;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class TextInputEditText extends androidx.appcompat.widget.AppCompatEditText {
						public static class: java.lang.Class<com.google.android.material.textfield.TextInputEditText>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onCreateInputConnection(param0: android.view.inputmethod.EditorInfo): android.view.inputmethod.InputConnection;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public onAttachedToWindow(): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public getFocusedRect(r: android.graphics.Rect): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public getHint(): string;
						public requestRectangleOnScreen(rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onReceiveContent(param0: androidx.core.view.ContentInfoCompat): androidx.core.view.ContentInfoCompat;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public requestRectangleOnScreen(rectangle: android.graphics.Rect): boolean;
						public setEmojiCompatEnabled(param0: boolean): void;
						public onCreateInputConnection(outAttrs: android.view.inputmethod.EditorInfo): android.view.inputmethod.InputConnection;
						public isTextInputLayoutFocusedRectEnabled(): boolean;
						public setTextInputLayoutFocusedRectEnabled(textInputLayoutFocusedRectEnabled: boolean): void;
						public sendAccessibilityEvent(eventType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public getGlobalVisibleRect(r: android.graphics.Rect): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getGlobalVisibleRect(r: android.graphics.Rect, globalOffset: android.graphics.Point): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textfield {
					export class TextInputLayout extends android.widget.LinearLayout {
						public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout>;
						public static BOX_BACKGROUND_NONE: number;
						public static BOX_BACKGROUND_FILLED: number;
						public static BOX_BACKGROUND_OUTLINE: number;
						public static END_ICON_CUSTOM: number;
						public static END_ICON_NONE: number;
						public static END_ICON_PASSWORD_TOGGLE: number;
						public static END_ICON_CLEAR_TEXT: number;
						public static END_ICON_DROPDOWN_MENU: number;
						public isLayoutRequested(): boolean;
						public setBoxCornerFamily(cornerFamily: number): void;
						public onStopNestedScroll(param0: android.view.View): void;
						/** @deprecated */
						public isPasswordVisibilityToggleEnabled(): boolean;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public getBoxCornerRadiusBottomEnd(): number;
						public setBoxCornerRadiiResources(boxCornerRadiusTopStartId: number, boxCornerRadiusTopEndId: number, boxCornerRadiusBottomEndId: number, boxCornerRadiusBottomStartId: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public isHintAnimationEnabled(): boolean;
						public getBoxBackgroundMode(): number;
						public setStartIconContentDescription(startIconContentDescription: string): void;
						public setCounterTextAppearance(counterTextAppearance: number): void;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setCounterMaxLength(maxLength: number): void;
						public getErrorAccessibilityLiveRegion(): number;
						public setMaxWidthResource(maxWidthId: number): void;
						public setError(errorText: string): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						/** @deprecated */
						public setPasswordVisibilityToggleTintList(tintList: android.content.res.ColorStateList): void;
						public setBoxCollapsedPaddingTop(boxCollapsedPaddingTop: number): void;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public setStartIconTintList(startIconTintList: android.content.res.ColorStateList): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public addOnEditTextAttachedListener(listener: com.google.android.material.textfield.TextInputLayout.OnEditTextAttachedListener): void;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public getBoxStrokeWidthFocused(): number;
						public isTextDirectionResolved(): boolean;
						public setEndIconMinSize(iconSize: number): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public setStartIconTintMode(startIconTintMode: android.graphics.PorterDuff.Mode): void;
						public getStartIconScaleType(): android.widget.ImageView.ScaleType;
						public setStartIconVisible(visible: boolean): void;
						public focusSearch(direction: number): android.view.View;
						public setBoxBackgroundColorStateList(boxBackgroundColorStateList: android.content.res.ColorStateList): void;
						public setMaxWidth(maxWidth: number): void;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setCounterEnabled(enabled: boolean): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public setBoxStrokeWidthResource(boxStrokeWidthResId: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public getBoxStrokeErrorColor(): android.content.res.ColorStateList;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public clearOnEndIconChangedListeners(): void;
						public refreshErrorIconDrawableState(): void;
						public getEditText(): android.widget.EditText;
						public getMinWidth(): number;
						public isStartIconVisible(): boolean;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public canResolveTextAlignment(): boolean;
						public setCounterTextColor(counterTextColor: android.content.res.ColorStateList): void;
						public setSuffixTextColor(suffixTextColor: android.content.res.ColorStateList): void;
						public draw(canvas: android.graphics.Canvas): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public onLayout(changed: boolean, l: number, t: number, r: number, b: number): void;
						public setPlaceholderTextAppearance(placeholderTextAppearance: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public getBaseline(): number;
						public setPrefixTextAppearance(prefixTextAppearance: number): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public getPlaceholderTextColor(): android.content.res.ColorStateList;
						public bringChildToFront(child: android.view.View): void;
						public addOnEndIconChangedListener(listener: com.google.android.material.textfield.TextInputLayout.OnEndIconChangedListener): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getBoxBackgroundColor(): number;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public isCounterEnabled(): boolean;
						public onConfigurationChanged(newConfig: android.content.res.Configuration): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public setErrorIconTintMode(errorIconTintMode: android.graphics.PorterDuff.Mode): void;
						public setEndIconScaleType(scaleType: android.widget.ImageView.ScaleType): void;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public getHintTextColor(): android.content.res.ColorStateList;
						public setPrefixText(prefixText: string): void;
						public setHint(textHintId: number): void;
						public getSuffixText(): string;
						public setHelperTextColor(helperTextColor: android.content.res.ColorStateList): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public setErrorIconDrawable(errorIconDrawable: android.graphics.drawable.Drawable): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getEndIconScaleType(): android.widget.ImageView.ScaleType;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setCounterOverflowTextColor(counterOverflowTextColor: android.content.res.ColorStateList): void;
						public setBoxStrokeColor(boxStrokeColor: number): void;
						public setBoxBackgroundColor(boxBackgroundColor: number): void;
						public setStartIconOnClickListener(startIconOnClickListener: android.view.View.OnClickListener): void;
						public setBoxBackgroundColorResource(boxBackgroundColorId: number): void;
						public setCounterOverflowTextAppearance(counterOverflowTextAppearance: number): void;
						public getLengthCounter(): com.google.android.material.textfield.TextInputLayout.LengthCounter;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public setStartIconOnLongClickListener(startIconOnLongClickListener: android.view.View.OnLongClickListener): void;
						/** @deprecated */
						public setPasswordVisibilityToggleContentDescription(description: string): void;
						public setEndIconOnLongClickListener(endIconOnLongClickListener: android.view.View.OnLongClickListener): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getBoxStrokeColor(): number;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public getCursorErrorColor(): android.content.res.ColorStateList;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public getDefaultHintTextColor(): android.content.res.ColorStateList;
						public setEndIconVisible(visible: boolean): void;
						public isEndIconCheckable(): boolean;
						public setErrorContentDescription(errorContentDescription: string): void;
						public removeView(view: android.view.View): void;
						public getSuffixTextColor(): android.content.res.ColorStateList;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setStartIconDrawable(resId: number): void;
						public isHintEnabled(): boolean;
						public setHintTextAppearance(resId: number): void;
						public setStartIconMinSize(iconSize: number): void;
						/** @deprecated */
						public getPasswordVisibilityToggleDrawable(): android.graphics.drawable.Drawable;
						public setErrorIconTintList(errorIconTintList: android.content.res.ColorStateList): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						/** @deprecated */
						public setPasswordVisibilityToggleTintMode(mode: android.graphics.PorterDuff.Mode): void;
						public isErrorEnabled(): boolean;
						public getCounterOverflowTextColor(): android.content.res.ColorStateList;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						/** @deprecated */
						public passwordVisibilityToggleRequested(shouldSkipAnimations: boolean): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public refreshEndIconDrawableState(): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public setTypeface(typeface: android.graphics.Typeface): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public setHelperTextTextAppearance(helperTextTextAppearance: number): void;
						public onSaveInstanceState(): android.os.Parcelable;
						public getMaxWidth(): number;
						public getHint(): string;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public getEndIconMinSize(): number;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public isProvidingHint(): boolean;
						public setErrorTextAppearance(errorTextAppearance: number): void;
						public setStartIconCheckable(startIconCheckable: boolean): void;
						public getTextDirection(): number;
						public setErrorIconOnClickListener(errorIconOnClickListener: android.view.View.OnClickListener): void;
						public refreshStartIconDrawableState(): void;
						public getErrorCurrentTextColors(): number;
						public isEndIconVisible(): boolean;
						public setTextInputAccessibilityDelegate(delegate: com.google.android.material.textfield.TextInputLayout.AccessibilityDelegate): void;
						public getCursorColor(): android.content.res.ColorStateList;
						public setEnabled(enabled: boolean): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public setEndIconContentDescription(endIconContentDescription: string): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public setBoxBackgroundMode(boxBackgroundMode: number): void;
						public getPlaceholderText(): string;
						public setErrorEnabled(enabled: boolean): void;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public setCursorColor(cursorColor: android.content.res.ColorStateList): void;
						public setHintTextColor(hintTextColor: android.content.res.ColorStateList): void;
						public setErrorTextColor(errorTextColor: android.content.res.ColorStateList): void;
						public setStartIconScaleType(scaleType: android.widget.ImageView.ScaleType): void;
						public dispatchRestoreInstanceState(container: android.util.SparseArray<android.os.Parcelable>): void;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public setErrorAccessibilityLiveRegion(errorAccessibilityLiveRegion: number): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public setBoxStrokeErrorColor(strokeErrorColor: android.content.res.ColorStateList): void;
						/** @deprecated */
						public setPasswordVisibilityToggleDrawable(icon: android.graphics.drawable.Drawable): void;
						public removeOnEditTextAttachedListener(listener: com.google.android.material.textfield.TextInputLayout.OnEditTextAttachedListener): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public getPrefixTextColor(): android.content.res.ColorStateList;
						public setBoxStrokeWidthFocused(boxStrokeWidthFocused: number): void;
						public setStartIconContentDescription(resId: number): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setSuffixTextAppearance(suffixTextAppearance: number): void;
						public isExpandedHintEnabled(): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public addView(child: android.view.View, index: number): void;
						public setMinWidth(minWidth: number): void;
						public setEndIconContentDescription(resId: number): void;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public getPrefixTextView(): android.widget.TextView;
						public getErrorContentDescription(): string;
						public setErrorIconOnLongClickListener(errorIconOnLongClickListener: android.view.View.OnLongClickListener): void;
						public getEndIconContentDescription(): string;
						public getBoxCollapsedPaddingTop(): number;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public setPrefixTextColor(prefixTextColor: android.content.res.ColorStateList): void;
						public onRtlPropertiesChanged(layoutDirection: number): void;
						public setCursorErrorColor(cursorErrorColor: android.content.res.ColorStateList): void;
						public setEndIconActivated(endIconActivated: boolean): void;
						public getBoxCornerRadiusTopStart(): number;
						public setHelperText(helperText: string): void;
						public getMinEms(): number;
						public setStartIconDrawable(startIconDrawable: android.graphics.drawable.Drawable): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public dispatchProvideAutofillStructure(structure: any, flags: number): void;
						public getTextAlignment(): number;
						public setEndIconDrawable(endIconDrawable: android.graphics.drawable.Drawable): void;
						public setEndIconTintList(endIconTintList: android.content.res.ColorStateList): void;
						public getPrefixText(): string;
						public onRestoreInstanceState(state: android.os.Parcelable): void;
						public isHelperTextEnabled(): boolean;
						public getStartIconDrawable(): android.graphics.drawable.Drawable;
						public getBoxStrokeWidth(): number;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public getStartIconContentDescription(): string;
						public sendAccessibilityEvent(param0: number): void;
						public getCounterMaxLength(): number;
						public getEndIconMode(): number;
						public setPlaceholderText(placeholderText: string): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public getTypeface(): android.graphics.Typeface;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public setEndIconOnClickListener(endIconOnClickListener: android.view.View.OnClickListener): void;
						public requestTransparentRegion(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public getStartIconMinSize(): number;
						public setHint(hint: string): void;
						public setDefaultHintTextColor(textColor: android.content.res.ColorStateList): void;
						public setBoxStrokeColorStateList(boxStrokeColorStateList: android.content.res.ColorStateList): void;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public getBoxCornerRadiusTopEnd(): number;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public removeOnEndIconChangedListener(listener: com.google.android.material.textfield.TextInputLayout.OnEndIconChangedListener): void;
						public setLengthCounter(lengthCounter: com.google.android.material.textfield.TextInputLayout.LengthCounter): void;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public setMaxEms(maxEms: number): void;
						public setHelperTextEnabled(enabled: boolean): void;
						public focusableViewAvailable(v: android.view.View): void;
						public getPlaceholderTextAppearance(): number;
						public setEndIconDrawable(resId: number): void;
						public setBoxCornerRadii(boxCornerRadiusTopStart: number, boxCornerRadiusTopEnd: number, boxCornerRadiusBottomStart: number, boxCornerRadiusBottomEnd: number): void;
						public setHintEnabled(enabled: boolean): void;
						/** @deprecated */
						public setPasswordVisibilityToggleDrawable(resId: number): void;
						public setMinEms(minEms: number): void;
						public setPlaceholderTextColor(placeholderTextColor: android.content.res.ColorStateList): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public getError(): string;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public setHintAnimationEnabled(enabled: boolean): void;
						public setMinWidthResource(minWidthId: number): void;
						public setEndIconMode(endIconMode: number): void;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public getSuffixTextView(): android.widget.TextView;
						public getBoxCornerRadiusBottomStart(): number;
						public drawableStateChanged(): void;
						public setBoxStrokeWidth(boxStrokeWidth: number): void;
						public setBoxStrokeWidthFocusedResource(boxStrokeWidthFocusedResId: number): void;
						public getHelperText(): string;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public getErrorIconDrawable(): android.graphics.drawable.Drawable;
						/** @deprecated */
						public getPasswordVisibilityToggleContentDescription(): string;
						public getMaxEms(): number;
						public getHelperTextCurrentTextColor(): number;
						public setErrorIconDrawable(resId: number): void;
						public setEndIconTintMode(endIconTintMode: android.graphics.PorterDuff.Mode): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						/** @deprecated */
						public setPasswordVisibilityToggleContentDescription(resId: number): void;
						public isStartIconCheckable(): boolean;
						public clearChildFocus(param0: android.view.View): void;
						public setEndIconCheckable(endIconCheckable: boolean): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public getEndIconDrawable(): android.graphics.drawable.Drawable;
						public setExpandedHintEnabled(enabled: boolean): void;
						public getCounterTextColor(): android.content.res.ColorStateList;
						public clearOnEditTextAttachedListeners(): void;
						public setSuffixText(suffixText: string): void;
						/** @deprecated */
						public setPasswordVisibilityToggleEnabled(enabled: boolean): void;
					}
					export module TextInputLayout {
						export class comgoogleandroidmaterialtextfieldTextInputLayoutAccessibilityDelegate extends androidx.core.view.AccessibilityDelegateCompat {
							public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout.AccessibilityDelegate>;
							public constructor();
							public onInitializeAccessibilityNodeInfo(host: android.view.View, info: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public onInitializeAccessibilityNodeInfo(param0: android.view.View, param1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
							public constructor(layout: com.google.android.material.textfield.TextInputLayout);
							public onPopulateAccessibilityEvent(host: android.view.View, event: android.view.accessibility.AccessibilityEvent): void;
							public constructor(param0: any);
							public onPopulateAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): void;
						}
						export type AccessibilityDelegate = comgoogleandroidmaterialtextfieldTextInputLayoutAccessibilityDelegate
						export class BoxBackgroundMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout.BoxBackgroundMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.textfield.TextInputLayout$BoxBackgroundMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class EndIconMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout.EndIconMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.textfield.TextInputLayout$EndIconMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class LengthCounter extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout.LengthCounter>;
							/**
							 * Constructs a new instance of the com.google.android.material.textfield.TextInputLayout$LengthCounter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								countLength(param0: android.text.Editable): number;
							});
							public constructor();
							public countLength(param0: android.text.Editable): number;
						}
						export class OnEditTextAttachedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout.OnEditTextAttachedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.textfield.TextInputLayout$OnEditTextAttachedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onEditTextAttached(param0: com.google.android.material.textfield.TextInputLayout): void;
							});
							public constructor();
							public onEditTextAttached(param0: com.google.android.material.textfield.TextInputLayout): void;
						}
						export class OnEndIconChangedListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout.OnEndIconChangedListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.textfield.TextInputLayout$OnEndIconChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onEndIconChanged(param0: com.google.android.material.textfield.TextInputLayout, param1: number): void;
							});
							public constructor();
							public onEndIconChanged(param0: com.google.android.material.textfield.TextInputLayout, param1: number): void;
						}
						export class SavedState extends androidx.customview.view.AbsSavedState {
							public static class: java.lang.Class<com.google.android.material.textfield.TextInputLayout.SavedState>;
							public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.textfield.TextInputLayout.SavedState>;
							public writeToParcel(dest: android.os.Parcel, flags: number): void;
							public describeContents(): number;
							public toString(): string;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module textview {
					export class MaterialTextView extends androidx.appcompat.widget.AppCompatTextView {
						public static class: java.lang.Class<com.google.android.material.textview.MaterialTextView>;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public isEmojiCompatEnabled(): boolean;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
						public setTextAppearance(context: android.content.Context, resId: number): void;
						public getAutoSizeTextAvailableSizes(): number[];
						public sendAccessibilityEvent(eventType: number): void;
						public getAutoSizeMaxTextSize(): number;
						public setTextAppearance(param0: android.content.Context, param1: number): void;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public getSupportBackgroundTintList(): android.content.res.ColorStateList;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public getSupportCompoundDrawablesTintMode(): android.graphics.PorterDuff.Mode;
						public setSupportCompoundDrawablesTintList(param0: android.content.res.ColorStateList): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						/** @deprecated */
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public setTextAppearance(resId: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setEmojiCompatEnabled(param0: boolean): void;
						public getAutoSizeStepGranularity(): number;
						public setAutoSizeTextTypeWithDefaults(param0: number): void;
						public getAutoSizeMinTextSize(): number;
						public setAutoSizeTextTypeUniformWithPresetSizes(param0: number[], param1: number): void;
						public getAutoSizeTextType(): number;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setSupportCompoundDrawablesTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public getSupportCompoundDrawablesTintList(): android.content.res.ColorStateList;
						public setAutoSizeTextTypeUniformWithConfiguration(param0: number, param1: number, param2: number, param3: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module theme {
					export class MaterialComponentsViewInflater extends androidx.appcompat.app.AppCompatViewInflater {
						public static class: java.lang.Class<com.google.android.material.theme.MaterialComponentsViewInflater>;
						public constructor();
						public createRadioButton(param0: android.content.Context, param1: android.util.AttributeSet): androidx.appcompat.widget.AppCompatRadioButton;
						public createAutoCompleteTextView(param0: android.content.Context, param1: android.util.AttributeSet): androidx.appcompat.widget.AppCompatAutoCompleteTextView;
						public createButton(param0: android.content.Context, param1: android.util.AttributeSet): androidx.appcompat.widget.AppCompatButton;
						public createCheckBox(param0: android.content.Context, param1: android.util.AttributeSet): androidx.appcompat.widget.AppCompatCheckBox;
						public createTextView(context: android.content.Context, attrs: android.util.AttributeSet): androidx.appcompat.widget.AppCompatTextView;
						public createRadioButton(context: android.content.Context, attrs: android.util.AttributeSet): androidx.appcompat.widget.AppCompatRadioButton;
						public createAutoCompleteTextView(context: android.content.Context, attrs: android.util.AttributeSet): androidx.appcompat.widget.AppCompatAutoCompleteTextView;
						public createTextView(param0: android.content.Context, param1: android.util.AttributeSet): androidx.appcompat.widget.AppCompatTextView;
						public createCheckBox(context: android.content.Context, attrs: android.util.AttributeSet): androidx.appcompat.widget.AppCompatCheckBox;
						public createButton(context: android.content.Context, attrs: android.util.AttributeSet): androidx.appcompat.widget.AppCompatButton;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module theme {
					export module overlay {
						export class MaterialThemeOverlay extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.theme.overlay.MaterialThemeOverlay>;
							public static wrap(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number): android.content.Context;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class ChipTextInputComboView extends android.widget.FrameLayout implements android.widget.Checkable {
						public static class: java.lang.Class<com.google.android.material.timepicker.ChipTextInputComboView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public setOnClickListener(l: android.view.View.OnClickListener): void;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public setChecked(checked: boolean): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setTag(key: number, tag: any): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public setHelperText(helperText: string): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setTag(tag: any): void;
						public getTextInput(): com.google.android.material.textfield.TextInputLayout;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public onConfigurationChanged(newConfig: android.content.res.Configuration): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public addInputFilter(filter: android.text.InputFilter): void;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public toggle(): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setCursorVisible(visible: boolean): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public isChecked(): boolean;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setText(text: string): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setChipDelegate(clickActionDelegate: androidx.core.view.AccessibilityDelegateCompat): void;
					}
					export module ChipTextInputComboView {
						export class TextFormatter extends com.google.android.material.internal.TextWatcherAdapter {
							public static class: java.lang.Class<com.google.android.material.timepicker.ChipTextInputComboView.TextFormatter>;
							public afterTextChanged(editable: android.text.Editable): void;
							public afterTextChanged(param0: android.text.Editable): void;
							public afterTextChanged(s: android.text.Editable): void;
							public onTextChanged(s: string, start: number, before: number, count: number): void;
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public beforeTextChanged(s: string, start: number, count: number, after: number): void;
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class ClickActionDelegate extends androidx.core.view.AccessibilityDelegateCompat {
						public static class: java.lang.Class<com.google.android.material.timepicker.ClickActionDelegate>;
						public constructor(context: android.content.Context, resId: number);
						public onInitializeAccessibilityNodeInfo(host: android.view.View, info: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
						public constructor();
						public constructor(param0: any);
						public onInitializeAccessibilityNodeInfo(param0: android.view.View, param1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class ClockFaceView extends com.google.android.material.timepicker.RadialViewGroup implements com.google.android.material.timepicker.ClockHandView.OnRotateListener {
						public static class: java.lang.Class<com.google.android.material.timepicker.ClockFaceView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setValues(values: string[], contentDescription: number): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public onMeasure(param0: number, param1: number): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setHandRotation(rotation: number): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public onInitializeAccessibilityNodeInfo(info: android.view.accessibility.AccessibilityNodeInfo): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public onRotate(rotation: number, animating: boolean): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onRotate(param0: number, param1: boolean): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public setRadius(radius: number): void;
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public updateLayoutParams(): void;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class ClockHandView extends android.view.View {
						public static class: java.lang.Class<com.google.android.material.timepicker.ClockHandView>;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public sendAccessibilityEvent(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public setHandRotation(degrees: number, animate: boolean): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public getSelectorRadius(): number;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onDraw(canvas: android.graphics.Canvas): void;
						public setCircleRadius(circleRadius: number): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public onLayout(changed: boolean, left: number, top: number, right: number, bottom: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public setAnimateOnTouchUp(animating: boolean): void;
						public getCurrentSelectorBox(): android.graphics.RectF;
						public getHandRotation(): number;
						public setHandRotation(degrees: number): void;
						public sendAccessibilityEvent(eventType: number): void;
						public onTouchEvent(event: android.view.MotionEvent): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public setOnActionUpListener(listener: com.google.android.material.timepicker.ClockHandView.OnActionUpListener): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public addOnRotateListener(listener: com.google.android.material.timepicker.ClockHandView.OnRotateListener): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
					export module ClockHandView {
						export class OnActionUpListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.timepicker.ClockHandView.OnActionUpListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.timepicker.ClockHandView$OnActionUpListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onActionUp(param0: number, param1: boolean): void;
							});
							public constructor();
							public onActionUp(param0: number, param1: boolean): void;
						}
						export class OnRotateListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.timepicker.ClockHandView.OnRotateListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.timepicker.ClockHandView$OnRotateListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onRotate(param0: number, param1: boolean): void;
							});
							public constructor();
							public onRotate(param0: number, param1: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class MaterialTimePicker extends androidx.fragment.app.DialogFragment implements com.google.android.material.timepicker.TimePickerView.OnDoubleTapListener {
						public static class: java.lang.Class<com.google.android.material.timepicker.MaterialTimePicker>;
						public static INPUT_MODE_CLOCK: number;
						public static INPUT_MODE_KEYBOARD: number;
						public removeOnCancelListener(listener: android.content.DialogInterface.OnCancelListener): boolean;
						public setHour(hour: number): void;
						public getInputMode(): number;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultRegistry, param2: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public getSavedStateRegistry(): androidx.savedstate.SavedStateRegistry;
						public registerForActivityResult(param0: androidx.activity.result.contract.ActivityResultContract, param1: androidx.activity.result.ActivityResultCallback): androidx.activity.result.ActivityResultLauncher;
						public removeOnNegativeButtonClickListener(listener: android.view.View.OnClickListener): boolean;
						public onSaveInstanceState(bundle: android.os.Bundle): void;
						public onLowMemory(): void;
						public removeOnDismissListener(listener: android.content.DialogInterface.OnDismissListener): boolean;
						public setCancelable(cancelable: boolean): void;
						public addOnPositiveButtonClickListener(listener: android.view.View.OnClickListener): boolean;
						public onDestroyView(): void;
						public onCancel(param0: android.content.DialogInterface): void;
						public onDoubleTap(): void;
						public getMinute(): number;
						public onCreate(bundle: android.os.Bundle): void;
						public onDismiss(dialogInterface: android.content.DialogInterface): void;
						public onCreate(param0: android.os.Bundle): void;
						public getDefaultViewModelProviderFactory(): androidx.lifecycle.ViewModelProvider.Factory;
						public addOnNegativeButtonClickListener(listener: android.view.View.OnClickListener): boolean;
						public removeOnPositiveButtonClickListener(listener: android.view.View.OnClickListener): boolean;
						public onDismiss(param0: android.content.DialogInterface): void;
						public setCancelable(param0: boolean): void;
						public clearOnPositiveButtonClickListeners(): void;
						public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
						public constructor();
						public clearOnNegativeButtonClickListeners(): void;
						public onConfigurationChanged(param0: android.content.res.Configuration): void;
						public addOnDismissListener(listener: android.content.DialogInterface.OnDismissListener): boolean;
						public onViewCreated(param0: android.view.View, param1: android.os.Bundle): void;
						public onViewCreated(view: android.view.View, bundle: android.os.Bundle): void;
						public setMinute(minute: number): void;
						public getHour(): number;
						public onCreateDialog(param0: android.os.Bundle): android.app.Dialog;
						public addOnCancelListener(listener: android.content.DialogInterface.OnCancelListener): boolean;
						public onCreateView(param0: android.view.LayoutInflater, param1: android.view.ViewGroup, param2: android.os.Bundle): android.view.View;
						public onCreateDialog(bundle: android.os.Bundle): android.app.Dialog;
						public constructor(param0: number);
						public onCancel(dialogInterface: android.content.DialogInterface): void;
						public getLifecycle(): androidx.lifecycle.Lifecycle;
						public clearOnCancelListeners(): void;
						public onCreateView(layoutInflater: android.view.LayoutInflater, viewGroup: android.view.ViewGroup, bundle: android.os.Bundle): android.view.View;
						public onSaveInstanceState(param0: android.os.Bundle): void;
						public getViewModelStore(): androidx.lifecycle.ViewModelStore;
						public clearOnDismissListeners(): void;
					}
					export module MaterialTimePicker {
						export class Builder extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.timepicker.MaterialTimePicker.Builder>;
							public constructor();
							public setTitleText(charSequence: string): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public build(): com.google.android.material.timepicker.MaterialTimePicker;
							public setInputMode(inputMode: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setMinute(minute: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setTheme(themeResId: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setTimeFormat(format: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setPositiveButtonText(positiveButtonText: string): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setHour(hour: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setNegativeButtonText(negativeButtonTextResId: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setTitleText(titleTextResId: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setPositiveButtonText(positiveButtonTextResId: number): com.google.android.material.timepicker.MaterialTimePicker.Builder;
							public setNegativeButtonText(negativeButtonText: string): com.google.android.material.timepicker.MaterialTimePicker.Builder;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class MaxInputValidator extends java.lang.Object implements android.text.InputFilter {
						public static class: java.lang.Class<com.google.android.material.timepicker.MaxInputValidator>;
						public constructor(max: number);
						public setMax(max: number): void;
						public filter(param0: string, param1: number, param2: number, param3: android.text.Spanned, param4: number, param5: number): string;
						public getMax(): number;
						public filter(source: string, start: number, end: number, dest: android.text.Spanned, dstart: number, dend: number): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class RadialViewGroup extends androidx.constraintlayout.widget.ConstraintLayout {
						public static class: java.lang.Class<com.google.android.material.timepicker.RadialViewGroup>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public setBackgroundColor(color: number): void;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public focusSearch(direction: number): android.view.View;
						public onViewRemoved(param0: android.view.View): void;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public addView(child: android.view.View, index: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getTextAlignment(): number;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public onViewRemoved(view: android.view.View): void;
						public getRadius(): number;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public onFinishInflate(): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public setRadius(radius: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public updateLayoutParams(): void;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimeFormat extends java.lang.Object implements java.lang.annotation.Annotation {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimeFormat>;
						/**
						 * Constructs a new instance of the com.google.android.material.timepicker.TimeFormat interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							equals(param0: any): boolean;
							hashCode(): number;
							toString(): string;
							annotationType(): java.lang.Class<any>;
						});
						public constructor();
						public static CLOCK_24H: number;
						public static CLOCK_12H: number;
						public equals(obj: any): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public annotationType(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimeModel extends java.lang.Object implements android.os.Parcelable {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimeModel>;
						public static ZERO_LEADING_NUMBER_FORMAT: string;
						public static NUMBER_FORMAT: string;
						public static CREATOR: android.os.Parcelable.Creator<com.google.android.material.timepicker.TimeModel>;
						public constructor(format: number);
						public setHour(hour: number): void;
						public static formatText(resources: android.content.res.Resources, text: string): string;
						public constructor();
						public equals(obj: any): boolean;
						public describeContents(): number;
						public setHourOfDay(hour: number): void;
						public hashCode(): number;
						public constructor(_in_: android.os.Parcel);
						public getMinuteInputValidator(): com.google.android.material.timepicker.MaxInputValidator;
						public writeToParcel(dest: android.os.Parcel, flags: number): void;
						public constructor(hour: number, minute: number, selection: number, format: number);
						public setMinute(minute: number): void;
						public getHourContentDescriptionResId(): number;
						public setPeriod(period: number): void;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public getHourForDisplay(): number;
						public static formatText(resources: android.content.res.Resources, text: string, format: string): string;
						public equals(o: any): boolean;
						public getHourInputValidator(): com.google.android.material.timepicker.MaxInputValidator;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimePickerClockPresenter extends java.lang.Object implements com.google.android.material.timepicker.ClockHandView.OnRotateListener, com.google.android.material.timepicker.TimePickerView.OnSelectionChange, com.google.android.material.timepicker.TimePickerView.OnPeriodChangeListener, com.google.android.material.timepicker.ClockHandView.OnActionUpListener, com.google.android.material.timepicker.TimePickerPresenter {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerClockPresenter>;
						public onRotate(param0: number, param1: boolean): void;
						public onSelectionChanged(selection: number): void;
						public hide(): void;
						public onSelectionChanged(param0: number): void;
						public onActionUp(rotation: number, moveInEventStream: boolean): void;
						public onPeriodChange(period: number): void;
						public invalidate(): void;
						public onPeriodChange(param0: number): void;
						public show(): void;
						public constructor(timePickerView: com.google.android.material.timepicker.TimePickerView, time: com.google.android.material.timepicker.TimeModel);
						public initialize(): void;
						public onActionUp(param0: number, param1: boolean): void;
						public onRotate(rotation: number, animating: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimePickerControls extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerControls>;
						/**
						 * Constructs a new instance of the com.google.android.material.timepicker.TimePickerControls interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							updateTime(param0: number, param1: number, param2: number): void;
							setActiveSelection(param0: number): void;
							setValues(param0: string[], param1: number): void;
							setHandRotation(param0: number): void;
						});
						public constructor();
						public setHandRotation(param0: number): void;
						public updateTime(param0: number, param1: number, param2: number): void;
						public setValues(param0: string[], param1: number): void;
						public setActiveSelection(param0: number): void;
					}
					export module TimePickerControls {
						export class ActiveSelection extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerControls.ActiveSelection>;
							/**
							 * Constructs a new instance of the com.google.android.material.timepicker.TimePickerControls$ActiveSelection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class ClockPeriod extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerControls.ClockPeriod>;
							/**
							 * Constructs a new instance of the com.google.android.material.timepicker.TimePickerControls$ClockPeriod interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimePickerPresenter extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerPresenter>;
						/**
						 * Constructs a new instance of the com.google.android.material.timepicker.TimePickerPresenter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							initialize(): void;
							invalidate(): void;
							hide(): void;
							show(): void;
						});
						public constructor();
						public invalidate(): void;
						public show(): void;
						public initialize(): void;
						public hide(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimePickerTextInputKeyController extends java.lang.Object implements android.widget.TextView.OnEditorActionListener, android.view.View.OnKeyListener {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerTextInputKeyController>;
						public onEditorAction(v: android.widget.TextView, actionId: number, event: android.view.KeyEvent): boolean;
						public onKey(param0: android.view.View, param1: number, param2: android.view.KeyEvent): boolean;
						public bind(): void;
						public onKey(view: android.view.View, keyCode: number, event: android.view.KeyEvent): boolean;
						public onEditorAction(param0: android.widget.TextView, param1: number, param2: android.view.KeyEvent): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimePickerTextInputPresenter extends java.lang.Object implements com.google.android.material.timepicker.TimePickerView.OnSelectionChange, com.google.android.material.timepicker.TimePickerPresenter {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerTextInputPresenter>;
						public onSelectionChanged(selection: number): void;
						public invalidate(): void;
						public show(): void;
						public initialize(): void;
						public constructor(timePickerView: android.widget.LinearLayout, time: com.google.android.material.timepicker.TimeModel);
						public resetChecked(): void;
						public hide(): void;
						public clearCheck(): void;
						public onSelectionChanged(param0: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module timepicker {
					export class TimePickerView extends androidx.constraintlayout.widget.ConstraintLayout implements com.google.android.material.timepicker.TimePickerControls {
						public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerView>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public setMinuteHourDelegate(clickActionDelegate: androidx.core.view.AccessibilityDelegateCompat): void;
						public setValues(values: string[], contentDescription: number): void;
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public showToggle(): void;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public setActiveSelection(selection: number): void;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setHandRotation(rotation: number): void;
						public updateTime(param0: number, param1: number, param2: number): void;
						public setActiveSelection(param0: number): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public addOnRotateListener(onRotateListener: com.google.android.material.timepicker.ClockHandView.OnRotateListener): void;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public setValues(param0: string[], param1: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getTextAlignment(): number;
						public onVisibilityChanged(changedView: android.view.View, visibility: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public constructor(param0: android.content.Context);
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public setOnActionUpListener(onActionUpListener: com.google.android.material.timepicker.ClockHandView.OnActionUpListener): void;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public setAnimateOnTouchUp(animating: boolean): void;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public focusableViewAvailable(v: android.view.View): void;
						public updateTime(period: number, hourOfDay: number, minute: number): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public setHandRotation(rotation: number, animate: boolean): void;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public setHandRotation(param0: number): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
						public setHourClickDelegate(clickActionDelegate: androidx.core.view.AccessibilityDelegateCompat): void;
					}
					export module TimePickerView {
						export class OnDoubleTapListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerView.OnDoubleTapListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.timepicker.TimePickerView$OnDoubleTapListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onDoubleTap(): void;
							});
							public constructor();
							public onDoubleTap(): void;
						}
						export class OnPeriodChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerView.OnPeriodChangeListener>;
							/**
							 * Constructs a new instance of the com.google.android.material.timepicker.TimePickerView$OnPeriodChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onPeriodChange(param0: number): void;
							});
							public constructor();
							public onPeriodChange(param0: number): void;
						}
						export class OnSelectionChange extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.timepicker.TimePickerView.OnSelectionChange>;
							/**
							 * Constructs a new instance of the com.google.android.material.timepicker.TimePickerView$OnSelectionChange interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onSelectionChanged(param0: number): void;
							});
							public constructor();
							public onSelectionChanged(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module tooltip {
					export class TooltipDrawable extends com.google.android.material.shape.MaterialShapeDrawable implements com.google.android.material.internal.TextDrawableHelper.TextDrawableDelegate {
						public static class: java.lang.Class<com.google.android.material.tooltip.TooltipDrawable>;
						public draw(canvas: android.graphics.Canvas): void;
						public onBoundsChange(bounds: android.graphics.Rect): void;
						public onStateChange(state: number[]): boolean;
						public setTintList(param0: android.content.res.ColorStateList): void;
						public getTextAppearance(): com.google.android.material.resources.TextAppearance;
						public setTextAppearanceResource(id: number): void;
						public setTintList(tintList: android.content.res.ColorStateList): void;
						public getTextPadding(): number;
						public setRevealFraction(fraction: number): void;
						public setMinHeight(minHeight: number): void;
						public setRelativeToView(view: android.view.View): void;
						public getText(): string;
						public setTintMode(tintMode: android.graphics.PorterDuff.Mode): void;
						public static createFromAttributes(context: android.content.Context, attrs: android.util.AttributeSet): com.google.android.material.tooltip.TooltipDrawable;
						public setTextAppearance(textAppearance: com.google.android.material.resources.TextAppearance): void;
						public getLayoutMargin(): number;
						public setMinWidth(minWidth: number): void;
						public getMinHeight(): number;
						public getIntrinsicWidth(): number;
						public setTextResource(id: number): void;
						public getIntrinsicHeight(): number;
						public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public setTint(param0: number): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public static createFromAttributes(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number): com.google.android.material.tooltip.TooltipDrawable;
						public setText(text: string): void;
						public onTextSizeChange(): void;
						public setLayoutMargin(layoutMargin: number): void;
						public setTextPadding(padding: number): void;
						public static create(context: android.content.Context): com.google.android.material.tooltip.TooltipDrawable;
						public getMinWidth(): number;
						public getState(): number[];
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public onStateChange(param0: number[]): boolean;
						public detachView(view: android.view.View): void;
						public setTint(tintColor: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transformation {
					export abstract class ExpandableBehavior extends androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior<android.view.View> {
						public static class: java.lang.Class<com.google.android.material.transformation.ExpandableBehavior>;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public onDependentViewChanged(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, dependency: android.view.View): boolean;
						public constructor();
						public onLayoutChild(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, layoutDirection: number): boolean;
						public onLayoutChild(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: number): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public layoutDependsOn(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: android.view.View, param2: android.view.View): boolean;
						public findExpandableWidget(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View): com.google.android.material.expandable.ExpandableWidget;
						public onExpandedStateChange(param0: android.view.View, param1: android.view.View, param2: boolean, param3: boolean): boolean;
						public static from(view: android.view.View, klass: java.lang.Class<any>): com.google.android.material.transformation.ExpandableBehavior;
						public layoutDependsOn(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): boolean;
						public onDependentViewChanged(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.View): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transformation {
					export abstract class ExpandableTransformationBehavior extends com.google.android.material.transformation.ExpandableBehavior {
						public static class: java.lang.Class<com.google.android.material.transformation.ExpandableTransformationBehavior>;
						public constructor();
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public onCreateExpandedStateChangeAnimation(param0: android.view.View, param1: android.view.View, param2: boolean, param3: boolean): android.animation.AnimatorSet;
						public onExpandedStateChange(param0: android.view.View, param1: android.view.View, param2: boolean, param3: boolean): boolean;
						public onExpandedStateChange(dependency: android.view.View, child: android.view.View, expanded: boolean, animated: boolean): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transformation {
					export abstract class FabTransformationBehavior extends com.google.android.material.transformation.ExpandableTransformationBehavior {
						public static class: java.lang.Class<com.google.android.material.transformation.FabTransformationBehavior>;
						public constructor();
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public layoutDependsOn(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: android.view.View, param2: android.view.View): boolean;
						public onAttachedToLayoutParams(param0: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
						public onCreateExpandedStateChangeAnimation(param0: android.view.View, param1: android.view.View, param2: boolean, param3: boolean): android.animation.AnimatorSet;
						public onCreateExpandedStateChangeAnimation(dependency: android.view.View, child: android.view.View, expanded: boolean, isAnimating: boolean): android.animation.AnimatorSet;
						public onAttachedToLayoutParams(lp: androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams): void;
						public layoutDependsOn(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, dependency: android.view.View): boolean;
						public onCreateMotionSpec(param0: android.content.Context, param1: boolean): com.google.android.material.transformation.FabTransformationBehavior.FabTransformationSpec;
					}
					export module FabTransformationBehavior {
						export class FabTransformationSpec extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transformation.FabTransformationBehavior.FabTransformationSpec>;
							public timings: com.google.android.material.animation.MotionSpec;
							public positioning: com.google.android.material.animation.Positioning;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transformation {
					export class FabTransformationScrimBehavior extends com.google.android.material.transformation.ExpandableTransformationBehavior {
						public static class: java.lang.Class<com.google.android.material.transformation.FabTransformationScrimBehavior>;
						public static EXPAND_DELAY: number;
						public static EXPAND_DURATION: number;
						public static COLLAPSE_DELAY: number;
						public static COLLAPSE_DURATION: number;
						public constructor();
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public layoutDependsOn(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: android.view.View, param2: android.view.View): boolean;
						public onTouchEvent(param0: androidx.coordinatorlayout.widget.CoordinatorLayout, param1: any, param2: android.view.MotionEvent): boolean;
						public onCreateExpandedStateChangeAnimation(param0: android.view.View, param1: android.view.View, param2: boolean, param3: boolean): android.animation.AnimatorSet;
						public onCreateExpandedStateChangeAnimation(dependency: android.view.View, child: android.view.View, expanded: boolean, isAnimating: boolean): android.animation.AnimatorSet;
						public onTouchEvent(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, ev: android.view.MotionEvent): boolean;
						public layoutDependsOn(parent: androidx.coordinatorlayout.widget.CoordinatorLayout, child: android.view.View, dependency: android.view.View): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transformation {
					export class FabTransformationSheetBehavior extends com.google.android.material.transformation.FabTransformationBehavior {
						public static class: java.lang.Class<com.google.android.material.transformation.FabTransformationSheetBehavior>;
						public constructor();
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public onCreateMotionSpec(context: android.content.Context, expanded: boolean): com.google.android.material.transformation.FabTransformationBehavior.FabTransformationSpec;
						public onExpandedStateChange(dependency: android.view.View, child: android.view.View, expanded: boolean, animated: boolean): boolean;
						public onCreateMotionSpec(param0: android.content.Context, param1: boolean): com.google.android.material.transformation.FabTransformationBehavior.FabTransformationSpec;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transformation {
					export class TransformationChildCard extends com.google.android.material.circularreveal.cardview.CircularRevealCardView {
						public static class: java.lang.Class<com.google.android.material.transformation.TransformationChildCard>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public getShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public buildCircularRevealCache(): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isOpaque(): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public setChecked(checked: boolean): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setCircularRevealScrimColor(param0: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public draw(canvas: android.graphics.Canvas): void;
						public setCircularRevealScrimColor(color: number): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public draw(param0: android.graphics.Canvas): void;
						public destroyCircularRevealCache(): void;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public setShapeAppearanceModel(param0: com.google.android.material.shape.ShapeAppearanceModel): void;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public toggle(): void;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getCircularRevealScrimColor(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public isChecked(): boolean;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public setShapeAppearanceModel(shapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transformation {
					export class TransformationChildLayout extends com.google.android.material.circularreveal.CircularRevealFrameLayout {
						public static class: java.lang.Class<com.google.android.material.transformation.TransformationChildLayout>;
						public isLayoutRequested(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public requestSendAccessibilityEvent(child: android.view.View, event: android.view.accessibility.AccessibilityEvent): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public onNestedScroll(target: android.view.View, dxConsumed: number, dyConsumed: number, dxUnconsumed: number, dyUnconsumed: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(context: android.content.Context);
						public notifySubtreeAccessibilityStateChanged(child: android.view.View, source: android.view.View, changeType: number): void;
						public addView(child: android.view.View): void;
						public invalidateChild(child: android.view.View, dirty: android.graphics.Rect): void;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable): void;
						public onNestedFling(target: android.view.View, velocityX: number, velocityY: number, consumed: boolean): boolean;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public onKeyLongPress(keyCode: number, event: android.view.KeyEvent): boolean;
						public addView(child: android.view.View, index: number, params: android.view.ViewGroup.LayoutParams): void;
						public setRevealInfo(param0: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(target: android.view.View, action: number, args: android.os.Bundle): boolean;
						public sendAccessibilityEvent(eventType: number): void;
						public canResolveTextDirection(): boolean;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback): android.view.ActionMode;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public onNestedPreFling(target: android.view.View, velocityX: number, velocityY: number): boolean;
						public onKeyMultiple(keyCode: number, repeatCount: number, event: android.view.KeyEvent): boolean;
						public invalidateChildInParent(param0: number[], param1: android.graphics.Rect): android.view.ViewParent;
						public requestLayout(): void;
						public onKeyDown(keyCode: number, event: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(child: android.view.View, rectangle: android.graphics.Rect, immediate: boolean): boolean;
						public onNestedScrollAccepted(child: android.view.View, target: android.view.View, axes: number): void;
						public buildCircularRevealCache(): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isOpaque(): boolean;
						public addView(child: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public startActionModeForChild(originalView: android.view.View, callback: android.view.ActionMode.Callback, type: number): android.view.ActionMode;
						public isTextDirectionResolved(): boolean;
						public sendAccessibilityEventUnchecked(event: android.view.accessibility.AccessibilityEvent): void;
						/** @deprecated */
						public requestFitSystemWindows(): void;
						public focusSearch(focused: android.view.View, direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number, defStyleRes: number);
						public focusSearch(direction: number): android.view.View;
						public constructor(context: android.content.Context, attrs: android.util.AttributeSet, defStyleAttr: number);
						public getRevealInfo(): com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo;
						public scheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable, when: number): void;
						public invalidateChildInParent(location: number[], dirty: android.graphics.Rect): android.view.ViewParent;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public addView(child: android.view.View, index: number): void;
						public onKeyUp(keyCode: number, event: android.view.KeyEvent): boolean;
						public clearChildFocus(child: android.view.View): void;
						public setCircularRevealOverlayDrawable(param0: android.graphics.drawable.Drawable): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public unscheduleDrawable(who: android.graphics.drawable.Drawable, what: java.lang.Runnable): void;
						public showContextMenuForChild(originalView: android.view.View, x: number, y: number): boolean;
						public setCircularRevealOverlayDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestFitSystemWindows(): void;
						public onNestedPreScroll(target: android.view.View, dx: number, dy: number, consumed: number[]): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public getTextAlignment(): number;
						public setCircularRevealScrimColor(param0: number): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public createContextMenu(menu: android.view.ContextMenu): void;
						public onStopNestedScroll(child: android.view.View): void;
						public draw(canvas: android.graphics.Canvas): void;
						public setCircularRevealScrimColor(color: number): void;
						public canResolveLayoutDirection(): boolean;
						public getParentForAccessibility(): android.view.ViewParent;
						public sendAccessibilityEvent(param0: number): void;
						public showContextMenuForChild(originalView: android.view.View): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public requestChildFocus(child: android.view.View, focused: android.view.View): void;
						public requestTransparentRegion(child: android.view.View): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public bringChildToFront(child: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public getChildVisibleRect(child: android.view.View, r: android.graphics.Rect, offset: android.graphics.Point): boolean;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public showContextMenuForChild(param0: android.view.View, param1: number, param2: number): boolean;
						public draw(param0: android.graphics.Canvas): void;
						public destroyCircularRevealCache(): void;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusableViewAvailable(v: android.view.View): void;
						public updateViewLayout(view: android.view.View, params: android.view.ViewGroup.LayoutParams): void;
						public isLayoutDirectionResolved(): boolean;
						public recomputeViewAttributes(child: android.view.View): void;
						public removeView(param0: android.view.View): void;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: number[]): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public onStartNestedScroll(child: android.view.View, target: android.view.View, nestedScrollAxes: number): boolean;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public getCircularRevealScrimColor(): number;
						public invalidateDrawable(drawable: android.graphics.drawable.Drawable): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public setRevealInfo(revealInfo: com.google.android.material.circularreveal.CircularRevealWidget.RevealInfo): void;
						public addView(child: android.view.View, width: number, height: number): void;
						public childHasTransientStateChanged(child: android.view.View, childHasTransientState: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestDisallowInterceptTouchEvent(disallowIntercept: boolean): void;
						public removeView(view: android.view.View): void;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public clearChildFocus(param0: android.view.View): void;
						public childDrawableStateChanged(child: android.view.View): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public getCircularRevealOverlayDrawable(): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FadeModeEvaluator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.FadeModeEvaluator>;
						/**
						 * Constructs a new instance of the com.google.android.material.transition.FadeModeEvaluator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							evaluate(param0: number, param1: number, param2: number, param3: number): com.google.android.material.transition.FadeModeResult;
						});
						public constructor();
						public evaluate(param0: number, param1: number, param2: number, param3: number): com.google.android.material.transition.FadeModeResult;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FadeModeEvaluators extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.FadeModeEvaluators>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FadeModeResult extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.FadeModeResult>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FadeProvider extends java.lang.Object implements com.google.android.material.transition.VisibilityAnimatorProvider {
						public static class: java.lang.Class<com.google.android.material.transition.FadeProvider>;
						public constructor();
						public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public setIncomingEndThreshold(incomingEndThreshold: number): void;
						public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
						public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public getIncomingEndThreshold(): number;
						public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FadeThroughProvider extends java.lang.Object implements com.google.android.material.transition.VisibilityAnimatorProvider {
						public static class: java.lang.Class<com.google.android.material.transition.FadeThroughProvider>;
						public constructor();
						public setProgressThreshold(progressThreshold: number): void;
						public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
						public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public getProgressThreshold(): number;
						public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FitModeEvaluator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.FitModeEvaluator>;
						/**
						 * Constructs a new instance of the com.google.android.material.transition.FitModeEvaluator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							evaluate(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): com.google.android.material.transition.FitModeResult;
							shouldMaskStartBounds(param0: com.google.android.material.transition.FitModeResult): boolean;
							applyMask(param0: android.graphics.RectF, param1: number, param2: com.google.android.material.transition.FitModeResult): void;
						});
						public constructor();
						public applyMask(param0: android.graphics.RectF, param1: number, param2: com.google.android.material.transition.FitModeResult): void;
						public shouldMaskStartBounds(param0: com.google.android.material.transition.FitModeResult): boolean;
						public evaluate(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): com.google.android.material.transition.FitModeResult;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FitModeEvaluators extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.FitModeEvaluators>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class FitModeResult extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.FitModeResult>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class Hold extends androidx.transition.Visibility {
						public static class: java.lang.Class<com.google.android.material.transition.Hold>;
						public onAppear(param0: android.view.ViewGroup, param1: android.view.View, param2: androidx.transition.TransitionValues, param3: androidx.transition.TransitionValues): android.animation.Animator;
						public onAppear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: androidx.transition.TransitionValues, endValues: androidx.transition.TransitionValues): android.animation.Animator;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public onDisappear(param0: android.view.ViewGroup, param1: androidx.transition.TransitionValues, param2: number, param3: androidx.transition.TransitionValues, param4: number): android.animation.Animator;
						public constructor();
						public onAppear(param0: android.view.ViewGroup, param1: androidx.transition.TransitionValues, param2: number, param3: androidx.transition.TransitionValues, param4: number): android.animation.Animator;
						public onDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: androidx.transition.TransitionValues, endValues: androidx.transition.TransitionValues): android.animation.Animator;
						public onDisappear(param0: android.view.ViewGroup, param1: android.view.View, param2: androidx.transition.TransitionValues, param3: androidx.transition.TransitionValues): android.animation.Animator;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class MaskEvaluator extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.MaskEvaluator>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class MaterialArcMotion extends androidx.transition.PathMotion {
						public static class: java.lang.Class<com.google.android.material.transition.MaterialArcMotion>;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public constructor();
						public getPath(startX: number, startY: number, endX: number, endY: number): android.graphics.Path;
						public getPath(param0: number, param1: number, param2: number, param3: number): android.graphics.Path;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class MaterialContainerTransform extends androidx.transition.Transition {
						public static class: java.lang.Class<com.google.android.material.transition.MaterialContainerTransform>;
						public static TRANSITION_DIRECTION_AUTO: number;
						public static TRANSITION_DIRECTION_ENTER: number;
						public static TRANSITION_DIRECTION_RETURN: number;
						public static FADE_MODE_IN: number;
						public static FADE_MODE_OUT: number;
						public static FADE_MODE_CROSS: number;
						public static FADE_MODE_THROUGH: number;
						public static FIT_MODE_AUTO: number;
						public static FIT_MODE_WIDTH: number;
						public static FIT_MODE_HEIGHT: number;
						public getFadeMode(): number;
						public createAnimator(sceneRoot: android.view.ViewGroup, startValues: androidx.transition.TransitionValues, endValues: androidx.transition.TransitionValues): android.animation.Animator;
						public setDrawDebugEnabled(drawDebugEnabled: boolean): void;
						public getDrawingViewId(): number;
						public getStartContainerColor(): number;
						public getEndElevation(): number;
						public captureStartValues(param0: androidx.transition.TransitionValues): void;
						public getShapeMaskProgressThresholds(): com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds;
						public setStartView(startView: android.view.View): void;
						public setFadeMode(fadeMode: number): void;
						public captureEndValues(param0: androidx.transition.TransitionValues): void;
						public getScaleMaskProgressThresholds(): com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds;
						public getTransitionDirection(): number;
						public getTransitionProperties(): string[];
						public getScrimColor(): number;
						public createAnimator(param0: android.view.ViewGroup, param1: androidx.transition.TransitionValues, param2: androidx.transition.TransitionValues): android.animation.Animator;
						public isElevationShadowEnabled(): boolean;
						public getEndShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public constructor();
						public setStartContainerColor(containerColor: number): void;
						public getScaleProgressThresholds(): com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds;
						public setStartElevation(startElevation: number): void;
						public setStartViewId(startViewId: number): void;
						public setHoldAtEndEnabled(holdAtEndEnabled: boolean): void;
						public captureStartValues(transitionValues: androidx.transition.TransitionValues): void;
						public getEndContainerColor(): number;
						public isDrawDebugEnabled(): boolean;
						public setScaleMaskProgressThresholds(scaleMaskProgressThresholds: com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds): void;
						public setFitMode(fitMode: number): void;
						public setShapeMaskProgressThresholds(shapeMaskProgressThresholds: com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds): void;
						public setEndViewId(endViewId: number): void;
						public getStartShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
						public setStartShapeAppearanceModel(startShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public setAllContainerColors(containerColor: number): void;
						public setFadeProgressThresholds(fadeProgressThresholds: com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds): void;
						public getStartViewId(): number;
						public constructor(context: android.content.Context, entering: boolean);
						public setDrawingViewId(drawingViewId: number): void;
						public setEndShapeAppearanceModel(endShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
						public getStartView(): android.view.View;
						public getEndView(): android.view.View;
						public setEndContainerColor(containerColor: number): void;
						public setScaleProgressThresholds(scaleProgressThresholds: com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds): void;
						public getFadeProgressThresholds(): com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds;
						public setScrimColor(scrimColor: number): void;
						public setEndElevation(endElevation: number): void;
						public getEndViewId(): number;
						public setEndView(endView: android.view.View): void;
						public getContainerColor(): number;
						public setPathMotion(param0: androidx.transition.PathMotion): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setElevationShadowEnabled(elevationShadowEnabled: boolean): void;
						public setTransitionDirection(transitionDirection: number): void;
						public setPathMotion(pathMotion: androidx.transition.PathMotion): void;
						public setContainerColor(containerColor: number): void;
						public captureEndValues(transitionValues: androidx.transition.TransitionValues): void;
						public getStartElevation(): number;
						public isHoldAtEndEnabled(): boolean;
						public getFitMode(): number;
					}
					export module MaterialContainerTransform {
						export class FadeMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.transition.MaterialContainerTransform.FadeMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.MaterialContainerTransform$FadeMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class FitMode extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.transition.MaterialContainerTransform.FitMode>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.MaterialContainerTransform$FitMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class ProgressThresholds extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.MaterialContainerTransform.ProgressThresholds>;
							public getStart(): number;
							public getEnd(): number;
							public constructor(start: number, end: number);
						}
						export class ProgressThresholdsGroup extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.MaterialContainerTransform.ProgressThresholdsGroup>;
						}
						export class TransitionDirection extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.transition.MaterialContainerTransform.TransitionDirection>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.MaterialContainerTransform$TransitionDirection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class TransitionDrawable extends android.graphics.drawable.Drawable {
							public static class: java.lang.Class<com.google.android.material.transition.MaterialContainerTransform.TransitionDrawable>;
							public draw(param0: android.graphics.Canvas): void;
							public setAlpha(param0: number): void;
							public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
							public setColorFilter(param0: android.graphics.ColorFilter): void;
							public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
							public getOpacity(): number;
							public setAlpha(alpha: number): void;
							public draw(canvas: android.graphics.Canvas): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class MaterialElevationScale extends com.google.android.material.transition.MaterialVisibility<com.google.android.material.transition.ScaleProvider> {
						public static class: java.lang.Class<com.google.android.material.transition.MaterialElevationScale>;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public constructor();
						public constructor(growing: boolean);
						public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider);
						public isGrowing(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class MaterialFade extends com.google.android.material.transition.MaterialVisibility<com.google.android.material.transition.FadeProvider> {
						public static class: java.lang.Class<com.google.android.material.transition.MaterialFade>;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public constructor();
						public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class MaterialFadeThrough extends com.google.android.material.transition.MaterialVisibility<com.google.android.material.transition.FadeThroughProvider> {
						public static class: java.lang.Class<com.google.android.material.transition.MaterialFadeThrough>;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public constructor();
						public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class MaterialSharedAxis extends com.google.android.material.transition.MaterialVisibility<com.google.android.material.transition.VisibilityAnimatorProvider> {
						public static class: java.lang.Class<com.google.android.material.transition.MaterialSharedAxis>;
						public static X: number;
						public static Y: number;
						public static Z: number;
						public constructor(axis: number, forward: boolean);
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public constructor();
						public getAxis(): number;
						public isForward(): boolean;
						public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider);
					}
					export module MaterialSharedAxis {
						export class Axis extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.transition.MaterialSharedAxis.Axis>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.MaterialSharedAxis$Axis interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export abstract class MaterialVisibility<P>  extends androidx.transition.Visibility {
						public static class: java.lang.Class<com.google.android.material.transition.MaterialVisibility<any>>;
						public onAppear(param0: android.view.ViewGroup, param1: android.view.View, param2: androidx.transition.TransitionValues, param3: androidx.transition.TransitionValues): android.animation.Animator;
						public onAppear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: androidx.transition.TransitionValues, endValues: androidx.transition.TransitionValues): android.animation.Animator;
						public onDisappear(param0: android.view.ViewGroup, param1: androidx.transition.TransitionValues, param2: number, param3: androidx.transition.TransitionValues, param4: number): android.animation.Animator;
						public constructor();
						public onAppear(param0: android.view.ViewGroup, param1: androidx.transition.TransitionValues, param2: number, param3: androidx.transition.TransitionValues, param4: number): android.animation.Animator;
						public addAdditionalAnimatorProvider(additionalAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider): void;
						public onDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: androidx.transition.TransitionValues, endValues: androidx.transition.TransitionValues): android.animation.Animator;
						public clearAdditionalAnimatorProvider(): void;
						public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider);
						public getPrimaryAnimatorProvider(): any;
						public getSecondaryAnimatorProvider(): com.google.android.material.transition.VisibilityAnimatorProvider;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public setSecondaryAnimatorProvider(secondaryAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider): void;
						public removeAdditionalAnimatorProvider(additionalAnimatorProvider: com.google.android.material.transition.VisibilityAnimatorProvider): boolean;
						public onDisappear(param0: android.view.ViewGroup, param1: android.view.View, param2: androidx.transition.TransitionValues, param3: androidx.transition.TransitionValues): android.animation.Animator;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class ScaleProvider extends java.lang.Object implements com.google.android.material.transition.VisibilityAnimatorProvider {
						public static class: java.lang.Class<com.google.android.material.transition.ScaleProvider>;
						public getIncomingStartScale(): number;
						public constructor();
						public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public constructor(growing: boolean);
						public setOutgoingEndScale(outgoingEndScale: number): void;
						public getIncomingEndScale(): number;
						public setIncomingEndScale(incomingEndScale: number): void;
						public getOutgoingEndScale(): number;
						public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public setGrowing(growing: boolean): void;
						public setScaleOnDisappear(scaleOnDisappear: boolean): void;
						public setOutgoingStartScale(outgoingStartScale: number): void;
						public getOutgoingStartScale(): number;
						public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
						public isScaleOnDisappear(): boolean;
						public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
						public isGrowing(): boolean;
						public setIncomingStartScale(incomingStartScale: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class SlideDistanceProvider extends java.lang.Object implements com.google.android.material.transition.VisibilityAnimatorProvider {
						public static class: java.lang.Class<com.google.android.material.transition.SlideDistanceProvider>;
						public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public getSlideEdge(): number;
						public constructor(slideEdge: number);
						public setSlideDistance(slideDistance: number): void;
						public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
						public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public getSlideDistance(): number;
						public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
						public setSlideEdge(slideEdge: number): void;
					}
					export module SlideDistanceProvider {
						export class GravityFlag extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.android.material.transition.SlideDistanceProvider.GravityFlag>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.SlideDistanceProvider$GravityFlag interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(param0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export abstract class TransitionListenerAdapter extends java.lang.Object implements androidx.transition.Transition.TransitionListener {
						public static class: java.lang.Class<com.google.android.material.transition.TransitionListenerAdapter>;
						public onTransitionPause(param0: androidx.transition.Transition): void;
						public onTransitionCancel(transition: androidx.transition.Transition): void;
						public onTransitionStart(param0: androidx.transition.Transition): void;
						public onTransitionPause(transition: androidx.transition.Transition): void;
						public onTransitionResume(param0: androidx.transition.Transition): void;
						public onTransitionEnd(transition: androidx.transition.Transition): void;
						public onTransitionStart(transition: androidx.transition.Transition): void;
						public onTransitionEnd(param0: androidx.transition.Transition): void;
						public onTransitionResume(transition: androidx.transition.Transition): void;
						public onTransitionCancel(param0: androidx.transition.Transition): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class TransitionUtils extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.TransitionUtils>;
					}
					export module TransitionUtils {
						export class CornerSizeBinaryOperator extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.TransitionUtils.CornerSizeBinaryOperator>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.TransitionUtils$CornerSizeBinaryOperator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								apply(param0: com.google.android.material.shape.CornerSize, param1: com.google.android.material.shape.CornerSize): com.google.android.material.shape.CornerSize;
							});
							public constructor();
							public apply(param0: com.google.android.material.shape.CornerSize, param1: com.google.android.material.shape.CornerSize): com.google.android.material.shape.CornerSize;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export class VisibilityAnimatorProvider extends java.lang.Object {
						public static class: java.lang.Class<com.google.android.material.transition.VisibilityAnimatorProvider>;
						/**
						 * Constructs a new instance of the com.google.android.material.transition.VisibilityAnimatorProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						});
						public constructor();
						public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FadeModeEvaluator extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FadeModeEvaluator>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.platform.FadeModeEvaluator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								evaluate(param0: number, param1: number, param2: number, param3: number): com.google.android.material.transition.platform.FadeModeResult;
							});
							public constructor();
							public evaluate(param0: number, param1: number, param2: number, param3: number): com.google.android.material.transition.platform.FadeModeResult;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FadeModeEvaluators extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FadeModeEvaluators>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FadeModeResult extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FadeModeResult>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FadeProvider extends java.lang.Object implements com.google.android.material.transition.platform.VisibilityAnimatorProvider {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FadeProvider>;
							public constructor();
							public setIncomingEndThreshold(incomingEndThreshold: number): void;
							public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
							public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public getIncomingEndThreshold(): number;
							public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FadeThroughProvider extends java.lang.Object implements com.google.android.material.transition.platform.VisibilityAnimatorProvider {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FadeThroughProvider>;
							public constructor();
							public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
							public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public getProgressThreshold(): number;
							public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
							public setProgressThreshold(progressThreshold: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FitModeEvaluator extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FitModeEvaluator>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.platform.FitModeEvaluator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								evaluate(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): com.google.android.material.transition.platform.FitModeResult;
								shouldMaskStartBounds(param0: com.google.android.material.transition.platform.FitModeResult): boolean;
								applyMask(param0: android.graphics.RectF, param1: number, param2: com.google.android.material.transition.platform.FitModeResult): void;
							});
							public constructor();
							public evaluate(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): com.google.android.material.transition.platform.FitModeResult;
							public applyMask(param0: android.graphics.RectF, param1: number, param2: com.google.android.material.transition.platform.FitModeResult): void;
							public shouldMaskStartBounds(param0: com.google.android.material.transition.platform.FitModeResult): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FitModeEvaluators extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FitModeEvaluators>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class FitModeResult extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.FitModeResult>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class Hold extends android.transition.Visibility {
							public static class: java.lang.Class<com.google.android.material.transition.platform.Hold>;
							public constructor();
							public onAppear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: android.transition.TransitionValues, endValues: android.transition.TransitionValues): android.animation.Animator;
							public onDisappear(sceneRoot: android.view.ViewGroup, startValues: android.transition.TransitionValues, startVisibility: number, endValues: android.transition.TransitionValues, endVisibility: number): android.animation.Animator;
							public onAppear(sceneRoot: android.view.ViewGroup, startValues: android.transition.TransitionValues, startVisibility: number, endValues: android.transition.TransitionValues, endVisibility: number): android.animation.Animator;
							public onDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: android.transition.TransitionValues, endValues: android.transition.TransitionValues): android.animation.Animator;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaskEvaluator extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaskEvaluator>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaterialArcMotion extends android.transition.PathMotion {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialArcMotion>;
							public constructor();
							public getPath(param0: number, param1: number, param2: number, param3: number): android.graphics.Path;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public getPath(startX: number, startY: number, endX: number, endY: number): android.graphics.Path;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaterialContainerTransform extends android.transition.Transition {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransform>;
							public static TRANSITION_DIRECTION_AUTO: number;
							public static TRANSITION_DIRECTION_ENTER: number;
							public static TRANSITION_DIRECTION_RETURN: number;
							public static FADE_MODE_IN: number;
							public static FADE_MODE_OUT: number;
							public static FADE_MODE_CROSS: number;
							public static FADE_MODE_THROUGH: number;
							public static FIT_MODE_AUTO: number;
							public static FIT_MODE_WIDTH: number;
							public static FIT_MODE_HEIGHT: number;
							public setDrawingViewId(drawingViewId: number): void;
							public getScaleProgressThresholds(): com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds;
							public setScrimColor(scrimColor: number): void;
							public setDrawDebugEnabled(drawDebugEnabled: boolean): void;
							public setStartElevation(startElevation: number): void;
							public setEndViewId(endViewId: number): void;
							public getEndContainerColor(): number;
							public setFitMode(fitMode: number): void;
							public getContainerColor(): number;
							public setFadeMode(fadeMode: number): void;
							public getStartView(): android.view.View;
							public getEndViewId(): number;
							public getScaleMaskProgressThresholds(): com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds;
							public getTransitionDirection(): number;
							public setStartShapeAppearanceModel(startShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
							public getStartContainerColor(): number;
							public constructor(context: android.content.Context, entering: boolean);
							public setEndShapeAppearanceModel(endShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel): void;
							public getDrawingViewId(): number;
							public getStartViewId(): number;
							public setContainerColor(containerColor: number): void;
							public setFadeProgressThresholds(fadeProgressThresholds: com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds): void;
							public captureEndValues(transitionValues: android.transition.TransitionValues): void;
							public setElevationShadowEnabled(elevationShadowEnabled: boolean): void;
							public setEndView(endView: android.view.View): void;
							public setTransitionDirection(transitionDirection: number): void;
							public captureStartValues(transitionValues: android.transition.TransitionValues): void;
							public isElevationShadowEnabled(): boolean;
							public getStartElevation(): number;
							public isHoldAtEndEnabled(): boolean;
							public setEndContainerColor(containerColor: number): void;
							public setHoldAtEndEnabled(holdAtEndEnabled: boolean): void;
							public getEndView(): android.view.View;
							public captureEndValues(param0: android.transition.TransitionValues): void;
							public setEndElevation(endElevation: number): void;
							public getFitMode(): number;
							public getScrimColor(): number;
							public setStartView(startView: android.view.View): void;
							public getShapeMaskProgressThresholds(): com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds;
							public setAllContainerColors(containerColor: number): void;
							public setShapeMaskProgressThresholds(shapeMaskProgressThresholds: com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds): void;
							public constructor();
							public getFadeMode(): number;
							public createAnimator(sceneRoot: android.view.ViewGroup, startValues: android.transition.TransitionValues, endValues: android.transition.TransitionValues): android.animation.Animator;
							public getEndShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
							public setScaleMaskProgressThresholds(scaleMaskProgressThresholds: com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds): void;
							public getStartShapeAppearanceModel(): com.google.android.material.shape.ShapeAppearanceModel;
							public setStartContainerColor(containerColor: number): void;
							public setPathMotion(pathMotion: android.transition.PathMotion): void;
							public getFadeProgressThresholds(): com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds;
							public isDrawDebugEnabled(): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public setScaleProgressThresholds(scaleProgressThresholds: com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds): void;
							public getEndElevation(): number;
							public captureStartValues(param0: android.transition.TransitionValues): void;
							public getTransitionProperties(): string[];
							public setStartViewId(startViewId: number): void;
						}
						export module MaterialContainerTransform {
							export class FadeMode extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransform.FadeMode>;
								/**
								 * Constructs a new instance of the com.google.android.material.transition.platform.MaterialContainerTransform$FadeMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
							export class FitMode extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransform.FitMode>;
								/**
								 * Constructs a new instance of the com.google.android.material.transition.platform.MaterialContainerTransform$FitMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
							export class ProgressThresholds extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholds>;
								public getStart(): number;
								public getEnd(): number;
								public constructor(start: number, end: number);
							}
							export class ProgressThresholdsGroup extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransform.ProgressThresholdsGroup>;
							}
							export class TransitionDirection extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransform.TransitionDirection>;
								/**
								 * Constructs a new instance of the com.google.android.material.transition.platform.MaterialContainerTransform$TransitionDirection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
							export class TransitionDrawable extends android.graphics.drawable.Drawable {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransform.TransitionDrawable>;
								public setAlpha(alpha: number): void;
								public setAlpha(param0: number): void;
								public setColorFilter(color: number, mode: android.graphics.PorterDuff.Mode): void;
								public getOpacity(): number;
								public setColorFilter(colorFilter: android.graphics.ColorFilter): void;
								public draw(param0: android.graphics.Canvas): void;
								public setColorFilter(param0: android.graphics.ColorFilter): void;
								public draw(canvas: android.graphics.Canvas): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaterialContainerTransformSharedElementCallback extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback>;
							public constructor();
							public onSharedElementEnd(sharedElementNames: java.util.List<string>, sharedElements: java.util.List<android.view.View>, sharedElementSnapshots: java.util.List<android.view.View>): void;
							public onSharedElementStart(sharedElementNames: java.util.List<string>, sharedElements: java.util.List<android.view.View>, sharedElementSnapshots: java.util.List<android.view.View>): void;
							public onCreateSnapshotView(context: android.content.Context, snapshot: android.os.Parcelable): android.view.View;
							public setTransparentWindowBackgroundEnabled(transparentWindowBackgroundEnabled: boolean): void;
							public isSharedElementReenterTransitionEnabled(): boolean;
							public setShapeProvider(shapeProvider: com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback.ShapeProvider): void;
							public setSharedElementReenterTransitionEnabled(sharedElementReenterTransitionEnabled: boolean): void;
							public getShapeProvider(): com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback.ShapeProvider;
							public isTransparentWindowBackgroundEnabled(): boolean;
							public onCaptureSharedElementSnapshot(sharedElement: android.view.View, viewToGlobalMatrix: android.graphics.Matrix, screenBounds: android.graphics.RectF): android.os.Parcelable;
							public onMapSharedElements(names: java.util.List<string>, sharedElements: java.util.Map<string,android.view.View>): void;
						}
						export module MaterialContainerTransformSharedElementCallback {
							export class ShapeProvider extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback.ShapeProvider>;
								/**
								 * Constructs a new instance of the com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback$ShapeProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									provideShape(param0: android.view.View): com.google.android.material.shape.ShapeAppearanceModel;
								});
								public constructor();
								public provideShape(param0: android.view.View): com.google.android.material.shape.ShapeAppearanceModel;
							}
							export class ShapeableViewShapeProvider extends java.lang.Object implements com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback.ShapeProvider {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialContainerTransformSharedElementCallback.ShapeableViewShapeProvider>;
								public provideShape(sharedElement: android.view.View): com.google.android.material.shape.ShapeAppearanceModel;
								public constructor();
								public provideShape(param0: android.view.View): com.google.android.material.shape.ShapeAppearanceModel;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaterialElevationScale extends com.google.android.material.transition.platform.MaterialVisibility<com.google.android.material.transition.platform.ScaleProvider> {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialElevationScale>;
							public constructor();
							public isGrowing(): boolean;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider);
							public constructor(growing: boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaterialFade extends com.google.android.material.transition.platform.MaterialVisibility<com.google.android.material.transition.platform.FadeProvider> {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialFade>;
							public constructor();
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaterialFadeThrough extends com.google.android.material.transition.platform.MaterialVisibility<com.google.android.material.transition.platform.FadeThroughProvider> {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialFadeThrough>;
							public constructor();
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class MaterialSharedAxis extends com.google.android.material.transition.platform.MaterialVisibility<com.google.android.material.transition.platform.VisibilityAnimatorProvider> {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialSharedAxis>;
							public static X: number;
							public static Y: number;
							public static Z: number;
							public constructor();
							public constructor(axis: number, forward: boolean);
							public isForward(): boolean;
							public getAxis(): number;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider);
						}
						export module MaterialSharedAxis {
							export class Axis extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialSharedAxis.Axis>;
								/**
								 * Constructs a new instance of the com.google.android.material.transition.platform.MaterialSharedAxis$Axis interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export abstract class MaterialVisibility<P>  extends android.transition.Visibility {
							public static class: java.lang.Class<com.google.android.material.transition.platform.MaterialVisibility<any>>;
							public constructor();
							public removeAdditionalAnimatorProvider(additionalAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider): boolean;
							public onDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: android.transition.TransitionValues, endValues: android.transition.TransitionValues): android.animation.Animator;
							public constructor(context: android.content.Context, attrs: android.util.AttributeSet);
							public onAppear(sceneRoot: android.view.ViewGroup, view: android.view.View, startValues: android.transition.TransitionValues, endValues: android.transition.TransitionValues): android.animation.Animator;
							public onDisappear(sceneRoot: android.view.ViewGroup, startValues: android.transition.TransitionValues, startVisibility: number, endValues: android.transition.TransitionValues, endVisibility: number): android.animation.Animator;
							public onAppear(sceneRoot: android.view.ViewGroup, startValues: android.transition.TransitionValues, startVisibility: number, endValues: android.transition.TransitionValues, endVisibility: number): android.animation.Animator;
							public getPrimaryAnimatorProvider(): any;
							public clearAdditionalAnimatorProvider(): void;
							public addAdditionalAnimatorProvider(additionalAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider): void;
							public getSecondaryAnimatorProvider(): com.google.android.material.transition.platform.VisibilityAnimatorProvider;
							public constructor(primaryAnimatorProvider: any, secondaryAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider);
							public setSecondaryAnimatorProvider(secondaryAnimatorProvider: com.google.android.material.transition.platform.VisibilityAnimatorProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class ScaleProvider extends java.lang.Object implements com.google.android.material.transition.platform.VisibilityAnimatorProvider {
							public static class: java.lang.Class<com.google.android.material.transition.platform.ScaleProvider>;
							public constructor();
							public setOutgoingStartScale(outgoingStartScale: number): void;
							public setGrowing(growing: boolean): void;
							public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public setIncomingStartScale(incomingStartScale: number): void;
							public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
							public isGrowing(): boolean;
							public getIncomingStartScale(): number;
							public getIncomingEndScale(): number;
							public getOutgoingEndScale(): number;
							public getOutgoingStartScale(): number;
							public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
							public setIncomingEndScale(incomingEndScale: number): void;
							public setOutgoingEndScale(outgoingEndScale: number): void;
							public isScaleOnDisappear(): boolean;
							public setScaleOnDisappear(scaleOnDisappear: boolean): void;
							public constructor(growing: boolean);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class SlideDistanceProvider extends java.lang.Object implements com.google.android.material.transition.platform.VisibilityAnimatorProvider {
							public static class: java.lang.Class<com.google.android.material.transition.platform.SlideDistanceProvider>;
							public getSlideEdge(): number;
							public setSlideDistance(slideDistance: number): void;
							public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public createDisappear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
							public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public constructor(slideEdge: number);
							public createAppear(sceneRoot: android.view.ViewGroup, view: android.view.View): android.animation.Animator;
							public getSlideDistance(): number;
							public setSlideEdge(slideEdge: number): void;
						}
						export module SlideDistanceProvider {
							export class GravityFlag extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<com.google.android.material.transition.platform.SlideDistanceProvider.GravityFlag>;
								/**
								 * Constructs a new instance of the com.google.android.material.transition.platform.SlideDistanceProvider$GravityFlag interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(param0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public equals(param0: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export abstract class TransitionListenerAdapter extends java.lang.Object implements android.transition.Transition.TransitionListener {
							public static class: java.lang.Class<com.google.android.material.transition.platform.TransitionListenerAdapter>;
							public onTransitionEnd(transition: android.transition.Transition): void;
							public onTransitionCancel(param0: android.transition.Transition): void;
							public onTransitionPause(param0: android.transition.Transition): void;
							public onTransitionStart(transition: android.transition.Transition): void;
							public onTransitionEnd(param0: android.transition.Transition): void;
							public onTransitionPause(transition: android.transition.Transition): void;
							public onTransitionStart(param0: android.transition.Transition): void;
							public onTransitionResume(param0: android.transition.Transition): void;
							public onTransitionCancel(transition: android.transition.Transition): void;
							public onTransitionResume(transition: android.transition.Transition): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class TransitionUtils extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.TransitionUtils>;
						}
						export module TransitionUtils {
							export class CornerSizeBinaryOperator extends java.lang.Object {
								public static class: java.lang.Class<com.google.android.material.transition.platform.TransitionUtils.CornerSizeBinaryOperator>;
								/**
								 * Constructs a new instance of the com.google.android.material.transition.platform.TransitionUtils$CornerSizeBinaryOperator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									apply(param0: com.google.android.material.shape.CornerSize, param1: com.google.android.material.shape.CornerSize): com.google.android.material.shape.CornerSize;
								});
								public constructor();
								public apply(param0: com.google.android.material.shape.CornerSize, param1: com.google.android.material.shape.CornerSize): com.google.android.material.shape.CornerSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module android {
			export module material {
				export module transition {
					export module platform {
						export class VisibilityAnimatorProvider extends java.lang.Object {
							public static class: java.lang.Class<com.google.android.material.transition.platform.VisibilityAnimatorProvider>;
							/**
							 * Constructs a new instance of the com.google.android.material.transition.platform.VisibilityAnimatorProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
								createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							});
							public constructor();
							public createDisappear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
							public createAppear(param0: android.view.ViewGroup, param1: android.view.View): android.animation.Animator;
						}
					}
				}
			}
		}
	}
}

//Generics information:
//com.google.android.material.animation.TransformationCallback:1
//com.google.android.material.appbar.AppBarLayout.BaseBehavior:1
//com.google.android.material.appbar.AppBarLayout.BaseBehavior.BaseDragCallback:1
//com.google.android.material.appbar.AppBarLayout.BaseOnOffsetChangedListener:1
//com.google.android.material.appbar.HeaderBehavior:1
//com.google.android.material.appbar.ViewOffsetBehavior:1
//com.google.android.material.behavior.HideBottomViewOnScrollBehavior:1
//com.google.android.material.behavior.SwipeDismissBehavior:1
//com.google.android.material.bottomsheet.BottomSheetBehavior:1
//com.google.android.material.datepicker.DateSelector:1
//com.google.android.material.datepicker.MaterialCalendar:1
//com.google.android.material.datepicker.MaterialDatePicker:1
//com.google.android.material.datepicker.MaterialDatePicker.Builder:1
//com.google.android.material.datepicker.MaterialPickerOnPositiveButtonClickListener:1
//com.google.android.material.datepicker.MaterialTextInputPicker:1
//com.google.android.material.datepicker.OnSelectionChangedListener:1
//com.google.android.material.datepicker.PickerFragment:1
//com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton.ExtendedFloatingActionButtonBehavior:1
//com.google.android.material.floatingactionbutton.FloatingActionButton.BaseBehavior:1
//com.google.android.material.floatingactionbutton.FloatingActionButton.TransformationCallbackWrapper:1
//com.google.android.material.internal.CheckableGroup:1
//com.google.android.material.internal.MaterialCheckable:1
//com.google.android.material.internal.MaterialCheckable.OnCheckedChangeListener:1
//com.google.android.material.motion.MaterialBackAnimationHelper:1
//com.google.android.material.progressindicator.BaseProgressIndicator:1
//com.google.android.material.progressindicator.DeterminateDrawable:1
//com.google.android.material.progressindicator.DrawingDelegate:1
//com.google.android.material.progressindicator.IndeterminateAnimatorDelegate:1
//com.google.android.material.progressindicator.IndeterminateDrawable:1
//com.google.android.material.sidesheet.Sheet:1
//com.google.android.material.sidesheet.SheetDialog:1
//com.google.android.material.sidesheet.SideSheetBehavior:1
//com.google.android.material.slider.BaseOnChangeListener:1
//com.google.android.material.slider.BaseOnSliderTouchListener:1
//com.google.android.material.slider.BaseSlider:3
//com.google.android.material.snackbar.BaseTransientBottomBar:1
//com.google.android.material.snackbar.BaseTransientBottomBar.BaseCallback:1
//com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener:1
//com.google.android.material.textfield.MaterialAutoCompleteTextView.MaterialArrayAdapter:1
//com.google.android.material.transition.MaterialVisibility:1
//com.google.android.material.transition.platform.MaterialVisibility:1

